{"title":"软件构件考试","uid":"696f02b3075e4b4944dbfb1eaebb278e","slug":"temp_软件构件","date":"2022-12-06T07:04:17.361Z","updated":"2022-12-06T07:03:56.375Z","comments":true,"path":"api/articles/temp_软件构件.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (106).webp","content":"<h1 id=\"软件构件\"><a href=\"#软件构件\" class=\"headerlink\" title=\"软件构件\"></a>软件构件</h1><h2 id=\"2016-A\"><a href=\"#2016-A\" class=\"headerlink\" title=\"2016 A\"></a>2016 A</h2><p>一、选择题</p>\n<p>\\1. 设计模式一般是用来解决什么问题的（ D  ）。</p>\n<p>A．需求获取中业务领域知识获取     </p>\n<p>B．测试用例的设计</p>\n<p>C．编码中如何组织代码         </p>\n<p><strong>D．同一问题的不同表象</strong></p>\n<p>\\2. 开闭原则的含义是一个软件实体（ A  ）。</p>\n<p><strong>A．应该对扩展开发，对修改关闭</strong>     </p>\n<p>B．对修改开放，对扩展关闭</p>\n<p>C．在应用子类的地方可以使用父类代替 </p>\n<p> D．应该尽可能的使用大粒度的类实现</p>\n<p>\\3. 以下不属于创建型设计模式的是（ B  ）。</p>\n<p>A．工厂模式             </p>\n<p> <strong>B．Proxy模式</strong></p>\n<p>C．抽象工厂              </p>\n<p>D．Builder模式</p>\n<p>\\4. 在应用程序开发中那种设计模式可以用于分离出算法（ A  ）。</p>\n<p><strong>A.策略模式</strong>              </p>\n<p>B.中介模式</p>\n<p>C.组合模式             </p>\n<p> D.适配器模式</p>\n<p>\\5. 下列属于结构型设计模式的是（ C  ）。</p>\n<p>A．工厂模式            </p>\n<p>  B．中介模式</p>\n<p><strong>C．组合模式</strong>             </p>\n<p> D．命令模式</p>\n<p>\\6. 不和陌生人说话（ B  ）是的通俗表示表述。</p>\n<p>A．接口隔离原则            </p>\n<p><strong>B. 迪米特法则</strong></p>\n<p>C. 开闭原则             </p>\n<p> D. 依赖倒置原则</p>\n<p>\\7. 下列属于面向对象基本原则的是（ C  ）</p>\n<p>A. 继承             </p>\n<p> B. 封装</p>\n<p><strong>C. 里氏代换</strong>           </p>\n<p>D. 都不是</p>\n<p>\\8. 要依赖于抽象，不要依赖具体。即针对接口编程，不要针对实现编程,是（ D  ）的表述。  </p>\n<p>A. 开-闭原则           </p>\n<p> B. 接口隔离原则</p>\n<p>C. 里氏代换原则        </p>\n<p>  <strong>D. 依赖倒转原则</strong></p>\n<p>\\9. 设计模式的两大主题是（ D  ）</p>\n<p>A. 系统的维护与开发       </p>\n<p>B. 对象组合与类的继承<br> C. 系统架构与系统开发     </p>\n<p> <strong>D. 系统复用与系统扩展</strong></p>\n<p>\\10. 以下对”开-闭”原则的一些描述错误的是? （ A ）</p>\n<p><strong>A. “开-闭”原则与”对可变性的封装原则”没有相似性.</strong></p>\n<p>B. 找到一个系统的可变元素,将它封装起来,叫”开-闭”原则</p>\n<p>C. 对修改关闭: 是其原则之一</p>\n<p>D. 从抽象层导出一个或多个新的具体类可以改变系统的行为,是其原则之一</p>\n<p>\\11. 以下意图那个是用来描述SINGLETON（单例模式）? （ B  ）</p>\n<p>A. 将一个类的接口转换成客户希望的另外一个接口。该模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</p>\n<p><strong>B. 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</strong></p>\n<p>C. 定义一系列算法，并把他们分装起来， 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p>\n<p>D. 用一个中介对象来封装一系列的对象交互。</p>\n<p>\\12. 以下意图那个是用来描述COMPOSITE（组合模式）? （ C  ）</p>\n<p>A. 为其他对象提供一种代理以控制对这个对象的访问。</p>\n<p>B. 运用共享技术有效地支持大量细粒度的对象。</p>\n<p><strong>C. 将对象组合成树形结构以表示 “部分-整体” 的层次结构。</strong></p>\n<p>D. 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<p>\\13. 以下意图那个是用来描述 FACADE（外观模式）?( A )</p>\n<p><strong>A. 为子系统中的一组接口提供一个一致的界面，本模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</strong></p>\n<p>B. 定义一个用于创建对象的接口，让子类决定实例化哪一个类。</p>\n<p>C. 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p>D. 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>\n<p>\\14. 以下意图那个是用来描述 VISITOR（访问者模式）?( B )</p>\n<p>A. 定义对象间的一种一对多的依赖关系, 当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>\n<p><strong>B. 表示一个作用于某对象结构中的各元素的操作。</strong></p>\n<p>C. 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>\n<p>D. 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n<p>\\15. 设计模式的原理? ( C )</p>\n<p>A. 面对实现编程           </p>\n<p>B. 面向对象编程</p>\n<p><strong>C. 面向接口编程</strong>         </p>\n<p> D. 面向组合编程</p>\n<p>二、填空题</p>\n<p> \\1. 工厂模式分为 <strong>简单工厂、工厂模式、抽象工厂</strong> 三种类型。</p>\n<p> \\2. 创立型模式的根本意图是要把（<strong>对象的创建</strong>）和（<strong>使用分离</strong>）的责任进行分离，从而降低系统的（耦合度）。</p>\n<p> \\3. MVC模型的基本工作原理是基于（<strong>观察者</strong>）模式，实现是基于（<strong>命令</strong>）模式。</p>\n<p> \\4. 设计模式的基本要素有： <strong>名字、意图 、问题 、方案、参与者与协作者 、实现、一般性结构</strong></p>\n<p> \\5. 接口是可以在整个模型中反复使用的一组行为，是一个没有（<strong>属性</strong>）而只有（<strong>方法</strong>）的类。</p>\n<p> \\6. 软件体系结构是指一个系统的有目的的设计和规划，这个设计规划既不描述（<strong>活动</strong>），也不描述（<strong>系统怎么开发</strong>），它只描述系统的（<strong>组成元素</strong>）及其相互的交互协作。</p>\n<p>三、简答题</p>\n<p> \\1. 什么是设计模式？设计模式目标是什么？</p>\n<p><strong>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</strong></p>\n<p><strong>使用设计模式是为了可重用代码、让代码更容易被他人理解，保证代码可靠性</strong></p>\n<p> \\2. 设计模式中一般都遵循的原则有什么？</p>\n<p><strong>开闭原则、根据场景进行设计原则、优先组合原则、包容变化原则</strong></p>\n<p> \\3. 在MVC模型中M、V、C分别指什么？简述它们之间的关系？</p>\n<p><strong>M: 模型(Model), V:视图(View) C:控制Controller)。</strong></p>\n<p><strong>Model层实现系统中的业务逻辑，通常可以用JavaBean或EJB来实现。 View层用于与用户的交互，通常用JSP来实现。 Controller层是Model与View之间沟通的桥梁，它可以分派用户的请求并选择恰当的视图以用于显示，同时它也可以解释用户的输入并将它们映射为模型层可执行的操作。</strong></p>\n<p> \\4. 面向对象系统中功能复用的两种最常用技术是什么？</p>\n<p><strong>类继承和对象组合</strong></p>\n<p> \\5. 只根据抽象类中定义的接口来操纵对象有什么好处？</p>\n<p>   <strong>客户无须知道他们使用对象的特定类型，只须对象有客户所期望的接口</strong></p>\n<p>   <strong>客户无须知道他们使用的对象是用什么类来实现的，他们只须知道定义接口的抽象类。</strong></p>\n<p>四、应用题</p>\n<p> \\1. 画出工厂方法模式的结构图。什么情况下适合使用工厂方发模式？（8分）  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Interface Product</p>\n<p>​    Interface ConcreteProduct 实现 Product</p>\n<p>​    Class Creator –&gt; product FactoryMethod()</p>\n<p>​                 \t\t –&gt;  void AnOperation()</p>\n<p>​    ConcreteCreator 继承 Creator à concreteproduct FactoryMethod() overide</p></blockquote>\n<p><strong>其中product：为工厂模式所要创建的对象类型定义一个接口。</strong></p>\n<p><strong>Concrete product:实现product接口。</strong></p>\n<p><strong>Creator：声明工厂方法（factory method）返回值为product的一个对象。</strong></p>\n<p><strong>Concrete creator：覆写factory Method()，返回值为concrete product 的一个具体实例。</strong></p>\n<ol>\n<li><p><strong>当客户程序不需要知道要使用对象的创建过程。</strong> </p>\n</li>\n<li><p><strong>客户程序使用的对象存在变动的可能，或者根本就不知道使用哪一个具体的对象。</strong></p>\n</li>\n</ol>\n<p>\\2. 请用命令设计模式实现下图所示系统（12分）</p>\n<p>题目：发送者（开关）— 命令（电线）– 接收者（电灯）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public abstract class Command \n&#123;\n  protected Appliance appliance;\n\n  public Command(Appliance appliance)\n  &#123;\n      this.appliance&#x3D;appliance;\n  &#125;\n\n  abstract public void excute();\n&#125; </code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">interface Appliance \n&#123;\n  public void on();\n  public void off();\n&#125;</code></pre>\n\n\n\n<h2 id=\"2016-B\"><a href=\"#2016-B\" class=\"headerlink\" title=\"2016 B\"></a>2016 B</h2><p>一、选择题</p>\n<p>\\1. 对于依赖倒转的表述错误的是（ D ）</p>\n<p>A. 依赖于抽象而不依赖于具体，也就是针对接口编程。<br> B. 依赖倒转的接口并非语法意义上的接口，而是，一个类对其他对象进行调用时，所知道的方法集合。<br> C. 从选项B的角度论述，一个对象可以有多个接口。<br> <strong>D. 此题没有正确答案。</strong></p>\n<p>\\2. 以下意图那个是用来描述桥接模式? （ B  ）</p>\n<p>A. 提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<p><strong>B. 将抽象部分与它的实现部分分离，使它们都可以独立地变化。</strong></p>\n<p>C. 将一个复杂对象的构建与它的表示分离，使得同样构建过程可以创建不同的表示。</p>\n<p>D. 动态地给一个对象添加一些额外的职责。</p>\n<p>\\3. 以下属于属于创建型设计模式的是（ C  ）。</p>\n<p>A．外观模式               </p>\n<p>B．中介模式</p>\n<p><strong>C．抽象工厂</strong>              </p>\n<p> D．命令模式</p>\n<p>\\4. 对象组合的有点表述不当的是（ D  ）</p>\n<p>A. 容器类仅能通过被包含对象的接口来对其进行访问。</p>\n<p>B. “黑盒” 复用，封装性好，因为被包含对象的内部细节对外是不可见。</p>\n<p>C. 通过获取指向其它的具有相同类型的对象引用，可以在运行期间动态地定义（对象的）组合</p>\n<p><strong>D.造成极其严重的依赖关系。</strong></p>\n<p>\\5. 在应用程序开发中那种设计模式可以用于分离出算法（ A  ）。</p>\n<p><strong>A. 策略模式</strong>               </p>\n<p>B. 中介模式</p>\n<p>C. 组合模式             </p>\n<p> D. 适配器模式</p>\n<p>\\6. 下列不属于结构型设计模式的是（ A  ）。</p>\n<p><strong>A．命令模式</strong>               </p>\n<p>B．适配器模式</p>\n<p>C．组合模式             </p>\n<p> D．外观模式</p>\n<p>\\7. 当我们想创建一个具体的对象而又不希望指定具体的类时，可以使用（ A  ）模式。</p>\n<p> <strong>A.创建型</strong>               </p>\n<p>B.结构型</p>\n<p> C行为型               </p>\n<p> D.以上都可以</p>\n<p>\\8. 在观察者模式中，表述错误的是（ C  ）</p>\n<p>A.观察者角色的更新是被动的。</p>\n<p>B.被观察者可以通知观察者进行更新</p>\n<p><strong>C.观察者可以改变被观察者的状态，再由被观察者通知所有观察者依据被观察者的状态进行</strong>。</p>\n<p>D.以上表述全部错误。</p>\n<p>\\9. 开闭原则的含义是一个软件实体（ A ）。</p>\n<p><strong>A．应该对扩展开发，对修改关闭</strong>      </p>\n<p>B．对修改开放，对扩展关闭</p>\n<p>C．在应用子类的地方可以使用父类代替 </p>\n<p>  D．应该尽可能的使用大粒度的类实现</p>\n<p>\\10. 关于继承表述错误的是：（ D  ）</p>\n<p>A.继承是一种通过扩展一个已有对象的实现，从而获得新功能的复用方法。</p>\n<p>B.泛化类（超类）可以显式地捕获那些公共的属性和方法。特殊类（子类）则通过附加属性和方法来进行实现的扩展。</p>\n<p>C.破坏了封装性，因为这会将父类的实现细节暴露给子类。</p>\n<p><strong>D.继承本质上是“白盒复用”，对父类的修改，不会影响到子类。</strong></p>\n<p>\\11. 设计模式一般是用来解决什么问题的（ A  ）。</p>\n<p><strong>A．同一问题的不同表象</strong>        </p>\n<p> B．测试用例的设计</p>\n<p>C．编码中如何组织代码          </p>\n<p>D． 需求获取中业务领域知识获取的问题</p>\n<p>\\12. 以下意图那个是用来描述 ITERATOR(迭代器)? （ C  ）</p>\n<p>A.使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。</p>\n<p>B.用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n<p><strong>C.提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。</strong></p>\n<p>D.运用共享技术有效地支持大量细粒度的对象。</p>\n<p>\\13. 下图结构图描述的是那种 模式? （ A  ）</p>\n<p><strong>A.  ABSTRACT FACTORY（抽象工厂）</strong></p>\n<p>B. FACTORY METHOD（工厂方法）<br> C. BUILDER（生成器）</p>\n<p>D. BRIDGE（桥接）</p>\n<p>\\14. 下图结构图描述的是那种模式? （ C  ）</p>\n<p>A.  STRATEGY(策略)</p>\n<p>B.  OBSERVER（观察者）</p>\n<p><strong>C.  ADAPTER（适配器）</strong></p>\n<p>D. BUILDER（生成器）</p>\n<p>\\15. 下列模式中,属于行为模式的是（ B  ）</p>\n<p> A. 工厂模式           </p>\n<p> <strong>B. 观察者</strong></p>\n<p> C. 适配器            </p>\n<p> D. 以上都是</p>\n<p>二、填空题</p>\n<p>\\1. 工厂模式分为 <strong>简单工厂，工厂模式，抽象工厂</strong> 三种类型。</p>\n<p>\\2. 创立型模式的根本意图是要把 <strong>对象的创建</strong> 和 <strong>使用分离</strong> 的责任进行分离，从而降低系统的 耦合度。</p>\n<p>\\3. 面向对象的七条基本原则包括： <strong>开闭原则，里式代换原则，合成聚合原则，依赖倒转，迪米特法则，单一原则，接口隔离</strong></p>\n<p>\\4. 在存在继承关系的情况下，方法向 <strong>超类</strong> 方向集中，而数据向 <strong>子类</strong> 方向集中。</p>\n<p>\\5. 适配器模式，分为类的适配器和对象的适配器两种实现。其中类的适配器采用的是 <strong>继承</strong> 关系，而对象适配器采用的是 <strong>组合聚合</strong> 关系。</p>\n<p>6． <strong>单例模式</strong> 模式确保某一个类仅有一个实例，并自行实例化并向整个系统提供这个实例。</p>\n<p>7．<strong>组合模式</strong> 模式将对象组合成树形结构以表示“部分-整体”的层次结构。使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>8．<strong>外观模式</strong> 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用，为子系统中的一组接口提供一个一致的界面。</p>\n<p>三、简答题</p>\n<p> \\1. 设计模式具有哪三大特点？ </p>\n<p>  <strong>可重用性, 可传授性, 名称，每个设计模式都有名称。</strong></p>\n<p> \\2. 为什么面向对象的分析和设计中优先使用组合，而非继承？</p>\n<p>  <strong>继承关系有很多缺点，如果合理使用组合则可以有效的避免这些缺点，使用组合关系将系统对变化的适应力从静态提升到动态，而且由于组合将已有对象组合到了新对象中，因此新对象可以调用已有对象的功能。</strong></p>\n<p> 3．单例模式的两种实现方法，并说明优缺点？</p>\n<p><strong>懒汉式，在类被加载时，唯一的实例已经被创建。这个模式在java中很容易实现，在其他语言中很难.</strong></p>\n<p>  <strong>饿汉式，在类加载的时候不创建单例实体。只有在第一次请求实例的时候创建，并且只在第一次创建后不再创佳该类的实例</strong></p>\n<p> \\4. 简述依赖例转原则的基本思想。请举出一个使用了软件依赖原则的软件设计模式，其中何处体现了依赖原则。</p>\n<p>  <strong>高层模块不应该依赖于低层模块，二者都应该依赖于抽象</strong></p>\n<p><strong>抽象不应该依赖于细节，细节应该不依赖于抽象</strong></p>\n<p> \\5. 列举两个可以使我们在程序中不必使用if…else结构的软件设计模式。使用软件设计模式是如何做到这一点的？<br>   <strong>策略模式（strategy）和状态模式（state）</strong></p>\n<p>  <strong>策略模式是将不同算法（处理方法）封装到stategy类中，状态模式是将不同状态封装到state类中。二者都是通过，类中的子类，实现不同情况的调用，从而有效的替换充满在程序中的 if else 语句。</strong></p>\n<p>四、综合题</p>\n<p> \\1. 我们经常碰到这种需求：通过公共场合传递文件，文件是用明文写的，凡是拿到这个文件都能看懂，传递过程中又不希望别人能看懂，于希望对文件内容进行加密。因为信息是不是军事机密，我们仅仅是想不被别人看明白，外传递过程中，传递人几乎不懂计算机的加密算法，那么很简单了，我们选择简单的字符移位的方法来实现加密。</p>\n<p>  请用外观模式实现这个文件传递过程，分别封装外观类，加密和解密类，文件存取类，客户端类。（Java语言或者类Java语言描述，语法可以不完全正确，但业务逻辑流程必须正确）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class FileWriter \n&#123;\n  public void write(String encryptStr,String fileNameDes) throws IOException, FileNotFoundException\n  &#123;\n   System.out.println(&quot;处理后的文件&quot;);\n   File fs&#x3D;new File(fileNameDes);\n      \n   OutputStream outputStream&#x3D;null;\n   if (!fs.exists())fs.createNewFile();\n      \n   outputStream&#x3D;new FileOutputStream(fs)\n   byte[] str&#x3D;encryptStr.getBytes();\n      \n   outputStream.write(str);\n   outputStream.flush();\n   outputStream.close();\n\n  &#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class FileReader \n&#123;\n  public String read(String fileNameSrc) throws FileNotFoundException, IOException\n  &#123;\n   System.out.println(&quot;以字节为单位读取文件内容，一次读一个字节：&quot;);\n   File fs&#x3D;new File(fileNameSrc);\n\n   String result &#x3D; null;\n   InputStream in&#x3D;null;\n   in&#x3D; new FileInputStream(fs);\n   byte[] bs&#x3D;new byte[(int) fs.length()];\n\n   in.read(bs);\n   result&#x3D;new String(bs);\n   in.close();\n   System.out.println(result);\n   return result;\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class EncryptFacade\n&#123;\n  \tprivate FileReader reader;\n  \tprivate EncryptDencrypt enDencrypt;\n  \tprivate FileWriter writer;\n  \tpublic EncryptFacade() &#123;\n  \tsuper();\n\n   \tthis.reader &#x3D; new FileReader();\n   \tthis.enDencrypt &#x3D; new EncryptDencrypt();\n   \tthis.writer &#x3D; new FileWriter();\n\n\tpublic void fileEncrypt(String fileNameSrc,String fileNameDes) throws IOException \n\t&#123;\n   \t\tString plainStr&#x3D;reader.read(fileNameSrc);\n   \t\tString encryptStr&#x3D;enDencrypt.encrypt(plainStr);\n   \t\twriter.write(encryptStr, fileNameDes);\n\t&#125;\n\n\tpublic void fileDencrypt(String fileNameEncode,String fileNameDecode) throws IOException \n\t&#123;\n   \t\tString encryptText&#x3D;reader.read(fileNameEncode);\n   \t\tString plainStr&#x3D;enDencrypt.deencrypyt(encryptText);\n   \t\twriter.write(plainStr, fileNameDecode);\n  \t&#125;\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class EncryptDencrypt \n&#123;\n  public String encrypt(String plainText)\n  &#123;\n      System.out.println(&quot;数据加密，将明文转换为密文:&quot;);\n      String esString&#x3D;&quot;&quot;;\n      char[] chars&#x3D;plainText.toCharArray();\n      for (char c : chars)\n      &#123;\n          char temp&#x3D;(char)(Integer.valueOf(c)-5);\n          esString&#x3D;esString+temp;\n      &#125;\n      System.out.println(esString);\n      return esString;\n  &#125;\n\n  public String deencrypyt(String encryptText) \n  &#123;\n      System.out.println(&quot;数据解密，将密文转换为明文:&quot;);\n\tString deString&#x3D;&quot;&quot;;\n\tchar[] chars&#x3D;encryptText.toCharArray();\n\tfor (char c : chars) \n    &#123;\n        char temp&#x3D;(char)(Integer.valueOf(c)+5);\n        deString&#x3D;deString+temp;\n    &#125;\n      System.out.println(deString);\n      return deString;\n  &#125;\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Client \n&#123;\n   public static void main(String[] args) throws IOException &#123;\n   EncryptFacade f&#x3D;new EncryptFacade();\n   System.out.println(&quot;加密文件：&quot;);\n   f.fileEncrypt(&quot;src.txt&quot;, &quot;des.txt&quot;);\n       \n   System.out.println(&quot;解密文件：&quot;);\n   f.fileDencrypt(&quot;des.txt&quot;, &quot;dsrc.txt&quot;);\n  &#125;\n&#125;</code></pre>","text":"软件构件2016 A一、选择题 \\1. 设计模式一般是用来解决什么问题的（ D ）。 A．需求获取中业务领域知识获取 B．测试用例的设计 C．编码中如何组织代码 D．同一问题的不同表象 \\2. 开闭原则的含义是一个软件实体（ A ）。 A．应该对扩展开发，对修改关闭 B．对修改开...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"考试","slug":"考试","count":4,"path":"api/categories/考试.json"}],"tags":[{"name":"考试","slug":"考试","count":4,"path":"api/tags/考试.json"},{"name":"软件构件","slug":"软件构件","count":1,"path":"api/tags/软件构件.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6%E6%9E%84%E4%BB%B6\"><span class=\"toc-text\">软件构件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2016-A\"><span class=\"toc-text\">2016 A</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2016-B\"><span class=\"toc-text\">2016 B</span></a></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"形式政策考试","uid":"f95a59a33b004968630f7b42d7d7400d","slug":"temp_形势政策","date":"2022-12-06T07:04:17.363Z","updated":"2022-12-06T07:04:13.503Z","comments":true,"path":"api/articles/temp_形势政策.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (105).webp","text":"形式政策第一讲 马克思主义中国化新的飞跃 知识点1、****习近平新时代中国特色社会主义思想是如何创立的？ 一是时代背景：“两个大局”同步交织、相互激荡。一个是中华民族伟大复兴的战略全局；一个是世界百年未有之大变局。习近平新时代中国特色社会主义思想，正是在中华民族伟大复兴进入关键...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"考试","slug":"考试","count":4,"path":"api/categories/考试.json"}],"tags":[{"name":"考试","slug":"考试","count":4,"path":"api/tags/考试.json"},{"name":"形式政策","slug":"形式政策","count":1,"path":"api/tags/形式政策.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"Linux考试","uid":"2a4416dfe7e87d0be836e5eac76b7a8f","slug":"temp_Linux","date":"2022-12-04T05:07:37.200Z","updated":"2022-12-04T05:13:40.146Z","comments":true,"path":"api/articles/temp_Linux.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (108).webp","text":"Linux1.0一、填空题1．GNU的含义是GNU’s Not Unix的递归缩写。 2．Linux一般有3个主要部分：内核（kernel）、命令解释层（Shell或其他操作环境）、实用工具。 3．**”&#x2F;etc&#x2F;sysconfig&#x2F;network”...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"10 mins."},"categories":[{"name":"考试","slug":"考试","count":4,"path":"api/categories/考试.json"}],"tags":[{"name":"考试","slug":"考试","count":4,"path":"api/tags/考试.json"},{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}