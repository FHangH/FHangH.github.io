{"title":"C++_职工管理系统","uid":"fdd7c70afe97f7b4969565b83472fc45","slug":"1_C++_职工管理系统_04","date":"2022-10-06T07:28:25.925Z","updated":"2022-10-07T12:54:03.103Z","comments":true,"path":"api/articles/1_C++_职工管理系统_04.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (4).webp","content":"<h1 id=\"C-职工管理系统\"><a href=\"#C-职工管理系统\" class=\"headerlink\" title=\"C++_职工管理系统\"></a>C++_职工管理系统</h1><h3 id=\"1-管理系统需求\"><a href=\"#1-管理系统需求\" class=\"headerlink\" title=\"1. 管理系统需求\"></a>1. 管理系统需求</h3><p>系统需求：</p>\n<ul>\n<li>职工管理系统可以用来管理公司内所有员工的信息</li>\n<li>公司职工分三类：普通员工，经理，老板；</li>\n<li>显示员工信息：显示职工编号，职工姓名，职工岗位</li>\n<li>职责：<ul>\n<li>普通员工职责：完成经理的任务</li>\n<li>经理职责：完成老板的任务</li>\n<li>老板：管理所有事务</li>\n</ul>\n</li>\n</ul>\n<p>管理系统需要的功能：</p>\n<ul>\n<li>退出管理程序：退出当前管理系统</li>\n<li>增加职工信息：实现批量添加职工功能，将信息录入到文件中，职工信息为：职工编号，姓名，部门编号</li>\n<li>显示职工信息：显示公司内部所有职工的信息</li>\n<li>删除离职职工：按照编号删除指定的职工</li>\n<li>修改职工信息：按照编号修改职工个人信息</li>\n<li>查找职工信息：按照职工的编号或者职工的姓名进行查找相关人员信息</li>\n<li>按照编号排序：按照职工编号，进行排序，排序规则由用户指定</li>\n<li>清空所有文档：清空文件中记录的所有职工信息（清空前需要确认，防止误删）</li>\n</ul>\n<h3 id=\"2-创建管理类\"><a href=\"#2-创建管理类\" class=\"headerlink\" title=\"2. 创建管理类\"></a>2. 创建管理类</h3><ul>\n<li>管理类的内容：<ul>\n<li>用户的沟通菜单界面</li>\n<li>对职工增删改查的操作</li>\n<li>与文件的读写交互</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-1-创建文件\"><a href=\"#2-1-创建文件\" class=\"headerlink\" title=\"2.1 创建文件\"></a>2.1 创建文件</h4><ul>\n<li>Clion中创建<ul>\n<li>头文件：<code>workerManager.h</code></li>\n<li>源文件：<code>workerManager.cpp</code></li>\n<li>主文件：<code>StaffManagerSystem_Main.cpp</code></li>\n<li><code>CMakeList.txt</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-2-创建管理类文件\"><a href=\"#2-2-创建管理类文件\" class=\"headerlink\" title=\"2.2 创建管理类文件\"></a>2.2 创建管理类文件</h4><ul>\n<li><p><code>CMakeList.txt</code></p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">cmake_minimum_required(VERSION 3.19)\nproject(StaffManagementSystem)\n\nset(CMAKE_CXX_STANDARD 14)\n\nadd_executable(StaffManagementSystem StaffManagerSystem_Main.cpp workerManager.h workerManager.cpp)</code></pre>\n</li>\n<li><p><code>workerManager.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_WORKERMANAGER_H\n#define STAFFMANAGEMENTSYSTEM_WORKERMANAGER_H\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass WorkerManager\n&#123;\npublic:\n    WorkerManager();\n    ~WorkerManager();\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_WORKERMANAGER_H</code></pre>\n</li>\n<li><p><code>workerManager.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n#include &quot;workerManager.h&quot;\n\nWorkerManager::WorkerManager()\n&#123;\n\n&#125;\n\nWorkerManager::~WorkerManager()\n&#123;\n\n&#125;</code></pre>\n</li>\n<li><p><code>StaffManagerSystem_Main.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &quot;workerManager.h&quot;\n\nint main()\n&#123;\n    cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl;\n    return 0;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"3-菜单功能\"><a href=\"#3-菜单功能\" class=\"headerlink\" title=\"3. 菜单功能\"></a>3. 菜单功能</h3><ul>\n<li>功能描述：与用户沟通的界面</li>\n</ul>\n<h4 id=\"3-1-添加成员函数\"><a href=\"#3-1-添加成员函数\" class=\"headerlink\" title=\"3.1 添加成员函数\"></a>3.1 添加成员函数</h4><ul>\n<li><p>在<code>workerManager.h</code>中的<code>WorkerManager</code>类中添加成员函数：<code>void Show_Menu();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_WORKERMANAGER_H\n#define STAFFMANAGEMENTSYSTEM_WORKERMANAGER_H\n#define wm workerManager\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass WorkerManager\n&#123;\npublic:\n    WorkerManager();\n    ~WorkerManager();\n\n    &#x2F;&#x2F; 显示菜单\n    void Show_Menu();\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_WORKERMANAGER_H</code></pre></li>\n</ul>\n<h4 id=\"3-2-菜单功能实现\"><a href=\"#3-2-菜单功能实现\" class=\"headerlink\" title=\"3.2 菜单功能实现\"></a>3.2 菜单功能实现</h4><ul>\n<li><p>在管理类 <code>workerManager.cpp</code> 中实现具体 <code>Show_Menu()</code> 函数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void WorkerManager::Show_Menu()\n&#123;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;员工管理系统主菜单&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;0.退出管理系统&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1.增加职工信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2.显示职工信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3.删除离职职工&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;4.修改职工信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;5.查找职工信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;6.按照编号排序&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;7.清空所有文档&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; endl;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-3-测试菜单功能\"><a href=\"#3-3-测试菜单功能\" class=\"headerlink\" title=\"3.3 测试菜单功能\"></a>3.3 测试菜单功能</h4><ul>\n<li><p>在<code>StaffManagerSystem_Main.cpp</code>中进行测试</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &quot;workerManager.h&quot;\n\nint main()\n&#123;\n    WorkerManager workerManager;\n    wm.Show_Menu();\n    return 0;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"4-退出功能\"><a href=\"#4-退出功能\" class=\"headerlink\" title=\"4. 退出功能\"></a>4. 退出功能</h3><h4 id=\"4-1-提供菜单功能接口\"><a href=\"#4-1-提供菜单功能接口\" class=\"headerlink\" title=\"4.1 提供菜单功能接口\"></a>4.1 提供菜单功能接口</h4><ul>\n<li><p>在main函数中提供分支选择，提供菜单界面每个功能的接口</p>\n</li>\n<li><p>先创建一个<code>StaffManagerSystem_Main.cpp</code>中的函数<code>showMenu()&#123;&#125;;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &quot;workerManager.h&quot;\n\nvoid showMenu()\n&#123;\n        &#x2F;&#x2F; 初始选择\n    int choice &#x3D; 0;\n\n    &#x2F;&#x2F; 生成 管理界面 对象\n    WorkerManager workerManager;\n    &#x2F;&#x2F; 调用 菜单界面\n    ReShowMenu:\n    wm.Show_Menu();\n    cout &lt;&lt; &quot;功能选择 &gt;&gt; &quot;;\n    cin &gt;&gt; choice;\n\n    &#x2F;&#x2F; 菜单界面的功能选择分支\n    switch (choice)\n    &#123;\n        case 0: &#x2F;&#x2F; 0.退出管理系统\n            wm.exitSystem();\n            break;\n        case 1: &#x2F;&#x2F; 1.增加职工信息\n            break;\n        case 2: &#x2F;&#x2F; 2.显示职工信息\n            break;\n        case 3: &#x2F;&#x2F; 3.删除离职职工\n            break;\n        case 4: &#x2F;&#x2F; 4.修改职工信息\n            break;\n        case 5: &#x2F;&#x2F; 5.查找职工信息\n            break;\n        case 6: &#x2F;&#x2F; 6.按照编号排序\n            break;\n        case 7: &#x2F;&#x2F; 7.清空所有文档\n            break;\n        default: &#x2F;&#x2F; 0 ~ 7 之外任意值，清空，重来菜单界面\n            system(&quot;cls&quot;);\n            goto ReShowMenu;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    showMenu();\n    return 0;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"4-2-实现退出功能\"><a href=\"#4-2-实现退出功能\" class=\"headerlink\" title=\"4.2 实现退出功能\"></a>4.2 实现退出功能</h4><ul>\n<li><p>在<code>workerManager.h</code>中提供退出系统的成员函数 <code>void exitSystem();</code></p>\n</li>\n<li><p>在<code>workerManager.cpp</code>中具体实现功能</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 0.退出管理系统\nvoid WorkerManager::exitSystem()\n&#123;\n    cout &lt;&lt; &quot;员工管理系统-退出&quot; &lt;&lt; endl;\n    exit(0);\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"5-创建职工类\"><a href=\"#5-创建职工类\" class=\"headerlink\" title=\"5. 创建职工类\"></a>5. 创建职工类</h3><h4 id=\"5-1-创建职工抽象类\"><a href=\"#5-1-创建职工抽象类\" class=\"headerlink\" title=\"5.1 创建职工抽象类\"></a>5.1 创建职工抽象类</h4><ul>\n<li><p>职工分类：</p>\n<ul>\n<li>普通员工</li>\n<li>经理</li>\n<li>老板</li>\n</ul>\n</li>\n<li><p>将三种职工抽象到一个类<code>Worker</code>中，利用多态管理不同职工类</p>\n</li>\n<li><p>职工的属性：</p>\n<ul>\n<li>职工编号</li>\n<li>职工姓名</li>\n<li>职工部门编号</li>\n</ul>\n</li>\n<li><p>职工行为：</p>\n<ul>\n<li>岗位职责信息描述</li>\n<li>获取岗位名称</li>\n</ul>\n</li>\n<li><p>创建头文件 <code>worker.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_WORKER_H\n#define STAFFMANAGEMENTSYSTEM_WORKER_H\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F; 职工抽象类\nclass Worker\n&#123;\npublic:\n    int worker_ID; &#x2F;&#x2F; 职工ID\n    string worker_Name; &#x2F;&#x2F; 职工姓名\n    int worker_DepartID; &#x2F;&#x2F; 职工部门编号\n\n    &#x2F;&#x2F; 获得 职工的信息\n    virtual void getWorkerInfo() &#x3D; 0;\n\n    &#x2F;&#x2F; 获得 职工部门的岗位名称\n    virtual void getWorkerDepartName() &#x3D; 0;\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_WORKER_H</code></pre></li>\n</ul>\n<h4 id=\"5-2-创建普通员工类\"><a href=\"#5-2-创建普通员工类\" class=\"headerlink\" title=\"5.2 创建普通员工类\"></a>5.2 创建普通员工类</h4><ul>\n<li><p>普通员工继承职工抽象类，并重写父类中的纯虚函数</p>\n</li>\n<li><p>在头文件和源文件的文件夹中创建<code>employee.h</code>和<code>employee.cpp</code></p>\n</li>\n<li><p><code>employee.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_EMPLOYEE_H\n#define STAFFMANAGEMENTSYSTEM_EMPLOYEE_H\n\n#include &quot;worker.h&quot;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Employee : public Worker\n&#123;\npublic:\n    &#x2F;&#x2F; 初始化 员工 构造函数\n    Employee(int w_Id, string w_Name, int w_DepartId);\n\n    &#x2F;&#x2F; 获得员工个人信息\n    void getWorkerInfo() override;\n\n    &#x2F;&#x2F; 获得员工部门岗位名称\n    void getWorkerDepartName() override;\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_EMPLOYEE_H</code></pre>\n</li>\n<li><p><code>employee.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n#include &quot;..&#x2F;Header&#x2F;employee.h&quot;\n\nEmployee::Employee(int w_Id, string w_Name, int w_DepartId)\n&#123;\n    this-&gt;worker_ID &#x3D; w_Id;\n    this-&gt;worker_Name &#x3D; w_Name;\n    this-&gt;worker_DepartID &#x3D; w_DepartId;\n&#125;\n\nvoid Employee::getWorkerInfo()\n&#123;\n    cout &lt;&lt; &quot;职工编号：&quot; &lt;&lt; this-&gt;worker_ID\n         &lt;&lt; &quot;\\t职工姓名：&quot; &lt;&lt; this-&gt;worker_Name\n         &lt;&lt; &quot;\\t岗位：&quot; &lt;&lt; this-&gt;getWorkerDepartName()\n         &lt;&lt; &quot;\\t岗位职责：完成经理的任务&quot; &lt;&lt; endl;\n&#125;\n\nstring Employee::getWorkerDepartName()\n&#123;\n    return string(&quot;普通员工&quot;);\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"5-3-创建经理类\"><a href=\"#5-3-创建经理类\" class=\"headerlink\" title=\"5.3 创建经理类\"></a>5.3 创建经理类</h4><ul>\n<li><p>经理类继承职工抽象类，并重写父类中虚函数</p>\n</li>\n<li><p>在头文件和源文件文件夹内，创建<code>manager.h</code>和<code>manager.cpp</code></p>\n</li>\n<li><p><code>manager.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_MANAGER_H\n#define STAFFMANAGEMENTSYSTEM_MANAGER_H\n\n#include &quot;worker.h&quot;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F; 经理类\nclass Manager : public Worker\n&#123;\npublic:\n    &#x2F;&#x2F; 初始化 经理 构造函数\n    Manager(int w_Id, string w_Name, int w_DepartId);\n\n    &#x2F;&#x2F; 获得经理个人信息\n    void getWorkerInfo() override;\n\n    &#x2F;&#x2F; 获得经理部门岗位名称\n    string getWorkerDepartName() override;\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_MANAGER_H</code></pre>\n</li>\n<li><p><code>manager.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#include &quot;..&#x2F;Header&#x2F;manager.h&quot;\n\n&#x2F;&#x2F; 构造函数 初始化 经理 信息\nManager::Manager(int w_Id, string w_Name, int w_DepartId)\n&#123;\n    this-&gt;worker_ID &#x3D; w_Id;\n    this-&gt;worker_Name &#x3D; w_Name;\n    this-&gt;worker_DepartID &#x3D; w_DepartId;\n&#125;\n\n&#x2F;&#x2F; 获得 职工信息\nvoid Manager::getWorkerInfo()\n&#123;\n    cout &lt;&lt; &quot;职工编号：&quot; &lt;&lt; this-&gt;worker_ID\n         &lt;&lt; &quot;\\t职工姓名：&quot; &lt;&lt; this-&gt;worker_Name\n         &lt;&lt; &quot;\\t岗位：&quot; &lt;&lt; this-&gt;getWorkerDepartName()\n         &lt;&lt; &quot;\\t岗位职责：完成老板的任务&quot; &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F; 获得 职工 岗位信息\nstring Manager::getWorkerDepartName()\n&#123;\n    return string(&quot;经理&quot;);\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"5-4-创建老板类\"><a href=\"#5-4-创建老板类\" class=\"headerlink\" title=\"5.4 创建老板类\"></a>5.4 创建老板类</h4><ul>\n<li><p>老板类继承职工抽象类，并重写父类中虚函数</p>\n</li>\n<li><p>在头文件和源文件文件夹内，创建<code>boss.h</code>和<code>boss.cpp</code></p>\n</li>\n<li><p><code>boss.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_BOSS_H\n#define STAFFMANAGEMENTSYSTEM_BOSS_H\n\n#include &quot;worker.h&quot;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F; 老板类\nclass Boss : public Worker\n&#123;\npublic:\n    &#x2F;&#x2F; 初始化 老板 构造函数\n    Boss(int w_Id, string w_Name, int w_DepartId);\n\n    &#x2F;&#x2F; 获得老板个人信息\n    void getWorkerInfo() override;\n\n    &#x2F;&#x2F; 获得老板部门岗位名称\n    string getWorkerDepartName() override;\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_BOSS_H</code></pre>\n</li>\n<li><p><code>boss.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#include &quot;..&#x2F;Header&#x2F;boss.h&quot;\n\n&#x2F;&#x2F; 构造函数 初始化 老板 信息\nBoss::Boss(int w_Id, string w_Name, int w_DepartId)\n&#123;\n    this-&gt;worker_ID &#x3D; w_Id;\n    this-&gt;worker_Name &#x3D; w_Name;\n    this-&gt;worker_DepartID &#x3D; w_DepartId;\n&#125;\n\n&#x2F;&#x2F; 获得 职工信息\nvoid Boss::getWorkerInfo()\n&#123;\n    cout &lt;&lt; &quot;职工编号：&quot; &lt;&lt; this-&gt;worker_ID\n         &lt;&lt; &quot;\\t职工姓名：&quot; &lt;&lt; this-&gt;worker_Name\n         &lt;&lt; &quot;\\t岗位：&quot; &lt;&lt; this-&gt;getWorkerDepartName()\n         &lt;&lt; &quot;\\t岗位职责：管理所有事务&quot; &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F; 获得 职工 岗位信息\nstring Boss::getWorkerDepartName()\n&#123;\n    return string(&quot;老板&quot;);\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"5-5-测试多态\"><a href=\"#5-5-测试多态\" class=\"headerlink\" title=\"5.5 测试多态\"></a>5.5 测试多态</h4><ul>\n<li><p>在<code>StaffManagerSystem_Main.cpp</code>中添加测试函数<code>void demo()&#123;&#125;;</code></p>\n</li>\n<li><p>测试代码：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &quot;..&#x2F;Header&#x2F;workerManager.h&quot;\n#include &quot;..&#x2F;Header&#x2F;worker.h&quot;\n#include &quot;..&#x2F;Header&#x2F;employee.h&quot;\n#include &quot;..&#x2F;Header&#x2F;manager.h&quot;\n#include &quot;..&#x2F;Header&#x2F;boss.h&quot;\n\nvoid demo()\n&#123;\n    Worker *worker &#x3D; nullptr;\n    \n    worker &#x3D; new Employee(1, &quot;Normal_A&quot;, 1);\n    worker-&gt;getWorkerInfo();\n    \n    worker &#x3D; new Manager(2, &quot;Manager_A&quot;, 2);\n    worker-&gt;getWorkerInfo();\n    \n    worker &#x3D; new Boss(3, &quot;Boss_A&quot;, 3);\n    worker-&gt;getWorkerInfo();\n&#125;\n\nint main()\n&#123;\n    demo();\n    return 0;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"6-添加职工\"><a href=\"#6-添加职工\" class=\"headerlink\" title=\"6. 添加职工\"></a>6. 添加职工</h3><ul>\n<li>功能描述：批次添加职工，并保存到文件中</li>\n</ul>\n<h4 id=\"6-1-功能分析\"><a href=\"#6-1-功能分析\" class=\"headerlink\" title=\"6.1 功能分析\"></a>6.1 功能分析</h4><ul>\n<li>分析：<ol>\n<li>用户在批量创建时，可能创建不同种类的职工</li>\n<li>如果想将所有不同种类的职工都放在一个数组中，可以将所有员工的指针维护到一个数租里</li>\n<li>如果想在程序中维护这个不定长度的数组，可以将数组创建到堆区，并利用<code>Worker **</code>维护</li>\n</ol>\n</li>\n<li>堆区开辟以<code>Worker</code>类型的数组：<code>Worker ** = new Worker*[];</code></li>\n</ul>\n<h4 id=\"6-2-功能实现\"><a href=\"#6-2-功能实现\" class=\"headerlink\" title=\"6.2 功能实现\"></a>6.2 功能实现</h4><ul>\n<li><p>在<code>WorkerManager.h</code>添加成员属性</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 记录文件中的人数\nint worker_EmpNum;\n\n    &#x2F;&#x2F; 员工数组指针\n    Worker ** worker_EmpArray;</code></pre>\n\n\n</li>\n<li><p>在<code>WorkerManager.cpp</code>中构造函数初始化属性</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">WorkerManager::WorkerManager()\n&#123;\n    &#x2F;&#x2F; 初始化人数\n    this-&gt;worker_EmpNum &#x3D; 0;\n\n    &#x2F;&#x2F; 初始化数组指针\n    this-&gt;worker_EmpArray &#x3D; nullptr;\n&#125;</code></pre>\n\n\n</li>\n<li><p>在<code>WorkerManager.h</code>添加成员函数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 1.增加职工信息\n void addEmployee();</code></pre>\n\n\n</li>\n<li><p>在<code>WorkerManager.cpp</code>中实现<code>void addEmployee()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 1.增加职工信息\nvoid WorkerManager::addEmployee()\n&#123;\n    cout &lt;&lt; &quot;输入增加职工数量：&gt;&gt;&quot;;\n    int addNum &#x3D; 0;\n    cin &gt;&gt; addNum;\n\n    if (addNum &gt; 0)\n    &#123;\n        &#x2F;&#x2F; 计算需要的空间大小 &#x3D; 已用的空间 + 新需要的空间\n        int newSize &#x3D; this-&gt;worker_EmpNum + addNum;\n\n        &#x2F;&#x2F; 在 堆区中开辟 计算好大小的内存空间\n        Worker **newSpace &#x3D; new Worker *[newSize];\n\n        &#x2F;&#x2F; 将已有空间的内容存在新的内村空间中\n        if (this-&gt;worker_EmpArray !&#x3D; nullptr)\n        &#123;\n            for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n            &#123;\n                newSpace[i] &#x3D; this-&gt;worker_EmpArray[i];\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F; 再将 需要添加的新内容加入\n        for (int j &#x3D; 0; j &lt; addNum; j++)\n        &#123;\n            int worker_ID; &#x2F;&#x2F; 职工ID\n            string worker_Name; &#x2F;&#x2F; 职工姓名\n            int worker_DepartID; &#x2F;&#x2F; 职工部门编号\n\n            cout &lt;&lt; &quot;输入第&quot; &lt;&lt; j + 1 &lt;&lt; &quot;位员工信息:&quot; &lt;&lt; endl;\n            cout &lt;&lt; &quot;职工编号&gt;&gt;&quot;;\n            cin &gt;&gt; worker_ID;\n\n            cout &lt;&lt; &quot;职工姓名&gt;&gt;&quot;;\n            cin &gt;&gt; worker_Name;\n\n            cout &lt;&lt; &quot;职工岗位_ 1.员工_2.经理_3.老板&gt;&gt;&quot;;\n            cin &gt;&gt; worker_DepartID;\n\n            Worker *worker &#x3D; nullptr;\n\n            switch (worker_DepartID)\n            &#123;\n                case 1:\n                    worker &#x3D; new Employee(worker_ID, worker_Name, 1);\n                    break;\n                case 2:\n                    worker &#x3D; new Manager(worker_ID, worker_Name, 2);\n                    break;\n                case 3:\n                    worker &#x3D; new Boss(worker_ID, worker_Name, 3);\n                    break;\n                default:\n                    break;\n            &#125;\n\n            newSpace[this-&gt;worker_EmpNum + j] &#x3D; worker;\n        &#125;\n        &#x2F;&#x2F; 释放原本的空间\n        delete[] this-&gt;worker_EmpArray;\n\n        &#x2F;&#x2F; 更改新空间的指向\n        this-&gt;worker_EmpArray &#x3D; newSpace;\n\n        &#x2F;&#x2F; 更新 新的个数\n        this-&gt;worker_EmpNum &#x3D; newSize;\n\n        &#x2F;&#x2F; 提示信息\n        cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;\n    &#125;\n    else\n    &#123;\n        cout &lt;&lt; &quot;需输入正确的数字&quot; &lt;&lt; endl;\n    &#125;\n\n    system(&quot;cls&quot;);\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"6-3-测试添加\"><a href=\"#6-3-测试添加\" class=\"headerlink\" title=\"6.3 测试添加\"></a>6.3 测试添加</h4><ul>\n<li><p>部分修改：</p>\n<ol>\n<li><p><code>workerManager.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &quot;worker.h&quot;\n#include &quot;employee.h&quot;\n#include &quot;manager.h&quot;\n#include &quot;boss.h&quot;</code></pre>\n</li>\n<li><p><code>StaffManagerSystem_Main.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &quot;..&#x2F;Header&#x2F;workerManager.h&quot;\n\nvoid showMenu()\n&#123;\n    &#x2F;&#x2F; 初始选择\n    int choice &#x3D; 0;\n\n    &#x2F;&#x2F; 生成 管理界面 对象\n    WorkerManager workerManager;\n\n    &#x2F;&#x2F; 调用 菜单界面\n    while (true)\n    &#123;\n        wm.Show_Menu();\n        cout &lt;&lt; &quot;功能选择 &gt;&gt; &quot;;\n        cin &gt;&gt; choice;\n\n        &#x2F;&#x2F; 菜单界面的功能选择分支\n        switch (choice)\n        &#123;\n            case 0: &#x2F;&#x2F; 0.退出管理系统\n                wm.exitSystem();\n                break;\n            case 1: &#x2F;&#x2F; 1.增加职工信息\n                wm.addEmployee();\n                break;\n            case 2: &#x2F;&#x2F; 2.显示职工信息\n                break;\n            case 3: &#x2F;&#x2F; 3.删除离职职工\n                break;\n            case 4: &#x2F;&#x2F; 4.修改职工信息\n                break;\n            case 5: &#x2F;&#x2F; 5.查找职工信息\n                break;\n            case 6: &#x2F;&#x2F; 6.按照编号排序\n                break;\n            case 7: &#x2F;&#x2F; 7.清空所有文档\n                break;\n            default: &#x2F;&#x2F; 0 ~ 7 之外任意值，清空，重来菜单界面\n                system(&quot;cls&quot;);\n                break;\n        &#125;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    showMenu();\n    return 0;\n&#125;</code></pre>\n</li>\n<li><p><code>workerManager.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">WorkerManager::~WorkerManager()\n&#123;\n    if (this-&gt;worker_EmpArray !&#x3D; nullptr)\n    &#123;\n        delete[] this-&gt;worker_EmpArray;\n        this-&gt;worker_EmpArray &#x3D; nullptr;\n    &#125;\n&#125;</code></pre></li>\n</ol>\n</li>\n</ul>\n<h4 id=\"6-4-补充：职工ID唯一性\"><a href=\"#6-4-补充：职工ID唯一性\" class=\"headerlink\" title=\"6.4 补充：职工ID唯一性\"></a>6.4 补充：职工ID唯一性</h4><ul>\n<li><p>确保职工文件内，每个职工的<code>worker_ID</code>是唯一的</p>\n</li>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>bool isEmployeeIDExist(int workerID);</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 排查添加的新职工的编号在文件中是否存在\nbool isEmployeeIDExist(int workerID);</code></pre>\n</li>\n<li><p>在<code>workerManager.cpp</code>中实现成员函数<code>bool isEmployeeIDExist(int workerID)&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 排查添加的新职工的编号在文件中是否存在\nbool WorkerManager::isEmployeeIDExist(int workerID)\n&#123;\n    bool isIDExist &#x3D; true;\n    for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n    &#123;\n        if (this-&gt;worker_EmpArray[i]-&gt;worker_ID &#x3D;&#x3D; workerID)\n        &#123;\n            isIDExist &#x3D; true;\n            break;\n        &#125;\n        else\n        &#123;\n            isIDExist &#x3D; false;\n        &#125;\n    &#125;\n    return isIDExist;\n&#125;</code></pre>\n</li>\n<li><p>修改<code>workerManager.cpp</code>中的成员函数<code>void addEmployee()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 1.增加职工信息\nvoid WorkerManager::addEmployee()\n&#123;\n    cout &lt;&lt; &quot;&lt;-- 已录入职工数量：&quot; &lt;&lt; worker_EmpNum &lt;&lt; &quot; --&gt;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;输入增加职工数量：&gt;&gt; &quot;;\n    int addNum &#x3D; 0;\n    cin &gt;&gt; addNum;\n\n    if (addNum &gt; 0)\n    &#123;\n        &#x2F;&#x2F; 计算需要的空间大小 &#x3D; 已用的空间 + 新需要的空间\n        int newSize &#x3D; this-&gt;worker_EmpNum + addNum;\n\n        &#x2F;&#x2F; 在 堆区中开辟 计算好大小的内存空间\n        Worker **newSpace &#x3D; new Worker *[newSize];\n\n        &#x2F;&#x2F; 将已有空间的内容存在新的内村空间中\n        if (this-&gt;worker_EmpArray !&#x3D; nullptr)\n        &#123;\n            for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n            &#123;\n                newSpace[i] &#x3D; this-&gt;worker_EmpArray[i];\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F; 再将 需要添加的新内容加入\n        for (int j &#x3D; 0; j &lt; addNum; j++)\n        &#123;\n            int worker_ID; &#x2F;&#x2F; 职工ID\n            string worker_Name; &#x2F;&#x2F; 职工姓名\n            int worker_DepartID; &#x2F;&#x2F; 职工部门编号\n            bool isExistID &#x3D; true; &#x2F;&#x2F; 新增的变量，用于判断文件中是否已存在某个ID\n\n            &#x2F;&#x2F; 在输入职工ID的地方，进行了修改\n            &#x2F;&#x2F; 每次输入ID，都要判断一次，输入的ID在职工文件中是否已经存在\n            &#x2F;&#x2F; 存在就继续循环该语句，不存在再继续执行\n            while (true)\n            &#123;\n                cout &lt;&lt; &quot;输入第&quot; &lt;&lt; j + 1 &lt;&lt; &quot;位员工信息:&quot; &lt;&lt; endl;\n                cout &lt;&lt; &quot;职工编号&gt;&gt; &quot;;\n                cin &gt;&gt; worker_ID;\n                isExistID &#x3D; isEmployeeIDExist(worker_ID);\n\n                if (isExistID)\n                &#123;\n                    cout &lt;&lt; &quot;编号已经存在&quot; &lt;&lt; endl;\n                    system(&quot;pause&quot;);\n                    system(&quot;cls&quot;);\n                &#125;\n                else\n                &#123;\n                    break;\n                &#125;\n            &#125;\n\n            cout &lt;&lt; &quot;职工姓名&gt;&gt; &quot;;\n            cin &gt;&gt; worker_Name;\n\n            cout &lt;&lt; &quot;职工岗位_ 1.员工_2.经理_3.老板&gt;&gt; &quot;;\n            cin &gt;&gt; worker_DepartID;\n            cout &lt;&lt; endl;\n\n            Worker *worker &#x3D; nullptr;\n\n            switch (worker_DepartID)\n            &#123;\n                case 1:\n                    worker &#x3D; new Employee(worker_ID, worker_Name, 1);\n                    break;\n                case 2:\n                    worker &#x3D; new Manager(worker_ID, worker_Name, 2);\n                    break;\n                case 3:\n                    worker &#x3D; new Boss(worker_ID, worker_Name, 3);\n                    break;\n                default:\n                    break;\n            &#125;\n\n            newSpace[this-&gt;worker_EmpNum + j] &#x3D; worker;\n        &#125;\n        &#x2F;&#x2F; 释放原本的空间\n        delete[] this-&gt;worker_EmpArray;\n\n        &#x2F;&#x2F; 更改新空间的指向\n        this-&gt;worker_EmpArray &#x3D; newSpace;\n\n        &#x2F;&#x2F; 更新 新的个数\n        this-&gt;worker_EmpNum &#x3D; newSize;\n\n        &#x2F;&#x2F; 更新 文件不在为假\n        this-&gt;isFileEmpty &#x3D; false;\n\n        &#x2F;&#x2F; 提示信息\n        cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;\n\n        &#x2F;&#x2F; 保存录入的职工信息到文本文件中\n        this-&gt;saveNewToFile();\n    &#125;\n    else\n    &#123;\n        cout &lt;&lt; &quot;需输入正确的数字&quot; &lt;&lt; endl;\n    &#125;\n    system(&quot;pause&quot;);\n    system(&quot;cls&quot;);\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"7-文件交互\"><a href=\"#7-文件交互\" class=\"headerlink\" title=\"7. 文件交互\"></a>7. 文件交互</h3><h4 id=\"7-1-写文件\"><a href=\"#7-1-写文件\" class=\"headerlink\" title=\"7.1 写文件\"></a>7.1 写文件</h4><ul>\n<li>功能描述：对文件进行读写<ul>\n<li>在上一个添加功能中，只完成了将数据添加到内存中，程序结束数据将被回收</li>\n<li>需求给项目的文件管理类添加一个文件交互功能，将数据保存到文本中，进行写操作</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"7-1-1-设定文件路径\"><a href=\"#7-1-1-设定文件路径\" class=\"headerlink\" title=\"7.1.1 设定文件路径\"></a>7.1.1 设定文件路径</h5><ul>\n<li><p>首先是设定文件路径</p>\n</li>\n<li><p>路径的选择最好是项目内，采用相对路径，在项目目录下创建文件夹 <code>File</code></p>\n</li>\n<li><p>在<code>workerManager.h</code>中添加宏常量，并包含头文件<code>fstream.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#define WORKER_FILENAME &quot;..&#x2F;File&#x2F;workerFile.txt&quot;\n#include &lt;fstream&gt;</code></pre></li>\n</ul>\n<h5 id=\"7-1-2-成员函数声明\"><a href=\"#7-1-2-成员函数声明\" class=\"headerlink\" title=\"7.1.2 成员函数声明\"></a>7.1.2 成员函数声明</h5><ul>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>void saveNewToFile();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 保持录入职工的信息到文件\nvoid saveNewToFile();</code></pre></li>\n</ul>\n<h5 id=\"7-1-3-保存文件实现\"><a href=\"#7-1-3-保存文件实现\" class=\"headerlink\" title=\"7.1.3 保存文件实现\"></a>7.1.3 保存文件实现</h5><p><code>workerManager.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 保持录入职工的信息到文件\nvoid WorkerManager::saveNewToFile()\n&#123;\n    ofstream ofs;\n    ofs.open(WORKER_FILENAME, ios::out);\n\n    for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n    &#123;\n        ofs &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_ID &lt;&lt; &quot; &quot;\n            &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_Name &lt;&lt; &quot; &quot;\n            &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_DepartID &lt;&lt; endl;\n    &#125;\n\n    ofs.close();\n&#125;</code></pre>\n\n\n\n\n\n<h5 id=\"7-1-4-保存文件测速\"><a href=\"#7-1-4-保存文件测速\" class=\"headerlink\" title=\"7.1.4 保存文件测速\"></a>7.1.4 保存文件测速</h5><ul>\n<li><p>在<code>workerManager.cpp</code>实现的添加职工功能打印成功后面，添加保存文件的函数<code>void saveNewToFile();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\"> &#x2F;&#x2F; 提示信息\ncout &lt;&lt; &quot;添加成功&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;\n\n&#x2F; 保存录入的职工信息到文本文件中\n this-&gt;saveNewToFile();</code></pre></li>\n</ul>\n<h4 id=\"7-2-读文件\"><a href=\"#7-2-读文件\" class=\"headerlink\" title=\"7.2 读文件\"></a>7.2 读文件</h4><ul>\n<li><p>功能描述：将文件中的内容读取到程序中</p>\n</li>\n<li><p>上一个功能完成了在程序中将堆中的数据保存到文本文件中，但还需要一个程序启动时，读取文本文件数据到堆中的功能</p>\n</li>\n<li><p>同时需要完成清空文本文件的功能</p>\n</li>\n<li><p>构造函数初始化数据的情况分三种：</p>\n<ol>\n<li>第一次使用，文件未创建</li>\n<li>文件存在，数据被清空</li>\n<li>文件存在，数据也存在</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"7-2-1-文件未创建\"><a href=\"#7-2-1-文件未创建\" class=\"headerlink\" title=\"7.2.1 文件未创建\"></a>7.2.1 文件未创建</h5><ul>\n<li><p>在<code>workerManager.h</code>中添加成员变量，<code>bool isFileEmpty;</code> 来标记文件是否为空</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 判断文件是否为空\nbool isFileEmpty;</code></pre>\n\n\n\n</li>\n<li><p>修改<code>workerManager.cpp</code>中的构造函数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">WorkerManager::WorkerManager()\n&#123;\n    &#x2F;&#x2F; 初始化 读文件对象\n    ifstream ifs;\n    ifs.open(WORKER_FILENAME, ios::in);\n\n    &#x2F;&#x2F; 文件不存在的情况\n    if (!ifs.is_open())\n    &#123;\n        cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;\n        this-&gt;worker_EmpNum &#x3D; 0;\n        this-&gt;worker_EmpArray &#x3D; nullptr;\n        &#x2F;&#x2F; 初始化 文件 是空\n        this-&gt;isFileEmpty &#x3D; true;\n        ifs.close();\n        return;\n    &#125;\n    \n    &#x2F;&#x2F; 初始化人数\n    this-&gt;worker_EmpNum &#x3D; 0;\n\n    &#x2F;&#x2F; 初始化数组指针\n    this-&gt;worker_EmpArray &#x3D; nullptr;\n\n    &#x2F;&#x2F; 判断文件是否为空\n    this-&gt;isFileEmpty &#x3D; false;\n&#125;</code></pre>\n</li>\n<li><p>确保项目中，没有<code>workerFile.txt</code>文件存在，运行时，可以看到打印结果，同时完成初始化</p>\n</li>\n</ul>\n<h5 id=\"7-2-2-文件存在且数据为空\"><a href=\"#7-2-2-文件存在且数据为空\" class=\"headerlink\" title=\"7.2.2 文件存在且数据为空\"></a>7.2.2 文件存在且数据为空</h5><ul>\n<li><p><code>workerManager.cpp</code>中，在构造函数中加入代码</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">WorkerManager::WorkerManager()\n&#123;\n    &#x2F;&#x2F; 初始化 读文件对象\n    ifstream ifs;\n    ifs.open(WORKER_FILENAME, ios::in);\n\n    &#x2F;&#x2F; 文件不存在的情况\n    if (!ifs.is_open())\n    &#123;\n        cout &lt;&lt; &quot;&lt;-- 提示：职工文件不存在 --&gt;&quot; &lt;&lt; endl;\n        this-&gt;worker_EmpNum &#x3D; 0;\n        this-&gt;worker_EmpArray &#x3D; nullptr;\n        &#x2F;&#x2F; 初始化 文件 是空\n        this-&gt;isFileEmpty &#x3D; true;\n        ifs.close();\n        return;\n    &#125;\n\n    &#x2F;&#x2F; 文件存在 数据为空\n    string str;\n    ifs &gt;&gt; str;\n    if (ifs.eof())\n    &#123;\n        cout &lt;&lt; &quot;&lt;-- 提示：职工文件为空 --&gt;&quot; &lt;&lt; endl;\n        this-&gt;worker_EmpNum &#x3D; 0;\n        this-&gt;worker_EmpArray &#x3D; nullptr;\n        this-&gt;isFileEmpty &#x3D; true;\n        ifs.close();\n        return;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>同时，在文件存在时，文件判空变量<code>isFileEmpty</code>需要修改为<code>false</code>；</p>\n</li>\n<li><p>在<code>workerManager.cpp</code>中的<code>void WorkerManager::addEmployee()</code>中，进行更改</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 更改新空间的指向\nthis-&gt;worker_EmpArray &#x3D; newSpace;\n\n&#x2F;&#x2F; 更新 新的个数\nthis-&gt;worker_EmpNum &#x3D; newSize;\n\n&#x2F;&#x2F; 更新 文件不在为空\nthis-&gt;isFileEmpty &#x3D; false;\n\n&#x2F;&#x2F; 提示信息\ncout &lt;&lt; &quot;添加成功&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;</code></pre>\n</li>\n<li><p>此时先创建项目文件，可以手动在<code>File</code>文件夹内直接新建<code>workerFile.txt</code>；</p>\n</li>\n<li><p>也可以先运行项目，添加职工信息后，手动删除文件内的内容，再进行测速上面的代码</p>\n</li>\n</ul>\n<h5 id=\"7-2-3-文件存在且有数据\"><a href=\"#7-2-3-文件存在且有数据\" class=\"headerlink\" title=\"7.2.3 文件存在且有数据\"></a>7.2.3 文件存在且有数据</h5><h6 id=\"7-2-3-1-获取记录的职工人数\"><a href=\"#7-2-3-1-获取记录的职工人数\" class=\"headerlink\" title=\"7.2.3.1 获取记录的职工人数\"></a>7.2.3.1 获取记录的职工人数</h6><ul>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>int getEmpNum();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 获得记录职工人数\nint getEmpNum();</code></pre>\n</li>\n<li><p>在<code>workerMananger.cpp</code>中实现功能</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 获得记录职工人数\nint WorkerManager::getEmpNum()\n&#123;\n    ifstream ifs;\n    ifs.open(WORKER_FILENAME, ios::in);\n\n    &#x2F;&#x2F; 存入 读到的数据\n    int worker_ID;\n    string worker_Name;\n    int worker_DepartID;\n    &#x2F;&#x2F; 初始化 记录人数\n    int empNum &#x3D; 0;\n\n    &#x2F;&#x2F; 当 读文件操作对象 返回为真\n    while (ifs &gt;&gt; worker_ID &amp;&amp; ifs &gt;&gt; worker_Name &amp;&amp; ifs &gt;&gt; worker_DepartID)\n    &#123;\n        &#x2F;&#x2F; 记录人数 +1\n        empNum++;\n    &#125;\n    ifs.close();\n    \n    return empNum;\n&#125;</code></pre>\n</li>\n<li><p>在<code>workerManager.cpp</code>的构造函数中继续添加测试代码</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 文件存在 有数据\n&#x2F;&#x2F; 获得文件已记录人数\nint empNum &#x3D; this-&gt;getEmpNum();\n&#x2F;&#x2F; 更新 记录人数\nthis-&gt;worker_EmpNum &#x3D; empNum;\ncout &lt;&lt; &quot;&lt;-- 职工数量: &quot; &lt;&lt; empNum &lt;&lt; &quot; --&gt;&quot; &lt;&lt; endl;</code></pre>\n</li>\n<li><p>此时可以运行项目，添加数个职工信息后，再重新启动项目，即可看到测试数据</p>\n</li>\n</ul>\n<h6 id=\"7-2-3-2-初始化职工信息数组\"><a href=\"#7-2-3-2-初始化职工信息数组\" class=\"headerlink\" title=\"7.2.3.2 初始化职工信息数组\"></a>7.2.3.2 初始化职工信息数组</h6><ul>\n<li><p>根据职工的数据以及职工数据，初始化<code>workerManager.h</code>中的<code>Worker ** worker_EmpArray;</code>指针</p>\n</li>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>void initEmployee();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\"> &#x2F;&#x2F; 初始化职工\nvoid initEmployee();</code></pre>\n</li>\n<li><p>在<code>workerManager.cpp</code>中实现<code>void initEmployee()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 初始化职工\nvoid WorkerManager::initEmployee()\n&#123;\n    ifstream ifs;\n    ifs.open(WORKER_FILENAME, ios::in);\n\n    &#x2F;&#x2F; 存入 读到的数据\n    int worker_ID;\n    string worker_Name;\n    int worker_DepartID;\n    &#x2F;&#x2F; 初始化 记录人数\n    int index &#x3D; 0;\n\n    &#x2F;&#x2F; 当 读文件操作对象 返回为真\n    while (ifs &gt;&gt; worker_ID &amp;&amp; ifs &gt;&gt; worker_Name &amp;&amp; ifs &gt;&gt; worker_DepartID)\n    &#123;\n        Worker *worker &#x3D; nullptr;\n\n        &#x2F;&#x2F; 根据 DepartID，创建不同职工对象\n        if (worker_DepartID &#x3D;&#x3D; 1)\n        &#123;\n            worker &#x3D; new Employee(worker_ID, worker_Name, worker_DepartID);\n        &#125;\n        else if (worker_DepartID &#x3D;&#x3D; 2)\n        &#123;\n            worker &#x3D; new Manager(worker_ID, worker_Name, worker_DepartID);\n        &#125;\n        else\n        &#123;\n            worker &#x3D; new Boss(worker_ID, worker_Name, worker_DepartID);\n        &#125;\n        &#x2F;&#x2F; 生成职工对象后，存入职工数组中\n        this-&gt;worker_EmpArray[index] &#x3D; worker;\n        index++;\n    &#125;\n    ifs.close();\n&#125;</code></pre>\n</li>\n<li><p>在<code>workerManager.cpp</code>的构造函数中继续添加代码</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 根据职工数量创建数组\nthis-&gt;worker_EmpArray &#x3D; new Worker *[this-&gt;worker_EmpNum];\nthis-&gt;initEmployee();\n&#x2F;&#x2F; 测试代码\nfor (int i &#x3D; 0; i &lt;worker_EmpNum; i++)\n&#123;\n\tcout &lt;&lt; &quot;&lt;-- 职工编号：&quot; &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_ID\n\t\t&lt;&lt; &quot;职工姓名：&quot; &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_Name\n\t\t&lt;&lt; &quot;职工部门：&quot; &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_DepartID\n\t\t&lt;&lt; &quot; --&gt;&quot; &lt;&lt; endl;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"8-显示职工\"><a href=\"#8-显示职工\" class=\"headerlink\" title=\"8. 显示职工\"></a>8. 显示职工</h3><ul>\n<li>功能描述：显示已录入职工文件内所有的职工信息</li>\n</ul>\n<h4 id=\"8-1-显示职工函数声明\"><a href=\"#8-1-显示职工函数声明\" class=\"headerlink\" title=\"8.1 显示职工函数声明\"></a>8.1 显示职工函数声明</h4><ul>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>void showEmployeeInfo();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 2.显示职工信息\nvoid showEmployeeInfo();</code></pre></li>\n</ul>\n<h4 id=\"8-2-显示职工函数实现\"><a href=\"#8-2-显示职工函数实现\" class=\"headerlink\" title=\"8.2 显示职工函数实现\"></a>8.2 显示职工函数实现</h4><ul>\n<li><p>在<code>workerManager.cpp</code>中实现函数<code>void showEmployeeInfo()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 2.显示职工信息\nvoid WorkerManager::showEmployeeInfo()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n    &#125;\n    else\n    &#123;\n        for (int i &#x3D; 0; i &lt; worker_EmpNum; i++)\n        &#123;\n            &#x2F;&#x2F; 利用多态调用接口\n            this-&gt;worker_EmpArray[i]-&gt;getWorkerInfo();\n        &#125;\n    &#125;\n    system(&quot;cls&quot;);\n&#125;</code></pre>\n</li>\n<li><p>在<code>StaffManagerSystem_Main.cpp</code>中的<code>void showMenu()&#123;&#125;</code>中补充调用<code>showEmployeeInfo()</code>的代码</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">case 2: &#x2F;&#x2F; 2.显示职工信息\n    wm.showEmployeeInfo();\n    break;</code></pre></li>\n</ul>\n<h3 id=\"9-删除职工\"><a href=\"#9-删除职工\" class=\"headerlink\" title=\"9. 删除职工\"></a>9. 删除职工</h3><ul>\n<li>功能描述：按照职工的编号进行删除职工操作</li>\n</ul>\n<h4 id=\"9-1-职工是否存在函数声明\"><a href=\"#9-1-职工是否存在函数声明\" class=\"headerlink\" title=\"9.1 职工是否存在函数声明\"></a>9.1 职工是否存在函数声明</h4><ul>\n<li><p>删除，修改，查找职工功能都需要先检查文件中是否存在职工</p>\n</li>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>int IsEmployeeExist(int workerID);</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 职工是否存在\nint isEmployeeExist(int workerID);</code></pre></li>\n</ul>\n<h4 id=\"9-2-职工是否存在函数实现\"><a href=\"#9-2-职工是否存在函数实现\" class=\"headerlink\" title=\"9.2 职工是否存在函数实现\"></a>9.2 职工是否存在函数实现</h4><ul>\n<li><p>在<code>workerManager.cpp</code>中实现成员函数<code>int isEmployeeExist()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 职工是否存在\nint WorkerManager::isEmployeeExist(int workerID)\n&#123;\n    &#x2F;&#x2F; 默认index为职工的编号，-1是不存在\n    int index &#x3D; -1;\n    for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n    &#123;\n        if (this-&gt;worker_EmpArray[i]-&gt;worker_ID &#x3D;&#x3D; workerID)\n        &#123;\n            index &#x3D; i;\n            break;\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 返回 -1 表示不存在这个职工，其他表示找到了对应职工的ID编号\n    return index;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"9-3-删除职工函数声明\"><a href=\"#9-3-删除职工函数声明\" class=\"headerlink\" title=\"9.3 删除职工函数声明\"></a>9.3 删除职工函数声明</h4><ul>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>void deletEmployee();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 3.删除离职职工\nvoid deletEmployee();</code></pre></li>\n</ul>\n<h4 id=\"9-4-删除职工函数实现\"><a href=\"#9-4-删除职工函数实现\" class=\"headerlink\" title=\"9.4 删除职工函数实现\"></a>9.4 删除职工函数实现</h4><ul>\n<li><p>在<code>workerManager.cpp</code>中实现成员函数<code>void deletEmployee()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 3.删除离职职工\nvoid WorkerManager::deletEmployee()\n&#123;\n    &#x2F;&#x2F; 先判断是否存在职工文件\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n    &#125;\n    else\n    &#123;\n        int workerID &#x3D; 0;\n        cout &lt;&lt; &quot;输入需要删除的职工编号&gt;&gt; &quot;;\n        cin &gt;&gt; workerID;\n\n        &#x2F;&#x2F; 通过isEmployeeExit()，确定并返回一个存在且有效的职工编号\n        int workerIndex &#x3D; isEmployeeExist(workerID);\n        if (workerIndex !&#x3D; -1)\n        &#123;\n            &#x2F;&#x2F; 删掉指定数据后，数组数据需要数据前移\n            for (int i &#x3D; workerIndex; i &lt; this-&gt;worker_EmpNum -1; i++)\n            &#123;\n                this-&gt;worker_EmpArray[i] &#x3D; this-&gt;worker_EmpArray[i + 1];\n            &#125;\n            &#x2F;&#x2F; 没移动一个数据，数组后面需要移动的数据就少一个\n            this-&gt;worker_EmpNum--;\n            &#x2F;&#x2F; 修改数据后，将更新的数据保存到文件中\n            this-&gt;saveNewToFile();\n            cout &lt;&lt; &quot;编号:&quot; &lt;&lt; workerIndex + 1 &lt;&lt; &quot; 职工已删除&quot; &lt;&lt; endl;\n        &#125;\n        else\n        &#123;\n            cout &lt;&lt; &quot;删除失败，职工编号错误&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n    system(&quot;cls&quot;);\n&#125;</code></pre>\n\n\n</li>\n<li><p>在<code>StaffManagerSystem_Main.cpp</code>中添加删除职工的接口</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">case 3: &#x2F;&#x2F; 3.删除离职职工\n    wm.deletEmployee();\n    break;</code></pre></li>\n</ul>\n<h3 id=\"10-修改职工\"><a href=\"#10-修改职工\" class=\"headerlink\" title=\"10. 修改职工\"></a>10. 修改职工</h3><ul>\n<li>功能描述：输入职工编号，删除文件中对应的职工信息</li>\n</ul>\n<h4 id=\"10-1-修改职工函数声明\"><a href=\"#10-1-修改职工函数声明\" class=\"headerlink\" title=\"10.1 修改职工函数声明\"></a>10.1 修改职工函数声明</h4><ul>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>void modifyEmployeeInfo();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 4.修改职工信息\nvoid modifyEmployeeInfo();</code></pre></li>\n</ul>\n<h4 id=\"10-2-修改职工函数实现\"><a href=\"#10-2-修改职工函数实现\" class=\"headerlink\" title=\"10.2 修改职工函数实现\"></a>10.2 修改职工函数实现</h4><ul>\n<li><p>在<code>workerManager.cpp</code>中实现成员函数<code>void modifyEmployeeInfo()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 4.修改职工信息\nvoid WorkerManager::modifyEmployeeInfo()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n    &#125;\n    else\n    &#123;\n        int workerID &#x3D; 0;\n        cout &lt;&lt; &quot;输入需要修改的职工编号&gt;&gt; &quot;;\n        cin &gt;&gt; workerID;\n\n        &#x2F;&#x2F; 通过isEmployeeExit()，确定并返回一个存在且有效的职工编号\n        int workerIndex &#x3D; isEmployeeExit(workerID);\n        if (workerIndex !&#x3D; -1)\n        &#123;\n            &#x2F;&#x2F; 找到存在且有效的职工编号后，删除数组中对应的信息\n            delete this-&gt;worker_EmpArray[workerIndex];\n\n            int newWorker_ID; &#x2F;&#x2F; 职工ID\n            string newWorker_Name; &#x2F;&#x2F; 职工姓名\n            int newWorker_DepartID; &#x2F;&#x2F; 职工部门编号\n\n            cout &lt;&lt; &quot;查的编号:&quot; &lt;&lt; workerID &lt;&lt; &quot; 的职工&quot; &lt;&lt; endl;\n            cout &lt;&lt; &quot;新的职工编号&gt;&gt; &quot;;\n            cin &gt;&gt; newWorker_ID;\n\n            cout &lt;&lt; &quot;新的职工姓名&gt;&gt; &quot;;\n            cin &gt;&gt; newWorker_Name;\n\n            cout &lt;&lt; &quot;新的职工岗位_ 1.员工_2.经理_3.老板&gt;&gt; &quot;;\n            cin &gt;&gt; newWorker_DepartID;\n            cout &lt;&lt; endl;\n\n            Worker *worker &#x3D; nullptr;\n\n            switch (newWorker_DepartID)\n            &#123;\n                case 1:\n                    worker &#x3D; new Employee(newWorker_ID, newWorker_Name, 1);\n                    break;\n                case 2:\n                    worker &#x3D; new Manager(newWorker_ID, newWorker_Name, 2);\n                    break;\n                case 3:\n                    worker &#x3D; new Boss(newWorker_ID, newWorker_Name, 3);\n                    break;\n                default:\n                    break;\n            &#125;\n\n            &#x2F;&#x2F; 更新数据到数组中对应的编号\n            this-&gt;worker_EmpArray[workerIndex] &#x3D; worker;\n\n            cout &lt;&lt; &quot;新编号:&quot; &lt;&lt; newWorker_ID &lt;&lt; &quot; 职工的信息，修改完成&quot;\n                 &lt;&lt; &quot; 新部门编号:&quot; &lt;&lt; this-&gt;worker_EmpArray[workerIndex]-&gt;worker_DepartID &lt;&lt; endl;\n        &#125;\n        else\n        &#123;\n            cout &lt;&lt; &quot;修改失败，职工编号错误或不存在&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n    system(&quot;cls&quot;);\n&#125;</code></pre>\n</li>\n<li><p>在<code>StaffManagerSystem_Main.cpp</code>中添加修改职工的接口</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">case 4: &#x2F;&#x2F; 4.修改职工信息\n    wm.modifyEmployeeInfo();\n    break;</code></pre></li>\n</ul>\n<h3 id=\"11-查找职工\"><a href=\"#11-查找职工\" class=\"headerlink\" title=\"11. 查找职工\"></a>11. 查找职工</h3><ul>\n<li>功能描述：提供两种查找方式<ol>\n<li>按职工编号查找</li>\n<li>按职工姓名查找</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"11-1-查找职工函数声明\"><a href=\"#11-1-查找职工函数声明\" class=\"headerlink\" title=\"11.1 查找职工函数声明\"></a>11.1 查找职工函数声明</h4><ul>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>void findEmployee();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 5.查找职工信息\nvoid findEmployee();</code></pre></li>\n</ul>\n<h4 id=\"11-2-查找职工函数实现\"><a href=\"#11-2-查找职工函数实现\" class=\"headerlink\" title=\"11.2 查找职工函数实现\"></a>11.2 查找职工函数实现</h4><ul>\n<li><p>在<code>workerManager.cpp</code>中实现成员函数<code>void findEmployee()&#123;&#125;;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 5.查找职工信息\nvoid WorkerManager::findEmployee()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n    &#125;\n    else\n    &#123;\n        int findSwitch &#x3D; 0;\n        cout &lt;&lt; &quot;查找选择_1.编号_2.姓名&gt;&gt; &quot;;\n        cin &gt;&gt; findSwitch;\n\n        if (findSwitch &#x3D;&#x3D; 1)\n        &#123;\n            int findWorkerID;\n            cout &lt;&lt; &quot;查找的职工编号&gt;&gt; &quot;;\n            cin &gt;&gt; findWorkerID;\n\n            &#x2F;&#x2F; 判断输入的编号有效性\n            int workerIndex &#x3D; isEmployeeExist(findWorkerID);\n            if (workerIndex !&#x3D; -1)\n            &#123;\n                cout &lt;&lt; &quot;查找成功&quot; &lt;&lt; endl;\n                cout &lt;&lt; &quot;职工信息: &quot;;\n                this-&gt;worker_EmpArray[workerIndex]-&gt;getWorkerInfo();\n            &#125;\n            else\n            &#123;\n                cout &lt;&lt; &quot;查找失败，职工编号错误或不存在&quot; &lt;&lt; endl;\n            &#125;\n        &#125;\n        else if (findSwitch &#x3D;&#x3D; 2)\n        &#123;\n            string findWorkerName;\n            cout &lt;&lt; &quot;查找的职工姓名&gt;&gt; &quot;;\n            cin &gt;&gt; findWorkerName;\n\n            bool isFindByName &#x3D; false;\n            for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n            &#123;\n                if (this-&gt;worker_EmpArray[i]-&gt;worker_Name &#x3D;&#x3D; findWorkerName)\n                &#123;\n                    isFindByName &#x3D; true;\n                    cout &lt;&lt; &quot;查到职工: &quot; &lt;&lt; findWorkerName &lt;&lt; &quot; 职工编号: &quot; &lt;&lt; worker_EmpArray[i]-&gt;worker_ID &lt;&lt; endl;\n                    cout &lt;&lt; &quot;职工信息: &quot;;\n                    worker_EmpArray[i]-&gt;getWorkerInfo();\n                &#125;\n            &#125;\n            if (!isFindByName)\n            &#123;\n                cout &lt;&lt; &quot;查找失败，职工编号、姓名错误或不存在&quot; &lt;&lt; endl;\n            &#125;\n        &#125;\n        else\n        &#123;\n            cout &lt;&lt; &quot;输入正确的选择&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n    system(&quot;cls&quot;);\n&#125;</code></pre>\n</li>\n<li><p>在<code>StaffManagerSystem_Main.cpp</code>中添加查找职工的接口</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">case 5: &#x2F;&#x2F; 5.查找职工信息\n    wm.findEmployee();\n    break;</code></pre></li>\n</ul>\n<h3 id=\"12-排序职工\"><a href=\"#12-排序职工\" class=\"headerlink\" title=\"12. 排序职工\"></a>12. 排序职工</h3><ul>\n<li>功能描述：按照职工编号排序，可以依据用户选择进行升序排列和降序排列</li>\n</ul>\n<h4 id=\"12-1-排序函数声明\"><a href=\"#12-1-排序函数声明\" class=\"headerlink\" title=\"12.1 排序函数声明\"></a>12.1 排序函数声明</h4><ul>\n<li><p>在<code>workerManager.h</code> 中添加成员函数<code>void sortEmployeeByID();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 6.按照编号排序\nvoid sortEmployeeByID();</code></pre></li>\n</ul>\n<h4 id=\"12-2-排序函数实现\"><a href=\"#12-2-排序函数实现\" class=\"headerlink\" title=\"12.2 排序函数实现\"></a>12.2 排序函数实现</h4><ul>\n<li><p>在<code>workerManager.cpp</code>中实现成员函数<code>void sortEmployeeByID()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 6.按照编号排序\nvoid WorkerManager::sortEmployeeByID()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n        system(&quot;pause&quot;);\n        system(&quot;cls&quot;);\n    &#125;\n    else\n    &#123;\n        int switchSort &#x3D; 0;\n        cout &lt;&lt; &quot;依据编号，选择排序方式_1.升序排列_2.降序排列&gt;&gt; &quot;;\n        cin &gt;&gt; switchSort;\n\n        for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; ++i)\n        &#123;\n            int maxOrmin &#x3D; i;\n            for (int j &#x3D; i + 1; j &lt; this-&gt;worker_EmpNum; ++j)\n            &#123;\n                &#x2F;&#x2F; 升序排列\n                if (switchSort &#x3D;&#x3D; 1)\n                &#123;\n                    &#x2F;&#x2F; 升序排列，如是指定下标的值 大于 遍历出的最小值，说明指定的不是最小的，把遍历的下标赋值给变量\n                    if (worker_EmpArray[maxOrmin]-&gt;worker_ID &gt; worker_EmpArray[j]-&gt;worker_ID)\n                    &#123;\n                        maxOrmin &#x3D; j;\n                    &#125;\n                &#125;\n                    &#x2F;&#x2F; 降序排列\n                else if (switchSort &#x3D;&#x3D; 2)\n                &#123;\n                    &#x2F;&#x2F; 降序排列，如是指定下标的值 小于 遍历出的最大值，说明指定的不是最大的，把遍历的下标赋值给变量\n                    if (worker_EmpArray[maxOrmin]-&gt;worker_ID &lt; worker_EmpArray[j]-&gt;worker_ID)\n                    &#123;\n                        maxOrmin &#x3D; j;\n                    &#125;\n                &#125;\n                else\n                &#123;\n                    cout &lt;&lt; &quot;输入正确的选择&quot; &lt;&lt; endl;\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F; 交换数据\n            if (maxOrmin !&#x3D; i)\n            &#123;\n                Worker *temp &#x3D; worker_EmpArray[i];\n                worker_EmpArray[i] &#x3D; worker_EmpArray[maxOrmin];\n                worker_EmpArray[maxOrmin] &#x3D; temp;\n            &#125;\n        &#125;\n        cout &lt;&lt; &quot;排序成功&quot; &lt;&lt; endl;\n        this-&gt;saveNewToFile();\n        this-&gt;showEmployeeInfo();\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>在<code>StaffManagerSystem_Main.cpp</code>这补充接口调用</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">case 6: &#x2F;&#x2F; 6.按照编号排序\n    wm.sortEmployeeByID();\n    break;</code></pre></li>\n</ul>\n<h3 id=\"13-清空文件\"><a href=\"#13-清空文件\" class=\"headerlink\" title=\"13. 清空文件\"></a>13. 清空文件</h3><ul>\n<li>功能描述：将文件记录数据清空</li>\n</ul>\n<h4 id=\"13-1-清空文件函数声明\"><a href=\"#13-1-清空文件函数声明\" class=\"headerlink\" title=\"13.1 清空文件函数声明\"></a>13.1 清空文件函数声明</h4><ul>\n<li><p>在<code>workerManager.h</code>中添加成员函数<code>void toEmptyFile();</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 7.清空所有文档\nvoid toEmptyFile();</code></pre></li>\n</ul>\n<h4 id=\"13-2-清空文件函数实现\"><a href=\"#13-2-清空文件函数实现\" class=\"headerlink\" title=\"13.2 清空文件函数实现\"></a>13.2 清空文件函数实现</h4><ul>\n<li><p>在<code>workerManager.h</code>中实现成员函数<code>void toEmptyFile()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 7.清空所有文档\nvoid WorkerManager::toEmptyFile()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n        system(&quot;pause&quot;);\n        system(&quot;cls&quot;);\n    &#125;\n    else\n    &#123;\n        int switchNum &#x3D; 0;\n        cout &lt;&lt; &quot;确认清空文件_1.确认_2.取消&gt;&gt; &quot;;\n        cin &gt;&gt; switchNum;\n\n        if (switchNum &#x3D;&#x3D; 1)\n        &#123;\n            &#x2F;&#x2F; 打开模式 ios::trunc 如果存在文件 删除后 重新生成\n            ofstream ofs(WORKER_FILENAME, ios::trunc);\n            ofs.close();\n\n            &#x2F;&#x2F; 判断内存中堆区的是否存在 存在需要释放\n            if (this-&gt;worker_EmpArray !&#x3D; nullptr)\n            &#123;\n                for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n                &#123;\n                    if (this-&gt;worker_EmpArray[i] !&#x3D; nullptr)\n                    &#123;\n                        delete this-&gt;worker_EmpArray[i];\n                    &#125;\n                &#125;\n                this-&gt;worker_EmpNum &#x3D; 0;\n                delete[] worker_EmpArray;\n                this-&gt;worker_EmpArray &#x3D; nullptr;\n                this-&gt;isFileEmpty &#x3D; true;\n            &#125;\n            cout &lt;&lt; &quot;职工文件清空完成&quot; &lt;&lt; endl;\n        &#125;\n        else if (switchNum &#x3D;&#x3D; 2)\n        &#123;\n            cout &lt;&lt; &quot;已取消清空职工文件&quot; &lt;&lt; endl;\n\n        &#125;\n        else\n        &#123;\n            cout &lt;&lt; &quot;输入正确的选择&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n    system(&quot;pause&quot;);\n    system(&quot;cls&quot;);\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"13-3-析构函数修改完善\"><a href=\"#13-3-析构函数修改完善\" class=\"headerlink\" title=\"13.3 析构函数修改完善\"></a>13.3 析构函数修改完善</h4><ul>\n<li><p>析构函数内，先判断数组属性是否存在，存在改为NULL，之后删除对象</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">WorkerManager::~WorkerManager()\n&#123;\n    if (this-&gt;worker_EmpArray !&#x3D; nullptr)\n    &#123;\n        for (int i&#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n        &#123;\n            if (this-&gt;worker_EmpArray[i] !&#x3D; nullptr)\n            &#123;\n                delete this-&gt;worker_EmpArray[i];\n            &#125;\n        &#125;\n        delete[] this-&gt;worker_EmpArray;\n        this-&gt;worker_EmpArray &#x3D; nullptr;\n    &#125;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"13-4-清空文件函数测试\"><a href=\"#13-4-清空文件函数测试\" class=\"headerlink\" title=\"13.4 清空文件函数测试\"></a>13.4 清空文件函数测试</h4><ul>\n<li><p>在<code>StaffManagerSystem_Main.cpp</code>这补充接口调用</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">case 7: &#x2F;&#x2F; 7.清空所有文档\n    wm.toEmptyFile();\n    break;</code></pre></li>\n</ul>\n<h3 id=\"14-后期bug修复\"><a href=\"#14-后期bug修复\" class=\"headerlink\" title=\"14. 后期bug修复\"></a>14. 后期bug修复</h3><h4 id=\"14-1-职工编号存在判断失误\"><a href=\"#14-1-职工编号存在判断失误\" class=\"headerlink\" title=\"14.1 职工编号存在判断失误\"></a>14.1 职工编号存在判断失误</h4><ul>\n<li><p>bug描述：</p>\n<ul>\n<li>清空文件后，重新添加职工，输入任意编号，都会判断职工编号已经存在</li>\n</ul>\n</li>\n<li><p>bug修复：</p>\n<ul>\n<li><p>在<code>workerManager.h</code>这添加成员变量</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 判断文件是否存在某个编号\nbool isIDExist;</code></pre>\n</li>\n<li><p>在<code>workerManager.cpp</code>中修改<code>bool WorkerManager::isEmployeeIDExist(int workerID)&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 排查添加的新职工的编号在文件中是否存在\nbool WorkerManager::isEmployeeIDExist(int workerID)\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        this-&gt;isIDExist &#x3D; false;\n    &#125;\n    else\n    &#123;\n        for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n        &#123;\n            if (this-&gt;worker_EmpArray[i]-&gt;worker_ID &#x3D;&#x3D; workerID)\n            &#123;\n                this-&gt;isIDExist &#x3D; true;\n                break;\n            &#125;\n            else\n            &#123;\n                this-&gt;isIDExist &#x3D; false;\n            &#125;\n        &#125;\n    &#125;\n    return this-&gt;isIDExist;\n&#125;</code></pre>\n</li>\n<li><p>在<code>workerManager.cpp</code>中修改<code>void WorkerManager::addEmployee()&#123;&#125;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 1.增加职工信息\nvoid WorkerManager::addEmployee()\n&#123;\n    cout &lt;&lt; &quot;&lt;-- 已录入职工数量：&quot; &lt;&lt; worker_EmpNum &lt;&lt; &quot; --&gt;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;输入增加职工数量：&gt;&gt; &quot;;\n    int addNum &#x3D; 0;\n    cin &gt;&gt; addNum;\n\n    if (addNum &gt; 0)\n    &#123;\n        &#x2F;&#x2F; 计算需要的空间大小 &#x3D; 已用的空间 + 新需要的空间\n        int newSize &#x3D; this-&gt;worker_EmpNum + addNum;\n\n        &#x2F;&#x2F; 在 堆区中开辟 计算好大小的内存空间\n        Worker **newSpace &#x3D; new Worker *[newSize];\n\n        &#x2F;&#x2F; 将已有空间的内容存在新的内村空间中\n        if (this-&gt;worker_EmpArray !&#x3D; nullptr)\n        &#123;\n            for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n            &#123;\n                newSpace[i] &#x3D; this-&gt;worker_EmpArray[i];\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F; 再将 需要添加的新内容加入\n        for (int j &#x3D; 0; j &lt; addNum; j++)\n        &#123;\n            int worker_ID; &#x2F;&#x2F; 职工ID\n            string worker_Name; &#x2F;&#x2F; 职工姓名\n            int worker_DepartID; &#x2F;&#x2F; 职工部门编号\n            bool isExistID &#x3D; true; &#x2F;&#x2F; 新增的变量，用于判断文件中是否已存在某个ID\n\n            &#x2F;&#x2F; 在输入职工ID的地方，进行了修改\n            &#x2F;&#x2F; 每次输入ID，都要判断一次，输入的ID在职工文件中是否已经存在\n            &#x2F;&#x2F; 存在就继续循环该语句，不存在再继续执行之后的语句\n            while (true)\n            &#123;\n                cout &lt;&lt; &quot;输入第&quot; &lt;&lt; j + 1 &lt;&lt; &quot;位员工信息:&quot; &lt;&lt; endl;\n                cout &lt;&lt; &quot;职工编号&gt;&gt; &quot;;\n                cin &gt;&gt; worker_ID;\n                this-&gt;isIDExist &#x3D; isEmployeeIDExist(worker_ID);\n\n                if (this-&gt;isIDExist)\n                &#123;\n                    cout &lt;&lt; &quot;编号已经存在&quot; &lt;&lt; endl;\n                    system(&quot;pause&quot;);\n                    system(&quot;cls&quot;);\n                &#125;\n                else\n                &#123;\n                    break;\n                &#125;\n            &#125;\n\n            cout &lt;&lt; &quot;职工姓名&gt;&gt; &quot;;\n            cin &gt;&gt; worker_Name;\n\n            cout &lt;&lt; &quot;职工岗位_ 1.员工_2.经理_3.老板&gt;&gt; &quot;;\n            cin &gt;&gt; worker_DepartID;\n            cout &lt;&lt; endl;\n\n            Worker *worker &#x3D; nullptr;\n\n            switch (worker_DepartID)\n            &#123;\n                case 1:\n                    worker &#x3D; new Employee(worker_ID, worker_Name, 1);\n                    break;\n                case 2:\n                    worker &#x3D; new Manager(worker_ID, worker_Name, 2);\n                    break;\n                case 3:\n                    worker &#x3D; new Boss(worker_ID, worker_Name, 3);\n                    break;\n                default:\n                    break;\n            &#125;\n\n            newSpace[this-&gt;worker_EmpNum + j] &#x3D; worker;\n        &#125;\n        &#x2F;&#x2F; 释放原本的空间\n        delete[] this-&gt;worker_EmpArray;\n\n        &#x2F;&#x2F; 更改新空间的指向\n        this-&gt;worker_EmpArray &#x3D; newSpace;\n\n        &#x2F;&#x2F; 更新 新的个数\n        this-&gt;worker_EmpNum &#x3D; newSize;\n\n        &#x2F;&#x2F; 更新 文件不在为假\n        this-&gt;isFileEmpty &#x3D; false;\n\n        &#x2F;&#x2F; 提示信息\n        cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;\n\n        &#x2F;&#x2F; 保存录入的职工信息到文本文件中\n        this-&gt;saveNewToFile();\n    &#125;\n    else\n    &#123;\n        cout &lt;&lt; &quot;需输入正确的数字&quot; &lt;&lt; endl;\n    &#125;\n    system(&quot;pause&quot;);\n    system(&quot;cls&quot;);\n&#125;</code></pre>\n</li>\n<li><p>在<code>workerManager.cpp</code>中的<code>void WorkerManager::toEmptyFile()&#123;&#125;</code>修改</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">cout &lt;&lt; &quot;职工文件清空完成&quot; &lt;&lt; endl;\nthis-&gt;isIDExist &#x3D; false;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"15-源码整理-Clion\"><a href=\"#15-源码整理-Clion\" class=\"headerlink\" title=\"15. 源码整理-Clion\"></a>15. 源码整理-Clion</h3><p>项目结构：</p>\n<ul>\n<li>StaffManagerSystem<ul>\n<li>File</li>\n<li>Header<ul>\n<li>boss.h</li>\n<li>employee.h</li>\n<li>manager.h</li>\n<li>worker.h</li>\n<li>workerManager.h</li>\n</ul>\n</li>\n<li>Main<ul>\n<li>StaffManagerSystem_Main.cpp</li>\n</ul>\n</li>\n<li>Source<ul>\n<li>boss.cpp</li>\n<li>employee.cpp</li>\n<li>manager.cpp</li>\n<li>workerManager.cpp</li>\n</ul>\n</li>\n<li>CMakeList.txt</li>\n</ul>\n</li>\n</ul>\n<p>对应源码：</p>\n<ul>\n<li>StaffManagerSystem<ul>\n<li><p>File</p>\n</li>\n<li><p>Header</p>\n<ul>\n<li><p>boss.h</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_BOSS_H\n#define STAFFMANAGEMENTSYSTEM_BOSS_H\n\n#include &quot;worker.h&quot;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F; 老板类\nclass Boss : public Worker\n&#123;\npublic:\n    &#x2F;&#x2F; 初始化 老板 构造函数\n    Boss(int w_Id, string w_Name, int w_DepartId);\n\n    &#x2F;&#x2F; 获得老板个人信息\n    void getWorkerInfo() override;\n\n    &#x2F;&#x2F; 获得老板部门岗位名称\n    string getWorkerDepartName() override;\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_BOSS_H</code></pre>\n\n\n</li>\n<li><p>employee.h</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_EMPLOYEE_H\n#define STAFFMANAGEMENTSYSTEM_EMPLOYEE_H\n\n#include &quot;worker.h&quot;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F; 普通员工 类\nclass Employee : public Worker\n&#123;\npublic:\n    &#x2F;&#x2F; 初始化 员工 构造函数\n    Employee(int w_Id, string w_Name, int w_DepartId);\n\n    &#x2F;&#x2F; 获得员工个人信息\n    void getWorkerInfo() override;\n\n    &#x2F;&#x2F; 获得员工部门岗位名称\n    string getWorkerDepartName() override;\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_EMPLOYEE_H</code></pre>\n\n\n</li>\n<li><p>manager.h</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_MANAGER_H\n#define STAFFMANAGEMENTSYSTEM_MANAGER_H\n\n#include &quot;worker.h&quot;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F; 经理类\nclass Manager : public Worker\n&#123;\npublic:\n    &#x2F;&#x2F; 初始化 经理 构造函数\n    Manager(int w_Id, string w_Name, int w_DepartId);\n\n    &#x2F;&#x2F; 获得经理个人信息\n    void getWorkerInfo() override;\n\n    &#x2F;&#x2F; 获得经理部门岗位名称\n    string getWorkerDepartName() override;\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_MANAGER_H</code></pre>\n\n\n</li>\n<li><p>worker.h</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_WORKER_H\n#define STAFFMANAGEMENTSYSTEM_WORKER_H\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F; 职工抽象类\nclass Worker\n&#123;\npublic:\n    int worker_ID; &#x2F;&#x2F; 职工ID\n    string worker_Name; &#x2F;&#x2F; 职工姓名\n    int worker_DepartID; &#x2F;&#x2F; 职工部门编号\n\n    &#x2F;&#x2F; 获得 职工的信息\n    virtual void getWorkerInfo() &#x3D; 0;\n\n    &#x2F;&#x2F; 获得 职工部门的岗位名称\n    virtual string getWorkerDepartName() &#x3D; 0;\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_WORKER_H</code></pre>\n\n\n</li>\n<li><p>workerManager.h</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#ifndef STAFFMANAGEMENTSYSTEM_WORKERMANAGER_H\n#define STAFFMANAGEMENTSYSTEM_WORKERMANAGER_H\n\n#define wm workerManager\n#define WORKER_FILENAME &quot;..&#x2F;File&#x2F;workerFile.txt&quot;\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &quot;worker.h&quot;\n#include &quot;employee.h&quot;\n#include &quot;manager.h&quot;\n#include &quot;boss.h&quot;\n\nusing namespace std;\n\nclass WorkerManager\n&#123;\npublic:\n    &#x2F;&#x2F; 记录文件中的人数\n    int worker_EmpNum;\n\n    &#x2F;&#x2F; 判断文件是否为空\n    bool isFileEmpty;\n\n    &#x2F;&#x2F; 判断文件是否存在某个编号\n    bool isIDExist;\n\n    &#x2F;&#x2F; 员工数组指针\n    Worker ** worker_EmpArray;\n\n    WorkerManager();\n    ~WorkerManager();\n\n    &#x2F;&#x2F; 显示员工管理系统主菜单\n    void Show_Menu();\n\n    &#x2F;&#x2F; 保持录入职工的信息到文件\n    void saveNewToFile();\n\n    &#x2F;&#x2F; 获得记录职工人数\n    int getEmpNum();\n\n    &#x2F;&#x2F; 初始化职工\n    void initEmployee();\n\n    &#x2F;&#x2F; 职工是否存在\n    int isEmployeeExist(int workerID);\n\n    &#x2F;&#x2F; 排查添加的新职工的编号在文件中是否存在\n    bool isEmployeeIDExist(int workerID);\n\n    &#x2F;&#x2F; 0.退出管理系统\n    void exitSystem();\n\n    &#x2F;&#x2F; 1.增加职工信息\n    void addEmployee();\n\n    &#x2F;&#x2F; 2.显示职工信息\n    void showEmployeeInfo();\n\n    &#x2F;&#x2F; 3.删除离职职工\n    void deletEmployee();\n\n    &#x2F;&#x2F; 4.修改职工信息\n    void modifyEmployeeInfo();\n\n    &#x2F;&#x2F; 5.查找职工信息\n    void findEmployee();\n\n    &#x2F;&#x2F; 6.按照编号排序\n    void sortEmployeeByID();\n\n    &#x2F;&#x2F; 7.清空所有文档\n    void toEmptyFile();\n\n&#125;;\n\n#endif &#x2F;&#x2F;STAFFMANAGEMENTSYSTEM_WORKERMANAGER_H</code></pre></li>\n</ul>\n</li>\n<li><p>Main</p>\n<ul>\n<li><p>StaffManagerSystem_Main.cpp</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &quot;..&#x2F;Header&#x2F;workerManager.h&quot;\n\n&#x2F;&#x2F; 早期测试代码\nvoid demo()\n&#123;\n    Worker *worker;\n\n    worker &#x3D; new Employee(1, &quot;Normal_A&quot;, 1);\n    worker-&gt;getWorkerInfo();\n    delete worker;\n\n    worker &#x3D; new Manager(2, &quot;Manager_A&quot;, 2);\n    worker-&gt;getWorkerInfo();\n    delete worker;\n\n    worker &#x3D; new Boss(3, &quot;Boss_A&quot;, 3);\n    worker-&gt;getWorkerInfo();\n    delete worker;\n&#125;\n\n&#x2F;&#x2F; 显示职工管理系统的主界面\nvoid showMenu()\n&#123;\n    &#x2F;&#x2F; 初始选择\n    int choice &#x3D; 0;\n\n    &#x2F;&#x2F; 生成 管理界面 对象\n    WorkerManager workerManager;\n\n    &#x2F;&#x2F; 调用 菜单界面\n    while (true)\n    &#123;\n        wm.Show_Menu();\n        cout &lt;&lt; &quot;功能选择 &gt;&gt; &quot;;\n        cin &gt;&gt; choice;\n\n        &#x2F;&#x2F; 菜单界面的功能选择分支\n        switch (choice)\n        &#123;\n            case 0: &#x2F;&#x2F; 0.退出管理系统\n                wm.exitSystem();\n                break;\n            case 1: &#x2F;&#x2F; 1.增加职工信息\n                wm.addEmployee();\n                break;\n            case 2: &#x2F;&#x2F; 2.显示职工信息\n                wm.showEmployeeInfo();\n                break;\n            case 3: &#x2F;&#x2F; 3.删除离职职工\n                wm.deletEmployee();\n                break;\n            case 4: &#x2F;&#x2F; 4.修改职工信息\n                wm.modifyEmployeeInfo();\n                break;\n            case 5: &#x2F;&#x2F; 5.查找职工信息\n                wm.findEmployee();\n                break;\n            case 6: &#x2F;&#x2F; 6.按照编号排序\n                wm.sortEmployeeByID();\n                break;\n            case 7: &#x2F;&#x2F; 7.清空所有文档\n                wm.toEmptyFile();\n                break;\n            default: &#x2F;&#x2F; 0 ~ 7 之外任意值，清空，重来菜单界面\n                system(&quot;pause&quot;);\n                system(&quot;cls&quot;);\n                break;\n        &#125;\n    &#125;\n&#125;\n\nint main()\n&#123;\n&#x2F;&#x2F;    demo();\n    showMenu();\n    return 0;\n&#125;</code></pre></li>\n</ul>\n</li>\n<li><p>Source</p>\n<ul>\n<li><p>boss.cpp</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#include &quot;..&#x2F;Header&#x2F;boss.h&quot;\n\n&#x2F;&#x2F; 构造函数 初始化 老板 信息\nBoss::Boss(int w_Id, string w_Name, int w_DepartId)\n&#123;\n    this-&gt;worker_ID &#x3D; w_Id;\n    this-&gt;worker_Name &#x3D; w_Name;\n    this-&gt;worker_DepartID &#x3D; w_DepartId;\n&#125;\n\n&#x2F;&#x2F; 获得 职工信息\nvoid Boss::getWorkerInfo()\n&#123;\n    cout &lt;&lt; &quot;编号：&quot; &lt;&lt; this-&gt;worker_ID\n         &lt;&lt; &quot;\\t姓名：&quot; &lt;&lt; this-&gt;worker_Name\n         &lt;&lt; &quot;\\t岗位：&quot; &lt;&lt; this-&gt;getWorkerDepartName()\n         &lt;&lt; &quot;\\t职责：管理所有的事务&quot; &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F; 获得 职工 岗位信息\nstring Boss::getWorkerDepartName()\n&#123;\n    return string(&quot;老板&quot;);\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>employee.cpp</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n#include &quot;..&#x2F;Header&#x2F;employee.h&quot;\n\n&#x2F;&#x2F; 构造函数 初始化 普通员工 信息\nEmployee::Employee(int w_Id, string w_Name, int w_DepartId)\n&#123;\n    this-&gt;worker_ID &#x3D; w_Id;\n    this-&gt;worker_Name &#x3D; w_Name;\n    this-&gt;worker_DepartID &#x3D; w_DepartId;\n&#125;\n\n&#x2F;&#x2F; 获得 职工信息\nvoid Employee::getWorkerInfo()\n&#123;\n    cout &lt;&lt; &quot;编号：&quot; &lt;&lt; this-&gt;worker_ID\n         &lt;&lt; &quot;\\t姓名：&quot; &lt;&lt; this-&gt;worker_Name\n         &lt;&lt; &quot;\\t岗位：&quot; &lt;&lt; this-&gt;getWorkerDepartName()\n         &lt;&lt; &quot;\\t职责：完成经理的任务&quot; &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F; 获得 职工 岗位信息\nstring Employee::getWorkerDepartName()\n&#123;\n    return string(&quot;员工&quot;);\n&#125;</code></pre>\n\n\n</li>\n<li><p>manager.cpp</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n\n#include &quot;..&#x2F;Header&#x2F;manager.h&quot;\n\n&#x2F;&#x2F; 构造函数 初始化 经理 信息\nManager::Manager(int w_Id, string w_Name, int w_DepartId)\n&#123;\n    this-&gt;worker_ID &#x3D; w_Id;\n    this-&gt;worker_Name &#x3D; w_Name;\n    this-&gt;worker_DepartID &#x3D; w_DepartId;\n&#125;\n\n&#x2F;&#x2F; 获得 职工信息\nvoid Manager::getWorkerInfo()\n&#123;\n    cout &lt;&lt; &quot;编号：&quot; &lt;&lt; this-&gt;worker_ID\n         &lt;&lt; &quot;\\t姓名：&quot; &lt;&lt; this-&gt;worker_Name\n         &lt;&lt; &quot;\\t岗位：&quot; &lt;&lt; this-&gt;getWorkerDepartName()\n         &lt;&lt; &quot;\\t职责：执行老板的任务&quot; &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F; 获得 职工 岗位信息\nstring Manager::getWorkerDepartName()\n&#123;\n    return string(&quot;经理&quot;);\n&#125;</code></pre>\n\n\n</li>\n<li><p>workerManager.cpp</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;\n&#x2F;&#x2F; Created by Admin on 2021&#x2F;6&#x2F;26.\n&#x2F;&#x2F;\n#include &quot;..&#x2F;Header&#x2F;workerManager.h&quot;\n\nWorkerManager::WorkerManager()\n&#123;\n    &#x2F;&#x2F; 1. 初始化 读文件对象\n    ifstream ifs;\n    ifs.open(WORKER_FILENAME, ios::in);\n\n    &#x2F;&#x2F; 2. 文件不存在的情况\n    if (!ifs.is_open())\n    &#123;\n        cout &lt;&lt; &quot;&lt;-- 提示：职工文件不存在 --&gt;&quot; &lt;&lt; endl;\n        this-&gt;worker_EmpNum &#x3D; 0;\n        this-&gt;worker_EmpArray &#x3D; nullptr;\n        &#x2F;&#x2F; 初始化 文件 是空\n        this-&gt;isFileEmpty &#x3D; true;\n        ifs.close();\n        return;\n    &#125;\n\n    &#x2F;&#x2F; 3. 文件存在 数据为空\n    string str;\n    ifs &gt;&gt; str;\n    if (ifs.eof())\n    &#123;\n        cout &lt;&lt; &quot;&lt;-- 提示：职工文件为空 --&gt;&quot; &lt;&lt; endl;\n        this-&gt;worker_EmpNum &#x3D; 0;\n        this-&gt;worker_EmpArray &#x3D; nullptr;\n        this-&gt;isFileEmpty &#x3D; true;\n        ifs.close();\n        return;\n    &#125;\n\n    &#x2F;&#x2F; 4. 文件存在 有数据\n    &#x2F;&#x2F; 获得文件已记录人数\n    int empNum &#x3D; this-&gt;getEmpNum();\n    &#x2F;&#x2F; 更新 记录人数\n    this-&gt;worker_EmpNum &#x3D; empNum;\n    cout &lt;&lt; &quot;&lt;-- 职工数量: &quot; &lt;&lt; empNum &lt;&lt; &quot; --&gt;&quot; &lt;&lt; endl;\n\n    &#x2F;&#x2F; 根据职工数量创建数组\n    this-&gt;worker_EmpArray &#x3D; new Worker *[this-&gt;worker_EmpNum];\n    this-&gt;initEmployee();\n    &#x2F;&#x2F; 测试代码\n&#x2F;&#x2F;    for (int i &#x3D; 0; i &lt;worker_EmpNum; i++)\n&#x2F;&#x2F;    &#123;\n&#x2F;&#x2F;        cout &lt;&lt; &quot;&lt;-- 职工编号：&quot; &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_ID\n&#x2F;&#x2F;             &lt;&lt; &quot;   职工姓名：&quot; &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_Name\n&#x2F;&#x2F;             &lt;&lt; &quot;   职工部门：&quot; &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_DepartID\n&#x2F;&#x2F;             &lt;&lt; &quot; --&gt;&quot; &lt;&lt; endl;\n&#x2F;&#x2F;    &#125;\n&#125;\n\nWorkerManager::~WorkerManager()\n&#123;\n    if (this-&gt;worker_EmpArray !&#x3D; nullptr)\n    &#123;\n        for (int i&#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n        &#123;\n            if (this-&gt;worker_EmpArray[i] !&#x3D; nullptr)\n            &#123;\n                delete this-&gt;worker_EmpArray[i];\n            &#125;\n        &#125;\n        delete[] this-&gt;worker_EmpArray;\n        this-&gt;worker_EmpArray &#x3D; nullptr;\n    &#125;\n&#125;\n\n&#x2F;&#x2F; 显示员工管理系统主菜单\nvoid WorkerManager::Show_Menu()\n&#123;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;员工管理系统主菜单&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;0.退出管理系统&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1.增加职工信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2.显示职工信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3.删除离职职工&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;4.修改职工信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;5.查找职工信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;6.按照编号排序&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;7.清空所有文档&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F; 保持录入职工的信息到文件\nvoid WorkerManager::saveNewToFile()\n&#123;\n    &#x2F;&#x2F; 初始化 写文件对象\n    ofstream ofs;\n    ofs.open(WORKER_FILENAME, ios::out);\n\n    for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n    &#123;\n        ofs &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_ID &lt;&lt; &quot; &quot;\n            &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_Name &lt;&lt; &quot; &quot;\n            &lt;&lt; this-&gt;worker_EmpArray[i]-&gt;worker_DepartID &lt;&lt; endl;\n    &#125;\n\n    ofs.close();\n&#125;\n\n&#x2F;&#x2F; 获得记录职工人数\nint WorkerManager::getEmpNum()\n&#123;\n    ifstream ifs;\n    ifs.open(WORKER_FILENAME, ios::in);\n\n    &#x2F;&#x2F; 存入 读到的数据\n    int worker_ID;\n    string worker_Name;\n    int worker_DepartID;\n    &#x2F;&#x2F; 初始化 记录人数\n    int empNum &#x3D; 0;\n\n    &#x2F;&#x2F; 当 读文件操作对象 返回为真\n    while (ifs &gt;&gt; worker_ID &amp;&amp; ifs &gt;&gt; worker_Name &amp;&amp; ifs &gt;&gt; worker_DepartID)\n    &#123;\n        &#x2F;&#x2F; 记录人数 +1\n        empNum++;\n    &#125;\n    ifs.close();\n\n    return empNum;\n&#125;\n\n&#x2F;&#x2F; 初始化职工\nvoid WorkerManager::initEmployee()\n&#123;\n    ifstream ifs;\n    ifs.open(WORKER_FILENAME, ios::in);\n\n    &#x2F;&#x2F; 存入 读到的数据\n    int worker_ID;\n    string worker_Name;\n    int worker_DepartID;\n    &#x2F;&#x2F; 初始化 记录人数\n    int index &#x3D; 0;\n\n    &#x2F;&#x2F; 当 读文件操作对象 返回为真\n    while (ifs &gt;&gt; worker_ID &amp;&amp; ifs &gt;&gt; worker_Name &amp;&amp; ifs &gt;&gt; worker_DepartID)\n    &#123;\n        Worker *worker &#x3D; nullptr;\n\n        &#x2F;&#x2F; 根据 DepartID，创建不同职工对象\n        if (worker_DepartID &#x3D;&#x3D; 1)\n        &#123;\n            worker &#x3D; new Employee(worker_ID, worker_Name, worker_DepartID);\n        &#125;\n        else if (worker_DepartID &#x3D;&#x3D; 2)\n        &#123;\n            worker &#x3D; new Manager(worker_ID, worker_Name, worker_DepartID);\n        &#125;\n        else\n        &#123;\n            worker &#x3D; new Boss(worker_ID, worker_Name, worker_DepartID);\n        &#125;\n        &#x2F;&#x2F; 生成职工对象后，存入职工数组中\n        this-&gt;worker_EmpArray[index] &#x3D; worker;\n        index++;\n    &#125;\n    ifs.close();\n&#125;\n\n&#x2F;&#x2F; 职工是否存在\nint WorkerManager::isEmployeeExist(int workerID)\n&#123;\n    &#x2F;&#x2F; 默认index为职工的编号，-1是不存在\n    int index &#x3D; -1;\n    for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n    &#123;\n        if (this-&gt;worker_EmpArray[i]-&gt;worker_ID &#x3D;&#x3D; workerID)\n        &#123;\n            index &#x3D; i;\n            break;\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 返回 -1 表示不存在这个职工，其他表示找到了对应职工的ID编号\n    return index;\n&#125;\n\n&#x2F;&#x2F; 排查添加的新职工的编号在文件中是否存在\nbool WorkerManager::isEmployeeIDExist(int workerID)\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        this-&gt;isIDExist &#x3D; false;\n    &#125;\n    else\n    &#123;\n        for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n        &#123;\n            if (this-&gt;worker_EmpArray[i]-&gt;worker_ID &#x3D;&#x3D; workerID)\n            &#123;\n                this-&gt;isIDExist &#x3D; true;\n                break;\n            &#125;\n            else\n            &#123;\n                this-&gt;isIDExist &#x3D; false;\n            &#125;\n        &#125;\n    &#125;\n    return this-&gt;isIDExist;\n&#125;\n\n&#x2F;&#x2F; 0.退出管理系统\nvoid WorkerManager::exitSystem()\n&#123;\n    cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;员工管理系统-退出&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n    exit(0);\n&#125;\n\n&#x2F;&#x2F; 1.增加职工信息\nvoid WorkerManager::addEmployee()\n&#123;\n    cout &lt;&lt; &quot;&lt;-- 已录入职工数量：&quot; &lt;&lt; worker_EmpNum &lt;&lt; &quot; --&gt;&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;输入增加职工数量：&gt;&gt; &quot;;\n    int addNum &#x3D; 0;\n    cin &gt;&gt; addNum;\n\n    if (addNum &gt; 0)\n    &#123;\n        &#x2F;&#x2F; 计算需要的空间大小 &#x3D; 已用的空间 + 新需要的空间\n        int newSize &#x3D; this-&gt;worker_EmpNum + addNum;\n\n        &#x2F;&#x2F; 在 堆区中开辟 计算好大小的内存空间\n        Worker **newSpace &#x3D; new Worker *[newSize];\n\n        &#x2F;&#x2F; 将已有空间的内容存在新的内村空间中\n        if (this-&gt;worker_EmpArray !&#x3D; nullptr)\n        &#123;\n            for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n            &#123;\n                newSpace[i] &#x3D; this-&gt;worker_EmpArray[i];\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F; 再将 需要添加的新内容加入\n        for (int j &#x3D; 0; j &lt; addNum; j++)\n        &#123;\n            int worker_ID; &#x2F;&#x2F; 职工ID\n            string worker_Name; &#x2F;&#x2F; 职工姓名\n            int worker_DepartID; &#x2F;&#x2F; 职工部门编号\n            bool isExistID &#x3D; true; &#x2F;&#x2F; 新增的变量，用于判断文件中是否已存在某个ID\n\n            &#x2F;&#x2F; 在输入职工ID的地方，进行了修改\n            &#x2F;&#x2F; 每次输入ID，都要判断一次，输入的ID在职工文件中是否已经存在\n            &#x2F;&#x2F; 存在就继续循环该语句，不存在再继续执行之后的语句\n            while (true)\n            &#123;\n                cout &lt;&lt; &quot;输入第&quot; &lt;&lt; j + 1 &lt;&lt; &quot;位员工信息:&quot; &lt;&lt; endl;\n                cout &lt;&lt; &quot;职工编号&gt;&gt; &quot;;\n                cin &gt;&gt; worker_ID;\n                this-&gt;isIDExist &#x3D; isEmployeeIDExist(worker_ID);\n\n                if (this-&gt;isIDExist)\n                &#123;\n                    cout &lt;&lt; &quot;编号已经存在&quot; &lt;&lt; endl;\n                    system(&quot;pause&quot;);\n                    system(&quot;cls&quot;);\n                &#125;\n                else\n                &#123;\n                    break;\n                &#125;\n            &#125;\n\n            cout &lt;&lt; &quot;职工姓名&gt;&gt; &quot;;\n            cin &gt;&gt; worker_Name;\n\n            cout &lt;&lt; &quot;职工岗位_ 1.员工_2.经理_3.老板&gt;&gt; &quot;;\n            cin &gt;&gt; worker_DepartID;\n            cout &lt;&lt; endl;\n\n            Worker *worker &#x3D; nullptr;\n\n            switch (worker_DepartID)\n            &#123;\n                case 1:\n                    worker &#x3D; new Employee(worker_ID, worker_Name, 1);\n                    break;\n                case 2:\n                    worker &#x3D; new Manager(worker_ID, worker_Name, 2);\n                    break;\n                case 3:\n                    worker &#x3D; new Boss(worker_ID, worker_Name, 3);\n                    break;\n                default:\n                    break;\n            &#125;\n\n            newSpace[this-&gt;worker_EmpNum + j] &#x3D; worker;\n        &#125;\n        &#x2F;&#x2F; 释放原本的空间\n        delete[] this-&gt;worker_EmpArray;\n\n        &#x2F;&#x2F; 更改新空间的指向\n        this-&gt;worker_EmpArray &#x3D; newSpace;\n\n        &#x2F;&#x2F; 更新 新的个数\n        this-&gt;worker_EmpNum &#x3D; newSize;\n\n        &#x2F;&#x2F; 更新 文件不在为假\n        this-&gt;isFileEmpty &#x3D; false;\n\n        &#x2F;&#x2F; 提示信息\n        cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; addNum &lt;&lt; &quot;名新职工&quot; &lt;&lt; endl;\n\n        &#x2F;&#x2F; 保存录入的职工信息到文本文件中\n        this-&gt;saveNewToFile();\n    &#125;\n    else\n    &#123;\n        cout &lt;&lt; &quot;需输入正确的数字&quot; &lt;&lt; endl;\n    &#125;\n    system(&quot;pause&quot;);\n    system(&quot;cls&quot;);\n&#125;\n\n&#x2F;&#x2F; 2.显示职工信息\nvoid WorkerManager::showEmployeeInfo()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n        system(&quot;pause&quot;);\n        system(&quot;cls&quot;);\n    &#125;\n    else\n    &#123;\n        for (int i &#x3D; 0; i &lt; worker_EmpNum; i++)\n        &#123;\n            &#x2F;&#x2F; 利用多态调用接口\n            this-&gt;worker_EmpArray[i]-&gt;getWorkerInfo();\n        &#125;\n    &#125;\n    system(&quot;pause&quot;);\n    system(&quot;cls&quot;);\n&#125;\n\n&#x2F;&#x2F; 3.删除离职职工\nvoid WorkerManager::deletEmployee()\n&#123;\n    &#x2F;&#x2F; 先判断是否存在职工文件\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n        system(&quot;pause&quot;);\n        system(&quot;cls&quot;);\n    &#125;\n    else\n    &#123;\n        int workerID &#x3D; 0;\n        cout &lt;&lt; &quot;输入需要删除的职工编号&gt;&gt; &quot;;\n        cin &gt;&gt; workerID;\n\n        &#x2F;&#x2F; 通过isEmployeeExit()，确定并返回一个存在且有效的职工编号\n        int workerIndex &#x3D; isEmployeeExist(workerID);\n        if (workerIndex !&#x3D; -1)\n        &#123;\n            &#x2F;&#x2F; 删掉指定数据后，数组数据需要数据前移\n            for (int i &#x3D; workerIndex; i &lt; this-&gt;worker_EmpNum - 1; i++)\n            &#123;\n                this-&gt;worker_EmpArray[i] &#x3D; this-&gt;worker_EmpArray[i + 1];\n            &#125;\n            &#x2F;&#x2F; 没移动一个数据，数组后面需要移动的数据就少一个\n            this-&gt;worker_EmpNum--;\n            &#x2F;&#x2F; 修改数据后，将更新的数据保存到文件中\n            this-&gt;saveNewToFile();\n            cout &lt;&lt; &quot;编号:&quot; &lt;&lt; workerIndex + 1 &lt;&lt; &quot; 职工已删除&quot; &lt;&lt; endl;\n        &#125;\n        else\n        &#123;\n            cout &lt;&lt; &quot;删除失败，职工编号错误或不存在&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n    system(&quot;pause&quot;);\n    system(&quot;cls&quot;);\n&#125;\n\n&#x2F;&#x2F; 4.修改职工信息\nvoid WorkerManager::modifyEmployeeInfo()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n        system(&quot;pause&quot;);\n        system(&quot;cls&quot;);\n    &#125;\n    else\n    &#123;\n        int workerID &#x3D; 0;\n        cout &lt;&lt; &quot;输入需要修改的职工编号&gt;&gt; &quot;;\n        cin &gt;&gt; workerID;\n\n        &#x2F;&#x2F; 通过isEmployeeExit()，确定并返回一个存在且有效的职工编号\n        int workerIndex &#x3D; isEmployeeExist(workerID);\n        if (workerIndex !&#x3D; -1)\n        &#123;\n            &#x2F;&#x2F; 找到存在且有效的职工编号后，删除数组中对应的信息\n            delete this-&gt;worker_EmpArray[workerIndex];\n\n            int newWorker_ID; &#x2F;&#x2F; 职工ID\n            string newWorker_Name; &#x2F;&#x2F; 职工姓名\n            int newWorker_DepartID; &#x2F;&#x2F; 职工部门编号\n\n            cout &lt;&lt; &quot;查的编号:&quot; &lt;&lt; workerID &lt;&lt; &quot; 的职工&quot; &lt;&lt; endl;\n            cout &lt;&lt; &quot;新的职工编号&gt;&gt; &quot;;\n            cin &gt;&gt; newWorker_ID;\n\n            cout &lt;&lt; &quot;新的职工姓名&gt;&gt; &quot;;\n            cin &gt;&gt; newWorker_Name;\n\n            cout &lt;&lt; &quot;新的职工岗位_ 1.员工_2.经理_3.老板&gt;&gt; &quot;;\n            cin &gt;&gt; newWorker_DepartID;\n            cout &lt;&lt; endl;\n\n            Worker *worker &#x3D; nullptr;\n\n            switch (newWorker_DepartID)\n            &#123;\n                case 1:\n                    worker &#x3D; new Employee(newWorker_ID, newWorker_Name, 1);\n                    break;\n                case 2:\n                    worker &#x3D; new Manager(newWorker_ID, newWorker_Name, 2);\n                    break;\n                case 3:\n                    worker &#x3D; new Boss(newWorker_ID, newWorker_Name, 3);\n                    break;\n                default:\n                    break;\n            &#125;\n\n            &#x2F;&#x2F; 更新数据到数组中对应的编号\n            this-&gt;worker_EmpArray[workerIndex] &#x3D; worker;\n\n            cout &lt;&lt; &quot;新编号:&quot; &lt;&lt; newWorker_ID &lt;&lt; &quot; 职工的信息，修改完成&quot;\n                 &lt;&lt; &quot; 新部门编号:&quot; &lt;&lt; this-&gt;worker_EmpArray[workerIndex]-&gt;worker_DepartID &lt;&lt; endl;\n        &#125;\n        else\n        &#123;\n            cout &lt;&lt; &quot;修改失败，职工编号错误或不存在&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n    system(&quot;pause&quot;);\n    system(&quot;cls&quot;);\n&#125;\n\n&#x2F;&#x2F; 5.查找职工信息\nvoid WorkerManager::findEmployee()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n        system(&quot;pause&quot;);\n        system(&quot;cls&quot;);\n    &#125;\n    else\n    &#123;\n        int findSwitch &#x3D; 0;\n        cout &lt;&lt; &quot;查找选择_1.编号_2.姓名&gt;&gt; &quot;;\n        cin &gt;&gt; findSwitch;\n\n        if (findSwitch &#x3D;&#x3D; 1)\n        &#123;\n            int findWorkerID;\n            cout &lt;&lt; &quot;查找的职工编号&gt;&gt; &quot;;\n            cin &gt;&gt; findWorkerID;\n\n            &#x2F;&#x2F; 判断输入的编号有效性\n            int workerIndex &#x3D; isEmployeeExist(findWorkerID);\n            if (workerIndex !&#x3D; -1)\n            &#123;\n                cout &lt;&lt; &quot;查找成功&quot; &lt;&lt; endl;\n                cout &lt;&lt; &quot;职工信息: &quot;;\n                this-&gt;worker_EmpArray[workerIndex]-&gt;getWorkerInfo();\n            &#125;\n            else\n            &#123;\n                cout &lt;&lt; &quot;查找失败，职工编号错误或不存在&quot; &lt;&lt; endl;\n            &#125;\n        &#125;\n        else if (findSwitch &#x3D;&#x3D; 2)\n        &#123;\n            string findWorkerName;\n            cout &lt;&lt; &quot;查找的职工姓名&gt;&gt; &quot;;\n            cin &gt;&gt; findWorkerName;\n\n            bool isFindByName &#x3D; false;\n            for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n            &#123;\n                if (this-&gt;worker_EmpArray[i]-&gt;worker_Name &#x3D;&#x3D; findWorkerName)\n                &#123;\n                    isFindByName &#x3D; true;\n                    cout &lt;&lt; &quot;查到职工: &quot; &lt;&lt; findWorkerName &lt;&lt; &quot; 职工编号: &quot; &lt;&lt; worker_EmpArray[i]-&gt;worker_ID &lt;&lt; endl;\n                    cout &lt;&lt; &quot;职工信息: &quot;;\n                    worker_EmpArray[i]-&gt;getWorkerInfo();\n                &#125;\n            &#125;\n            if (!isFindByName)\n            &#123;\n                cout &lt;&lt; &quot;查找失败，职工编号、姓名错误或不存在&quot; &lt;&lt; endl;\n            &#125;\n        &#125;\n        else\n        &#123;\n            cout &lt;&lt; &quot;输入正确的选择&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n    system(&quot;pause&quot;);\n    system(&quot;cls&quot;);\n&#125;\n\n&#x2F;&#x2F; 6.按照编号排序\nvoid WorkerManager::sortEmployeeByID()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n        system(&quot;pause&quot;);\n        system(&quot;cls&quot;);\n    &#125;\n    else\n    &#123;\n        int switchSort &#x3D; 0;\n        cout &lt;&lt; &quot;依据编号，选择排序方式_1.升序排列_2.降序排列&gt;&gt; &quot;;\n        cin &gt;&gt; switchSort;\n\n        for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; ++i)\n        &#123;\n            int maxOrmin &#x3D; i;\n            for (int j &#x3D; i + 1; j &lt; this-&gt;worker_EmpNum; ++j)\n            &#123;\n                &#x2F;&#x2F; 升序排列\n                if (switchSort &#x3D;&#x3D; 1)\n                &#123;\n                    &#x2F;&#x2F; 升序排列，如是指定下标的值 大于 遍历出的最小值，说明指定的不是最小的，把遍历的下标赋值给变量\n                    if (worker_EmpArray[maxOrmin]-&gt;worker_ID &gt; worker_EmpArray[j]-&gt;worker_ID)\n                    &#123;\n                        maxOrmin &#x3D; j;\n                    &#125;\n                &#125;\n                    &#x2F;&#x2F; 降序排列\n                else if (switchSort &#x3D;&#x3D; 2)\n                &#123;\n                    &#x2F;&#x2F; 降序排列，如是指定下标的值 小于 遍历出的最大值，说明指定的不是最大的，把遍历的下标赋值给变量\n                    if (worker_EmpArray[maxOrmin]-&gt;worker_ID &lt; worker_EmpArray[j]-&gt;worker_ID)\n                    &#123;\n                        maxOrmin &#x3D; j;\n                    &#125;\n                &#125;\n                else\n                &#123;\n                    cout &lt;&lt; &quot;输入正确的选择&quot; &lt;&lt; endl;\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F; 交换数据\n            if (maxOrmin !&#x3D; i)\n            &#123;\n                Worker *temp &#x3D; worker_EmpArray[i];\n                worker_EmpArray[i] &#x3D; worker_EmpArray[maxOrmin];\n                worker_EmpArray[maxOrmin] &#x3D; temp;\n            &#125;\n        &#125;\n        cout &lt;&lt; &quot;排序成功&quot; &lt;&lt; endl;\n        this-&gt;saveNewToFile();\n        this-&gt;showEmployeeInfo();\n    &#125;\n&#125;\n\n&#x2F;&#x2F; 7.清空所有文档\nvoid WorkerManager::toEmptyFile()\n&#123;\n    if (this-&gt;isFileEmpty)\n    &#123;\n        cout &lt;&lt; &quot;职工文件不存在或记录为空&quot; &lt;&lt; endl;\n        system(&quot;pause&quot;);\n        system(&quot;cls&quot;);\n    &#125;\n    else\n    &#123;\n        int switchNum &#x3D; 0;\n        cout &lt;&lt; &quot;确认清空文件_1.确认_2.取消&gt;&gt; &quot;;\n        cin &gt;&gt; switchNum;\n\n        if (switchNum &#x3D;&#x3D; 1)\n        &#123;\n            &#x2F;&#x2F; 打开模式 ios::trunc 如果存在文件 删除后 重新生成\n            ofstream ofs(WORKER_FILENAME, ios::trunc);\n            ofs.close();\n\n            &#x2F;&#x2F; 判断内存中堆区的是否存在 存在需要释放\n            if (this-&gt;worker_EmpArray !&#x3D; nullptr)\n            &#123;\n                for (int i &#x3D; 0; i &lt; this-&gt;worker_EmpNum; i++)\n                &#123;\n                    if (this-&gt;worker_EmpArray[i] !&#x3D; nullptr)\n                    &#123;\n                        delete this-&gt;worker_EmpArray[i];\n                    &#125;\n                &#125;\n                this-&gt;worker_EmpNum &#x3D; 0;\n                delete[] worker_EmpArray;\n                this-&gt;worker_EmpArray &#x3D; nullptr;\n                this-&gt;isFileEmpty &#x3D; true;\n            &#125;\n            cout &lt;&lt; &quot;职工文件清空完成&quot; &lt;&lt; endl;\n            this-&gt;isIDExist &#x3D; false;\n        &#125;\n        else if (switchNum &#x3D;&#x3D; 2)\n        &#123;\n            cout &lt;&lt; &quot;已取消清空职工文件&quot; &lt;&lt; endl;\n\n        &#125;\n        else\n        &#123;\n            cout &lt;&lt; &quot;输入正确的选择&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n    system(&quot;pause&quot;);\n    system(&quot;cls&quot;);\n&#125;</code></pre></li>\n</ul>\n</li>\n<li><p>CMakeList.txt</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">cmake_minimum_required(VERSION 3.19)\nproject(StaffManagementSystem)\n\nset(CMAKE_CXX_STANDARD 14)\n\nadd_executable(StaffManagementSystem\n        Main&#x2F;StaffManagerSystem_Main.cpp\n        Header&#x2F;workerManager.h Header&#x2F;worker.h Header&#x2F;employee.h Header&#x2F;manager.h Header&#x2F;boss.h\n        Source&#x2F;workerManager.cpp Source&#x2F;employee.cpp Source&#x2F;manager.cpp Source&#x2F;boss.cpp\n        )</code></pre></li>\n</ul>\n</li>\n</ul>\n","text":"C++_职工管理系统1. 管理系统需求系统需求： 职工管理系统可以用来管理公司内所有员工的信息 公司职工分三类：普通员工，经理，老板； 显示员工信息：显示职工编号，职工姓名，职工岗位 职责： 普通员工职责：完成经理的任务 经理职责：完成老板的任务 老板：管理所有事务 管理系统需要...","link":"","photos":[],"count_time":{"symbolsCount":"74k","symbolsTime":"1:07"},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">C++_职工管理系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">1. 管理系统需求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B1%BB\"><span class=\"toc-text\">2. 创建管理类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2.1 创建文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B1%BB%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2.2 创建管理类文件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%8F%9C%E5%8D%95%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">3. 菜单功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E6%B7%BB%E5%8A%A0%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.1 添加成员函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E8%8F%9C%E5%8D%95%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">3.2 菜单功能实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E6%B5%8B%E8%AF%95%E8%8F%9C%E5%8D%95%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">3.3 测试菜单功能</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%80%80%E5%87%BA%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">4. 退出功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E6%8F%90%E4%BE%9B%E8%8F%9C%E5%8D%95%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">4.1 提供菜单功能接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E5%AE%9E%E7%8E%B0%E9%80%80%E5%87%BA%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">4.2 实现退出功能</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%88%9B%E5%BB%BA%E8%81%8C%E5%B7%A5%E7%B1%BB\"><span class=\"toc-text\">5. 创建职工类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-%E5%88%9B%E5%BB%BA%E8%81%8C%E5%B7%A5%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">5.1 创建职工抽象类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-%E5%88%9B%E5%BB%BA%E6%99%AE%E9%80%9A%E5%91%98%E5%B7%A5%E7%B1%BB\"><span class=\"toc-text\">5.2 创建普通员工类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-%E5%88%9B%E5%BB%BA%E7%BB%8F%E7%90%86%E7%B1%BB\"><span class=\"toc-text\">5.3 创建经理类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-4-%E5%88%9B%E5%BB%BA%E8%80%81%E6%9D%BF%E7%B1%BB\"><span class=\"toc-text\">5.4 创建老板类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-5-%E6%B5%8B%E8%AF%95%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">5.5 测试多态</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%B7%BB%E5%8A%A0%E8%81%8C%E5%B7%A5\"><span class=\"toc-text\">6. 添加职工</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90\"><span class=\"toc-text\">6.1 功能分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">6.2 功能实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-%E6%B5%8B%E8%AF%95%E6%B7%BB%E5%8A%A0\"><span class=\"toc-text\">6.3 测试添加</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-4-%E8%A1%A5%E5%85%85%EF%BC%9A%E8%81%8C%E5%B7%A5ID%E5%94%AF%E4%B8%80%E6%80%A7\"><span class=\"toc-text\">6.4 补充：职工ID唯一性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%96%87%E4%BB%B6%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">7. 文件交互</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-%E5%86%99%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">7.1 写文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-1-1-%E8%AE%BE%E5%AE%9A%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">7.1.1 设定文件路径</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-1-2-%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">7.1.2 成员函数声明</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-1-3-%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">7.1.3 保存文件实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-1-4-%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6%E6%B5%8B%E9%80%9F\"><span class=\"toc-text\">7.1.4 保存文件测速</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-%E8%AF%BB%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">7.2 读文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-2-1-%E6%96%87%E4%BB%B6%E6%9C%AA%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">7.2.1 文件未创建</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-2-2-%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%B8%94%E6%95%B0%E6%8D%AE%E4%B8%BA%E7%A9%BA\"><span class=\"toc-text\">7.2.2 文件存在且数据为空</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-2-3-%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%B8%94%E6%9C%89%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">7.2.3 文件存在且有数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#7-2-3-1-%E8%8E%B7%E5%8F%96%E8%AE%B0%E5%BD%95%E7%9A%84%E8%81%8C%E5%B7%A5%E4%BA%BA%E6%95%B0\"><span class=\"toc-text\">7.2.3.1 获取记录的职工人数</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#7-2-3-2-%E5%88%9D%E5%A7%8B%E5%8C%96%E8%81%8C%E5%B7%A5%E4%BF%A1%E6%81%AF%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">7.2.3.2 初始化职工信息数组</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%98%BE%E7%A4%BA%E8%81%8C%E5%B7%A5\"><span class=\"toc-text\">8. 显示职工</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-%E6%98%BE%E7%A4%BA%E8%81%8C%E5%B7%A5%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">8.1 显示职工函数声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-%E6%98%BE%E7%A4%BA%E8%81%8C%E5%B7%A5%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">8.2 显示职工函数实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E5%88%A0%E9%99%A4%E8%81%8C%E5%B7%A5\"><span class=\"toc-text\">9. 删除职工</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-1-%E8%81%8C%E5%B7%A5%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">9.1 职工是否存在函数声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-2-%E8%81%8C%E5%B7%A5%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">9.2 职工是否存在函数实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-3-%E5%88%A0%E9%99%A4%E8%81%8C%E5%B7%A5%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">9.3 删除职工函数声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-4-%E5%88%A0%E9%99%A4%E8%81%8C%E5%B7%A5%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">9.4 删除职工函数实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E4%BF%AE%E6%94%B9%E8%81%8C%E5%B7%A5\"><span class=\"toc-text\">10. 修改职工</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-1-%E4%BF%AE%E6%94%B9%E8%81%8C%E5%B7%A5%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">10.1 修改职工函数声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-2-%E4%BF%AE%E6%94%B9%E8%81%8C%E5%B7%A5%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">10.2 修改职工函数实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E6%9F%A5%E6%89%BE%E8%81%8C%E5%B7%A5\"><span class=\"toc-text\">11. 查找职工</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-1-%E6%9F%A5%E6%89%BE%E8%81%8C%E5%B7%A5%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">11.1 查找职工函数声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-2-%E6%9F%A5%E6%89%BE%E8%81%8C%E5%B7%A5%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">11.2 查找职工函数实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E6%8E%92%E5%BA%8F%E8%81%8C%E5%B7%A5\"><span class=\"toc-text\">12. 排序职工</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-1-%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">12.1 排序函数声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">12.2 排序函数实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E6%B8%85%E7%A9%BA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">13. 清空文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-1-%E6%B8%85%E7%A9%BA%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">13.1 清空文件函数声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-2-%E6%B8%85%E7%A9%BA%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">13.2 清空文件函数实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-3-%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E4%BF%AE%E6%94%B9%E5%AE%8C%E5%96%84\"><span class=\"toc-text\">13.3 析构函数修改完善</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#13-4-%E6%B8%85%E7%A9%BA%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">13.4 清空文件函数测试</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-%E5%90%8E%E6%9C%9Fbug%E4%BF%AE%E5%A4%8D\"><span class=\"toc-text\">14. 后期bug修复</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#14-1-%E8%81%8C%E5%B7%A5%E7%BC%96%E5%8F%B7%E5%AD%98%E5%9C%A8%E5%88%A4%E6%96%AD%E5%A4%B1%E8%AF%AF\"><span class=\"toc-text\">14.1 职工编号存在判断失误</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E6%BA%90%E7%A0%81%E6%95%B4%E7%90%86-Clion\"><span class=\"toc-text\">15. 源码整理-Clion</span></a></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CSS","uid":"a7d67895004888252f8010c8618442cf","slug":"2_CSS_02","date":"2022-10-06T07:28:25.928Z","updated":"2022-10-07T12:59:25.606Z","comments":true,"path":"api/articles/2_CSS_02.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (10).webp","text":"CSS1.类型属性用于定义网页中文本的字体、大小、颜色、样式及文本链接的修饰效果 .cs2&#123; font-family:&quot;黑体&quot;; (字体) font-size:14px; (字号大小) font-style:italic; (文字样式：normal,...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"HTML/CSS","slug":"HTML-CSS","count":2,"path":"api/tags/HTML-CSS.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"C++_通讯录管理系统","uid":"ece0e381639ba808e0c15b18566061ec","slug":"1_C++_通讯录管理系统_02","date":"2022-10-06T07:28:25.923Z","updated":"2022-10-07T12:53:59.150Z","comments":true,"path":"api/articles/1_C++_通讯录管理系统_02.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (2).webp","text":"C++_通讯录管理系统1. 系统需求 添加联系人：向通讯录中添加联系人，联系人信息（姓名，性别，年龄，联系电话，家庭住址），最多记录1000人 显示联系人：显示通讯录中所有联系人信息 删除联系人：按照姓名进行删除指定联系人 查找联系人：按照姓名查找指定联系人信息 修改联系人：按照...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}