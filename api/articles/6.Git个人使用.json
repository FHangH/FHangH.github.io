{"title":"Git个人使用","uid":"9bb1210f38db3e1f819e50bcd1059252","slug":"6.Git个人使用","date":"2022-10-06T07:28:25.946Z","updated":"2021-04-21T08:57:08.723Z","comments":true,"path":"api/articles/6.Git个人使用.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN/Post_Img_mini/postImg_12.jpg","content":"<h1 id=\"Git个人使用\"><a href=\"#Git个人使用\" class=\"headerlink\" title=\"Git个人使用\"></a>Git个人使用</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 2021-02-19：苦于还是不记得git bash的使用，每次使用都要到网上找一会，太麻烦了，决定写成博客，记录一下个人的使用总结\n&#x2F;&#x2F; 开头从最开始的顺序来记录\n-----------------------------------------------------------------------------------------------------------------------\n&#x2F;&#x2F; 2021-02-20：又添加了 clone 的方法，修改完善了之前的内容</code></pre>\n\n<h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><p>简单带过：</p>\n<ul>\n<li>注册Github账号</li>\n<li>下载Git，并安装</li>\n</ul>\n<h3 id=\"2-本地账号\"><a href=\"#2-本地账号\" class=\"headerlink\" title=\"2. 本地账号\"></a>2. 本地账号</h3><ul>\n<li>这一步是方便以后使用git时，跳过账号信息验证</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; &quot;&quot; 里填 GitHub 账号的用户名\n$ git config --global user.name &quot;&quot;\n\n&#x2F;&#x2F; &quot;&quot; 里填 GitHub 账号的邮箱\n$ git config --global user.email &quot;&quot;\n\n&#x2F;&#x2F; 查看本地的用户信息配置\n$ git config --list\n&#x2F;&#x2F; 结果大概如下\nPS C:\\Windows\\System32&gt; git config --list\ndiff.astextplain.textconv&#x3D;astextplain\nfilter.lfs.clean&#x3D;git-lfs clean -- %f\nfilter.lfs.smudge&#x3D;git-lfs smudge -- %f\nfilter.lfs.process&#x3D;git-lfs filter-process\nfilter.lfs.required&#x3D;true\nhttp.sslbackend&#x3D;openssl\nhttp.sslcainfo&#x3D;E:&#x2F;Git&#x2F;Git&#x2F;mingw64&#x2F;ssl&#x2F;certs&#x2F;ca-bundle.crt\ncore.autocrlf&#x3D;true\ncore.fscache&#x3D;true\ncore.symlinks&#x3D;false\npull.rebase&#x3D;false\ncredential.helper&#x3D;manager\nuser.email&#x3D;752972182@qq.com\nuser.name&#x3D;FHangH</code></pre>\n\n\n\n<h3 id=\"3-Public-SSH-Key\"><a href=\"#3-Public-SSH-Key\" class=\"headerlink\" title=\"3 Public SSH Key\"></a>3 Public SSH Key</h3><ul>\n<li>在 Github 中添加一个 Public SSH key 同时在本地也要有 Public SSH Key 的相关文件</li>\n<li>git 上传和下载过程中需要密钥的验证，以保证安全性</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; 首先验证是否本地存在 SSH Key\n$ ssh -T git@github.com\n\n&#x2F;&#x2F; 如果存在，大概结果如下（可以直接跳过生成本地 SSH Key 的步骤）\nPS C:\\Windows\\System32&gt; ssh -T git@github.com\nHi FHangH! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; 查看本地是否已经存在 Public SSH Key\n$ cd ~&#x2F;.ssh</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; 查看文件列表\n$ ls\n\n&#x2F;&#x2F; 此时两种情况，一种是什么都没有\n&#x2F;&#x2F; 另一种是，差不多是存在以下文件，至少是有 id_rsa , id_rsa.pub 两个文件才行\n\nPS C:\\Users\\Admin\\.ssh&gt; ls\n    Directory: C:\\Users\\Admin\\.ssh\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a---           2021&#x2F;2&#x2F;17     9:18           2610 id_rsa\n-a---           2021&#x2F;2&#x2F;17     9:18            575 id_rsa.pub\n-a---           2021&#x2F;2&#x2F;19    16:05           1385 known_hosts</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; 如果有，我们需要 id_rsa.pub 的内的key\n$ cat id_rsa.pub\n\n&#x2F;&#x2F; 出现类似一下内容（全文复制，后面要用）\nPS C:\\Users\\Admin\\.ssh&gt; cat .\\id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDdrPvLeNqhzEgVU8Ep&#x2F;9LiDvGpooO6UD8Tq5DM4CJzfiS+I95KjwwhxpQ7Et0pgfMt6ikRBXE1phgxoaK+tArSLcAOr1k8CgHazzB7D2j2X6v4x0Xmescq4dzB+R+6dtYGWhn5qwFjn2KljjYGVwitwdjyuqIqzS3vEpJaIpzI8nOnbGPR42a6t9FmBg3KhYyrcT5Z7DJgQvF1RkXmjeCjtHOOWL7xdDjI8iRwF3Kkiz78ovv2jr8MB2unrgPTNQ56ZPSi34gAGIDgt59VVM14P6GRxvRvtCG644QOEH&#x2F;4woOmADi28BD3Gkj2+1Z1tXTaj1WPOvyEorHAXVS4L9fDScvaRK3el1LKk1hX1&#x2F;dq3+ozN+Jpm8KWVtfLGfKxmKgQSJFX6qH49FuCBcD0Rpk3WnJInqz5+HLUlGqQypf0oTjQFpa+vY83&#x2F;Fa3WKpqAuJM136+3mxeZFv+YCJv7eql2FzNhUAMG6Zur4&#x2F;Kx5uMP1QFl0y9JYmH7WebS9MMzmE&#x3D; Admin@DESKTOP-EBFV026</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; 如果没有，需要生成一个\n&#x2F;&#x2F; &quot;&quot; 内填写 Github 账号的注册邮箱\n$ ssh-keygen -t rsa -C &quot;&quot;\n\n&#x2F;&#x2F; 接下的步骤大概就是确认，填写密码之类的，回车键跳过（简单点）</code></pre>\n\n\n\n<h3 id=\"4-Github添加Key\"><a href=\"#4-Github添加Key\" class=\"headerlink\" title=\"4. Github添加Key\"></a>4. Github添加Key</h3><p>需要在Github账户内，将本地生成的 SSH key 添加进去，Git上传或下载时，才不会出现错误</p>\n<ul>\n<li>进入Github用户主页</li>\n<li>用户头像边上的倒三角</li>\n<li>Settings 进入设置页面</li>\n<li>在侧边栏内找到 SSH and GPG Keys</li>\n<li>在SSH Keys 内找到 New SSH Key</li>\n<li>跳转页面后，在Title页面里填写 Public SSH Key 名称（随意）</li>\n<li>在Key的文本框内，粘贴进之前在 复制的 id_rsa.pub 文件的内容</li>\n<li>Add SSH Key</li>\n</ul>\n<h3 id=\"5-Git仓库\"><a href=\"#5-Git仓库\" class=\"headerlink\" title=\"5. Git仓库\"></a>5. Git仓库</h3><ul>\n<li>创建 Git 仓库 （这个也跳过，简单的创建一个公开的仓库）</li>\n<li>创建后，可以简单记录一下 SSH 的链接，比如：<a href=\"mailto:&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;\">&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;</a>:FHangH&#x2F;FHangBlogCDN_02.git</li>\n</ul>\n<h3 id=\"6-上传本地到Git\"><a href=\"#6-上传本地到Git\" class=\"headerlink\" title=\"6. 上传本地到Git\"></a>6. 上传本地到Git</h3><ul>\n<li>首先是进入要上传的项目文件夹内</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; 初始化本地仓库\n$ git init\n\n&#x2F;&#x2F; 将文件全部加入到缓存中\n$ git add .\n&#x2F;&#x2F; 或者在 add 后面跟上指定的文件或某种类型的文件\n$ git add \n\n&#x2F;&#x2F; 提交操作记录，&quot;&quot; 内随意填\n$ git commit -m &quot;&quot;\n\n&#x2F;&#x2F; 远程添加到源中，也就是git仓库\n$ git remote add origin git@github.com:用户名&#x2F;仓库名.git\n&#x2F;&#x2F; 有时候出现失败情况，就用下面这条命令，然后再重复上面的命令\n$ git remote rm origin\n\n&#x2F;&#x2F; 最后，将本地缓存中的文件上传的远程的git仓库中（有时候网络会抽风）\n$ git push origin master</code></pre>\n\n\n\n<h3 id=\"7-从远程Git仓库拉到本地\"><a href=\"#7-从远程Git仓库拉到本地\" class=\"headerlink\" title=\"7. 从远程Git仓库拉到本地\"></a>7. 从远程Git仓库拉到本地</h3><ul>\n<li>本地创建一个空的项目文件夹，在文件夹内进行</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; 多种 clone 的方法\n$ git clone http[s]:&#x2F;&#x2F;example.com&#x2F;path&#x2F;to&#x2F;repo.git\n$ git clone http:&#x2F;&#x2F;git.oschina.net&#x2F;yiibai&#x2F;sample.git\n$ git clone ssh:&#x2F;&#x2F;example.com&#x2F;path&#x2F;to&#x2F;repo.git\n$ git clone git:&#x2F;&#x2F;example.com&#x2F;path&#x2F;to&#x2F;repo.git &#x2F;&#x2F; 这个速度最快\n$ git clone &#x2F;opt&#x2F;git&#x2F;project.git \n$ git clone file:&#x2F;&#x2F;&#x2F;opt&#x2F;git&#x2F;project.git\n$ git clone ftp[s]:&#x2F;&#x2F;example.com&#x2F;path&#x2F;to&#x2F;repo.git\n$ git clone rsync:&#x2F;&#x2F;example.com&#x2F;path&#x2F;to&#x2F;repo.git</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; 此处以 ssh 为例\n$ git clone git@github.com:FHangH&#x2F;Cpp-Learn-AddressBook_Clion.git\n\n&#x2F;&#x2F;运行结果（这样就 clone Git仓库到本地了）\nPS C:\\Users\\Admin\\Desktop\\Test&gt; git clone git@github.com:FHangH&#x2F;Cpp-Learn-AddressBook_Clion.git\nCloning into &#39;Cpp-Learn-AddressBook_Clion&#39;...\nremote: Enumerating objects: 65, done.\nReceiving objects:  10% (7&#x2F;65) (65&#x2F;65), done.\nremote: Compressing objects: 100% (55&#x2F;55), done.\nremote: Total 65 (delta 7), reused 65 (delta 7), pack-reused 0\nReceiving objects: 100% (65&#x2F;65), 739.90 KiB | 127.00 KiB&#x2F;s, done.\nResolving deltas: 100% (7&#x2F;7), done.</code></pre>\n\n\n\n<h3 id=\"8-gitignore文件\"><a href=\"#8-gitignore文件\" class=\"headerlink\" title=\"8. gitignore文件\"></a>8. gitignore文件</h3><ul>\n<li>用来上传本地项目到远程仓库时，过滤掉一些不需要上传的文件</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F; 生成 .gitignore 文件\n$ touch .gitignore\n\n&#x2F;&#x2F; powershell 里生成 .gitignore 的方法\n$ new-item .gitignore</code></pre>\n\n<ul>\n<li><p>提供一个现成的 .gitignore 文件的开源库链接</p>\n</li>\n<li></li>\n<li><p>使用方法：</p>\n<ol>\n<li>确定自己上传的项目类型</li>\n<li>在上述开源链接中找到对应项目类型的 .gitignore 文件</li>\n<li>复制里面的内容</li>\n<li>粘贴到自己项目中创建的 .gitignore 文件中，保存</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"8-1-个人常用的-gitignore-文件\"><a href=\"#8-1-个人常用的-gitignore-文件\" class=\"headerlink\" title=\"8.1 个人常用的 .gitignore 文件\"></a>8.1 个人常用的 .gitignore 文件</h5><h6 id=\"8-1-1-UnrealEnigne-gitignore\"><a href=\"#8-1-1-UnrealEnigne-gitignore\" class=\"headerlink\" title=\"8.1.1 UnrealEnigne.gitignore\"></a>8.1.1 <em>UnrealEnigne.gitignore</em></h6><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Visual Studio 2015 user specific files\n.vs&#x2F;\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n*.ipa\n\n# These project files can be generated by the engine\n*.xcodeproj\n*.xcworkspace\n*.sln\n*.suo\n*.opensdf\n*.sdf\n*.VC.db\n*.VC.opendb\n\n# Precompiled Assets\nSourceArt&#x2F;**&#x2F;*.png\nSourceArt&#x2F;**&#x2F;*.tga\n\n# Binary Files\nBinaries&#x2F;*\nPlugins&#x2F;*&#x2F;Binaries&#x2F;*\n\n# Builds\nBuild&#x2F;*\n\n# Whitelist PakBlacklist-&lt;BuildConfiguration&gt;.txt files\n!Build&#x2F;*&#x2F;\nBuild&#x2F;*&#x2F;**\n!Build&#x2F;*&#x2F;PakBlacklist*.txt\n\n# Don&#39;t ignore icon files in Build\n!Build&#x2F;**&#x2F;*.ico\n\n# Built data for maps\n*_BuiltData.uasset\n\n# Configuration files generated by the Editor\nSaved&#x2F;*\n\n# Compiled source files for the engine to use\nIntermediate&#x2F;*\nPlugins&#x2F;*&#x2F;Intermediate&#x2F;*\n\n# Cache files for the editor to use\nDerivedDataCache&#x2F;*</code></pre>\n\n\n\n<h6 id=\"8-1-2-Unity-gitignore\"><a href=\"#8-1-2-Unity-gitignore\" class=\"headerlink\" title=\"8.1.2 Unity.gitignore\"></a>8.1.2 <em>Unity.gitignore</em></h6><pre class=\"line-numbers language-none\"><code class=\"language-none\"># This .gitignore file should be placed at the root of your Unity project directory\n#\n# Get latest from https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;gitignore&#x2F;blob&#x2F;master&#x2F;Unity.gitignore\n#\n&#x2F;[Ll]ibrary&#x2F;\n&#x2F;[Tt]emp&#x2F;\n&#x2F;[Oo]bj&#x2F;\n&#x2F;[Bb]uild&#x2F;\n&#x2F;[Bb]uilds&#x2F;\n&#x2F;[Ll]ogs&#x2F;\n&#x2F;[Uu]ser[Ss]ettings&#x2F;\n\n# MemoryCaptures can get excessive in size.\n# They also could contain extremely sensitive data\n&#x2F;[Mm]emoryCaptures&#x2F;\n\n# Asset meta data should only be ignored when the corresponding asset is also ignored\n!&#x2F;[Aa]ssets&#x2F;**&#x2F;*.meta\n\n# Uncomment this line if you wish to ignore the asset store tools plugin\n# &#x2F;[Aa]ssets&#x2F;AssetStoreTools*\n\n# Autogenerated Jetbrains Rider plugin\n&#x2F;[Aa]ssets&#x2F;Plugins&#x2F;Editor&#x2F;JetBrains*\n\n# Visual Studio cache directory\n.vs&#x2F;\n\n# Gradle cache directory\n.gradle&#x2F;\n\n# Autogenerated VS&#x2F;MD&#x2F;Consulo solution and project files\nExportedObj&#x2F;\n.consulo&#x2F;\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n*.mdb\n*.opendb\n*.VC.db\n\n# Unity3D generated meta files\n*.pidb.meta\n*.pdb.meta\n*.mdb.meta\n\n# Unity3D generated file on crash reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.aab\n*.unitypackage\n\n# Crashlytics generated file\ncrashlytics-build.properties\n\n# Packed Addressables\n&#x2F;[Aa]ssets&#x2F;[Aa]ddressable[Aa]ssets[Dd]ata&#x2F;*&#x2F;*.bin*\n\n# Temporary auto-generated Android Assets\n&#x2F;[Aa]ssets&#x2F;[Ss]treamingAssets&#x2F;aa.meta\n&#x2F;[Aa]ssets&#x2F;[Ss]treamingAssets&#x2F;aa&#x2F;*</code></pre>\n\n\n\n<h6 id=\"8-1-3-VisualStudio-gitignore\"><a href=\"#8-1-3-VisualStudio-gitignore\" class=\"headerlink\" title=\"8.1.3 VisualStudio.gitignore\"></a>8.1.3 <em>VisualStudio.gitignore</em></h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;gitignore&#x2F;blob&#x2F;master&#x2F;VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop&#x2F;Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug&#x2F;\n[Dd]ebugPublic&#x2F;\n[Rr]elease&#x2F;\n[Rr]eleases&#x2F;\nx64&#x2F;\nx86&#x2F;\n[Ww][Ii][Nn]32&#x2F;\n[Aa][Rr][Mm]&#x2F;\n[Aa][Rr][Mm]64&#x2F;\nbld&#x2F;\n[Bb]in&#x2F;\n[Oo]bj&#x2F;\n[Ll]og&#x2F;\n[Ll]ogs&#x2F;\n\n# Visual Studio 2015&#x2F;2017 cache&#x2F;options directory\n.vs&#x2F;\n# Uncomment if you have tasks that create the project&#39;s static files in wwwroot\n#wwwroot&#x2F;\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files&#x2F;\n\n# MSTest test Results\n[Tt]est[Rr]esult*&#x2F;\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS&#x2F;\n[Rr]eleasePS&#x2F;\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts&#x2F;\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts&#x2F;\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch&#x2F;\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf&#x2F;\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*&#x2F;\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover&#x2F;*\n!.axoCover&#x2F;settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*[.json, .xml, .info]\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net&#x2F;\n\n# Web workbench (sass)\n.sass-cache&#x2F;\n\n# Installshield output folder\n[Ee]xpress&#x2F;\n\n# DocProject is a documentation generator add-in\nDocProject&#x2F;buildhelp&#x2F;\nDocProject&#x2F;Help&#x2F;*.HxT\nDocProject&#x2F;Help&#x2F;*.HxC\nDocProject&#x2F;Help&#x2F;*.hhc\nDocProject&#x2F;Help&#x2F;*.hhk\nDocProject&#x2F;Help&#x2F;*.hhp\nDocProject&#x2F;Help&#x2F;Html2\nDocProject&#x2F;Help&#x2F;html\n\n# Click-Once directory\npublish&#x2F;\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts&#x2F;\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**&#x2F;[Pp]ackages&#x2F;*\n# except build&#x2F;, which is used as an MSBuild target.\n!**&#x2F;[Pp]ackages&#x2F;build&#x2F;\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**&#x2F;[Pp]ackages&#x2F;repositories.config\n# NuGet v3&#39;s project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx&#x2F;\n*.build.csdef\n\n# Microsoft Azure Emulator\necf&#x2F;\nrcf&#x2F;\n\n# Windows Store app package directories and files\nAppPackages&#x2F;\nBundleArtifacts&#x2F;\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache&#x2F;\n\n# Others\nClientBin&#x2F;\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;gitignore&#x2F;pull&#x2F;2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;gitignore&#x2F;pull&#x2F;1529#issuecomment-104372622)\n#bower_components&#x2F;\n\n# RIA&#x2F;Silverlight projects\nGenerated_Code&#x2F;\n\n# Backup &amp; report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files&#x2F;\nBackup*&#x2F;\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup&#x2F;\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies&#x2F;\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules&#x2F;\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**&#x2F;*.HTMLClient&#x2F;GeneratedArtifacts\n**&#x2F;*.DesktopClient&#x2F;GeneratedArtifacts\n**&#x2F;*.DesktopClient&#x2F;ModelManifest.xml\n**&#x2F;*.Server&#x2F;GeneratedArtifacts\n**&#x2F;*.Server&#x2F;ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket&#x2F;paket.exe\npaket-files&#x2F;\n\n# FAKE - F# Make\n.fake&#x2F;\n\n# CodeRush personal settings\n.cr&#x2F;personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__&#x2F;\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools&#x2F;**\n# !tools&#x2F;packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik&#39;s JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover&#x2F;\n\n# Azure Stream Analytics local run output\nASALocalRun&#x2F;\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor&#x2F;\n\n# Local History for Visual Studio\n.localhistory&#x2F;\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup&#x2F;\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide&#x2F;\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd</code></pre>\n\n\n\n<h6 id=\"8-1-4-C-gitignore\"><a href=\"#8-1-4-C-gitignore\" class=\"headerlink\" title=\"8.1.4 C++.gitignore\"></a>8.1.4 <em>C++.gitignore</em></h6><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app</code></pre>\n\n\n\n<h6 id=\"8-1-5-C-gitignore\"><a href=\"#8-1-5-C-gitignore\" class=\"headerlink\" title=\"8.1.5 C.gitignore\"></a>8.1.5 <em>C.gitignore</em></h6><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM&#x2F;\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions&#x2F;\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf</code></pre>\n\n\n\n<h6 id=\"8-1-6-CMake-gitignore\"><a href=\"#8-1-6-CMake-gitignore\" class=\"headerlink\" title=\"8.1.6 CMake.gitignore\"></a>8.1.6 <em>CMake.gitignore</em></h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">CMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n_deps</code></pre>\n\n","text":"Git个人使用&#x2F;&#x2F; 2021-02-19：苦于还是不记得git bash的使用，每次使用都要到网上找一会，太麻烦了，决定写成博客，记录一下个人的使用总结 &#x2F;&#x2F; 开头从最开始的顺序来记录 ---------------------------...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Git%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Git个人使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">1. 准备工作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%9C%AC%E5%9C%B0%E8%B4%A6%E5%8F%B7\"><span class=\"toc-text\">2. 本地账号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Public-SSH-Key\"><span class=\"toc-text\">3 Public SSH Key</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Github%E6%B7%BB%E5%8A%A0Key\"><span class=\"toc-text\">4. Github添加Key</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Git%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">5. Git仓库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%88%B0Git\"><span class=\"toc-text\">6. 上传本地到Git</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%BB%8E%E8%BF%9C%E7%A8%8BGit%E4%BB%93%E5%BA%93%E6%8B%89%E5%88%B0%E6%9C%AC%E5%9C%B0\"><span class=\"toc-text\">7. 从远程Git仓库拉到本地</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-gitignore%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">8. gitignore文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-1-%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E7%9A%84-gitignore-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">8.1 个人常用的 .gitignore 文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#8-1-1-UnrealEnigne-gitignore\"><span class=\"toc-text\">8.1.1 UnrealEnigne.gitignore</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#8-1-2-Unity-gitignore\"><span class=\"toc-text\">8.1.2 Unity.gitignore</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#8-1-3-VisualStudio-gitignore\"><span class=\"toc-text\">8.1.3 VisualStudio.gitignore</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#8-1-4-C-gitignore\"><span class=\"toc-text\">8.1.4 C++.gitignore</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#8-1-5-C-gitignore\"><span class=\"toc-text\">8.1.5 C.gitignore</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#8-1-6-CMake-gitignore\"><span class=\"toc-text\">8.1.6 CMake.gitignore</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"https://twitter.com/nUCFA2659We0pmu","stackoverflow":"https://stackoverflow.com/users/20173508/user20173508","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"UE4 MySQL插件开发","uid":"ab5a123ef13f06a2127802a636203336","slug":"7_MySQL插件开发_02","date":"2022-10-06T07:28:25.948Z","updated":"2022-05-19T04:29:42.988Z","comments":true,"path":"api/articles/7_MySQL插件开发_02.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN/Post_Img_mini/postImg_24.jpg","text":"UE4 MySQL插件开发1. 项目简介 个人UrealEngine MySQL Plugin开发流程 方便UnrealEngine项目链接和操作MySQL数据库 2. 项目环境IDE -&gt; JetBrains Rider 2022.1 EAP7 内部版本号 221.490...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"https://twitter.com/nUCFA2659We0pmu","stackoverflow":"https://stackoverflow.com/users/20173508/user20173508","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"C语言基础","uid":"fa71f19cd12c01c160b7bc498a3984ba","slug":"5.C语言基础_01","date":"2022-10-06T07:28:25.944Z","updated":"2021-04-05T07:22:51.252Z","comments":true,"path":"api/articles/5.C语言基础_01.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN/Post_Img_mini/postImg_11.jpg","text":"C语言基础1. 编译预处理命令三种： 宏定义 文件包含 条件编译 1.1 宏定义宏是根据一系列定义的规则替换一段文本的一种模式 格式：#define 标识符 字符串 标识符：宏名，大写书写（区别与普通变量名） 字符串：宏体，赋值给标识符（编写时，直接写标识符，编译预处理时替换成字...","link":"","photos":[],"count_time":{"symbolsCount":"54k","symbolsTime":"49 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"https://twitter.com/nUCFA2659We0pmu","stackoverflow":"https://stackoverflow.com/users/20173508/user20173508","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}