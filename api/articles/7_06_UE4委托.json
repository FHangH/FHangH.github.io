{"title":"UE4 委托","uid":"97e60817d770107d3926456a0105594d","slug":"7_06_UE4委托","date":"2022-10-06T07:28:25.965Z","updated":"2023-01-10T01:10:19.442Z","comments":true,"path":"api/articles/7_06_UE4委托.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (22).webp","content":"<h1 id=\"UE4-委托\"><a href=\"#UE4-委托\" class=\"headerlink\" title=\"UE4 委托\"></a>UE4 委托</h1><p>[toc]</p>\n<h3 id=\"1-委托定义\"><a href=\"#1-委托定义\" class=\"headerlink\" title=\"1. 委托定义\"></a>1. 委托定义</h3><p>介绍：在C++对象上引用和执行成员函数的数据类型</p>\n<p>定义：</p>\n<ul>\n<li>是一种泛型但类型安全的方式，可在C++对象上调用成员函数</li>\n<li>可使用委托动态绑定到任意对象的成员函数，之后在该对象上调用函数，即使调用程序不知对象类型也可进行操作</li>\n<li>复制委托对象很安全。你也可以利用值传递委托，但这样操作需要在堆上分配内存，因此通常并不推荐</li>\n<li>尽量通过引用传递委托</li>\n</ul>\n<p>种类：</p>\n<ol>\n<li>单点委托</li>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Delegates/Multicast\">组播委托</a><ul>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Delegates/Events\">事件</a></li>\n</ul>\n</li>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Delegates/Dynamic\">动态(UObject, serializable)</a></li>\n</ol>\n<h3 id=\"2-基本使用\"><a href=\"#2-基本使用\" class=\"headerlink\" title=\"2. 基本使用\"></a>2. 基本使用</h3><h4 id=\"2-1-声明委托\"><a href=\"#2-1-声明委托\" class=\"headerlink\" title=\"2.1 声明委托\"></a>2.1 声明委托</h4><p>前提：</p>\n<ul>\n<li>根据与委托相绑定的函数（或多个函数）的函数签名来选择宏</li>\n<li>每个宏都为新的委托类型名称、函数返回类型（如果不是 <code>void</code> 函数）及其参数提供了参数</li>\n</ul>\n<p>提供的函数签名：</p>\n<ul>\n<li>返回一个值的函数</li>\n<li>声明为 <code>const</code> 函数</li>\n<li>最多4个”载荷”变量</li>\n<li>最多9个函数参数（可自定义）</li>\n</ul>\n<p>参照表格查找用于声明委托的生命宏：</p>\n<table>\n<thead>\n<tr>\n<th>函数签名</th>\n<th>声明宏</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void Function()</code></td>\n<td><code>DECLARE_DELEGATE(DelegateName)</code></td>\n</tr>\n<tr>\n<td><code>void Function(Param1)</code></td>\n<td><code>DECLARE_DELEGATE_OneParam(DelegateName, Param1Type)</code></td>\n</tr>\n<tr>\n<td><code>void Function(Param1, Param2)</code></td>\n<td><code>DECLARE_DELEGATE_TwoParams(DelegateName, Param1Type, Param2Type)</code></td>\n</tr>\n<tr>\n<td><code>void Function(Param1, Param2, ...)</code></td>\n<td><code>DECLARE_DELEGATE_&lt;Num&gt;Params(DelegateName, Param1Type, Param2Type, ...)</code></td>\n</tr>\n<tr>\n<td><code>&lt;RetValType&gt; Function()</code></td>\n<td><code>DECLARE_DELEGATE_RetVal(RetValType, DelegateName)</code></td>\n</tr>\n<tr>\n<td><code>&lt;RetValType&gt; Function(Param1)</code></td>\n<td><code>DECLARE_DELEGATE_RetVal_OneParam(RetValType, DelegateName, Param1Type)</code></td>\n</tr>\n<tr>\n<td><code>&lt;RetValType&gt; Function(Param1, Param2)</code></td>\n<td><code>DECLARE_DELEGATE_RetVal_TwoParams(RetValType, DelegateName, Param1Type, Param2Type)</code></td>\n</tr>\n<tr>\n<td><code>&lt;RetValType&gt; Function(Param1, Param2, ...)</code></td>\n<td><code>DECLARE_DELEGATE_RetVal_&lt;Num&gt;Params(RetValType, DelegateName, Param1Type, Param2Type, ...)</code></td>\n</tr>\n</tbody></table>\n<p>注意：</p>\n<ul>\n<li><p>委托函数支持与<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/GameplayArchitecture/Functions\">UFunctions</a>的<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/GameplayArchitecture/Functions/Specifiers\">说明符</a>相同，但使用<code>UDELEGATE</code>而不是宏<code>UFUNCTION</code></p>\n</li>\n<li><p>代码<code>BlueprintAuthorityOnly</code>说明添加到<code>FInstigatedAnyDamageSignature</code>委托符中</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UDELEGATE</span>(BlueprintAuthorityOnly)</span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams</span>(FInstigatedAnyDamageSignature, <span class=\"type\">float</span>, Damage, <span class=\"type\">const</span> UDamageType*, DamageType, AActor*, DamagedActor, AActor*, DamageCauser);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>组播委托、动态委托和封装委托，上述宏的变体如下：</p>\n<ul>\n<li>DECLARE_MULTICAST_DELEGATE…</li>\n<li>DECLARE_DYNAMIC_DELEGATE…</li>\n<li>DECLARE_DYNAMIC_MULTICAST_DELEGATE…</li>\n<li>DECLARE_DYNAMIC_DELEGATE…</li>\n<li>DECLARE_DYNAMIC_MULTICAST_DELEGATE…</li>\n</ul>\n<p>委托签名声明可存在于全局范围内、命名空间内、甚至类声明内，此类声明可能不在于函数体内</p>\n<p>委托函数支持与<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/GameplayArchitecture/Functions\">UFunctions</a>相同的<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/GameplayArchitecture/Functions/Specifiers\">说明符</a>，但使用 <code>UDELEGATE</code> 宏而不是 <code>UFUNCTION</code></p>\n<h4 id=\"2-2-绑定委托\"><a href=\"#2-2-绑定委托\" class=\"headerlink\" title=\"2.2 绑定委托\"></a>2.2 绑定委托</h4><p>委托系统理解某些类型的对象，使用此类对象时将启用附加功能</p>\n<p>将委托绑定到UObject或共享指针类的成员， 委托系统可保留对该对象的弱引用，因此对象在委托下方被销毁时，可通过调用 <code>IsBound()</code> 或 <code>ExecuteIfBound()</code> 函数进行处理</p>\n<p>注意各类受支持对象的特殊绑定语法：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Bind</code></td>\n<td>绑定到现有委托对象</td>\n</tr>\n<tr>\n<td><code>BindStatic</code></td>\n<td>绑定原始C++指针全局函数委托</td>\n</tr>\n<tr>\n<td><code>BindRaw</code></td>\n<td>绑定原始C++指针委托<br />由于原始指针不使用任何类型的引用，因此在删除目标对象后调用<code>Execute</code> 或 <code>ExecuteIfBound</code> 会不安全</td>\n</tr>\n<tr>\n<td><code>BindLambda</code></td>\n<td>绑定一个函子<br />这通常用于Lambda函数</td>\n</tr>\n<tr>\n<td><code>BindSP</code></td>\n<td>绑定基于指针的共享成员函数委托<br />共享指针委托会保留对对象的弱引用<br />可使用 <code>ExecuteIfBound()</code> 进行调用</td>\n</tr>\n<tr>\n<td><code>BindUObject</code></td>\n<td>绑定 <code>UObject</code> 的成员函数委托<br /><code>UObject</code> 委托会保留对你的对象 <code>UObject</code> 的弱引用<br />可使用 <code>ExecuteIfBound()</code> 进行调用</td>\n</tr>\n<tr>\n<td><code>UnBind</code></td>\n<td>取消绑定此委托</td>\n</tr>\n</tbody></table>\n<p>参见 <code>DelegateSignatureImpl.inl</code>（位于 <code>..\\UE4\\Engine\\Source\\Runtime\\Core\\Public\\Templates\\</code>），了解此类函数的变体、参数和实现</p>\n<h4 id=\"2-3-载荷数据\"><a href=\"#2-3-载荷数据\" class=\"headerlink\" title=\"2.3 载荷数据\"></a>2.3 载荷数据</h4><p>说明：</p>\n<ul>\n<li>绑定到委托时，可同时传递载荷数据</li>\n<li>其为调用时被直接传到绑定函数的任意变量</li>\n<li>此操作是为了使代码更安全，因为有时委托可能含有未初始化且被后续访问的返回值和输出参数</li>\n<li>执行未绑定的委托在某些情况下确实可能导致内存混乱</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>可调用 <code>IsBound()</code> 检查是否可安全执行委托</li>\n<li>同时，对于无返回值的委托，可调用 <code>ExecuteIfBound()</code>，但需注意输出参数可能未初始化</li>\n</ul>\n<p>注意输出参数可能未初始化：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">执行函数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>Execute</code></td>\n<td align=\"left\">不检查其绑定情况即执行一个委托</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ExecuteIfBound</code></td>\n<td align=\"left\">检查一个委托是否已绑定，如是，则调用Execute</td>\n</tr>\n<tr>\n<td align=\"left\"><code>IsBound</code></td>\n<td align=\"left\">检查一个委托是否已绑定，经常出现在包含 <code>Execute</code> 调用的代码前</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-4-用法示例\"><a href=\"#2-4-用法示例\" class=\"headerlink\" title=\"2.4 用法示例\"></a>2.4 用法示例</h4><ol>\n<li>设类拥有可在任何地方随意调用的方法：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FLogWriter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WriteToLog</span><span class=\"params\">(FString)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>要调用WriteToLog函数，需创建该函数签名的委托类型：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE_OneParam</span>(FStringDelegate, FString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此将创建名为 FStringDelegate 的委托类型，该类型使用 FString 类型的单个参数</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>在类中使用此 <code>FStringDelegate</code> 的方法范例：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FMyClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FStringDelegate WriteToLogDelegate;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用此操作，类可保有指向任意类中的方法的指针</li>\n<li>该类唯一真正了解的信息就是，此委托是其的函数签名</li>\n</ul>\n<ol start=\"4\">\n<li>如要分配委托，现在只需创建委托类的实例，将拥有该方法的类作为模板参数传递</li>\n<li>同时还需传递对象的实例和方法的实际函数地址</li>\n<li>创建 <code>FLogWriter</code> 类的实例， 然后创建该对象实例 <code>WriteToLog</code> 方法的委托：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">TSharedRef&lt;FLogWriter&gt; <span class=\"title\">LogWriter</span><span class=\"params\">(<span class=\"keyword\">new</span> FLogWriter())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">WriteToLogDelegate.<span class=\"built_in\">BindSP</span>(LogWriter, &amp;FLogWriter::WriteToLog);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此操作可将委托动态绑定到类的方法</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>绑定到的对象由共享指针拥有，因此 <code>BindSP</code> 的SP部分代表共享指针</li>\n<li>还有不同对象类型的版本，例如BindRaw()和BindUObject()</li>\n<li>FMyClass现在可调用 <code>WriteToLog</code> 方法，甚至无需了解 <code>FLogWriter</code> 类的任何信息</li>\n</ul>\n<ol start=\"7\">\n<li>要调用委托，只需使用 <code>Execute()</code> 方法：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteToLogDelegate.<span class=\"built_in\">Execute</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;Delegates are great!&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"8\">\n<li>如将函数绑定到网络前调用Execute()，将触发断言，多数情况下，建议进行以下操作：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteToLogDelegate.<span class=\"built_in\">ExecuteIfBound</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;Only executes if a function was bound!&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"3-动态委托\"><a href=\"#3-动态委托\" class=\"headerlink\" title=\"3. 动态委托\"></a>3. 动态委托</h3><ul>\n<li>可序列化且支持反射的委托</li>\n<li>动态委托可序列化，其函数可按命名查找，但其执行速度比常规委托慢</li>\n</ul>\n<h4 id=\"3-1-声明动态委托\"><a href=\"#3-1-声明动态委托\" class=\"headerlink\" title=\"3.1 声明动态委托\"></a>3.1 声明动态委托</h4><p>介绍：动态委托的声明方式与<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Delegates/\">声明标准委托</a>相同， 只是前者使用动态委托专属的宏变体</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">声明宏</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>DECLARE_DYNAMIC_DELEGATE[_RetVal, ...]( DelegateName )</code></td>\n<td align=\"left\">创建一个动态委托</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DECLARE_DYNAMIC_MULTICAST_DELEGATE[_RetVal, ...]( DelegateName )</code></td>\n<td align=\"left\">创建一个动态组播委托</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-2-动态委托绑定\"><a href=\"#3-2-动态委托绑定\" class=\"headerlink\" title=\"3.2 动态委托绑定\"></a>3.2 动态委托绑定</h4><table>\n<thead>\n<tr>\n<th align=\"left\">辅助宏</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>BindDynamic( UserObject, FuncName )</code></td>\n<td align=\"left\">用于在动态委托上调用BindDynamic()的辅助宏，自动生成函数命名字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><code>AddDynamic( UserObject, FuncName )</code></td>\n<td align=\"left\">用于在动态组播委托上调用AddDynamic()的辅助宏，自动生成函数命名字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><code>RemoveDynamic( UserObject, FuncName )</code></td>\n<td align=\"left\">用于在动态组播委托上调用RemoveDynamic()的辅助宏，自动生成函数命名字符串</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-3-执行动态委托\"><a href=\"#3-3-执行动态委托\" class=\"headerlink\" title=\"3.3 执行动态委托\"></a>3.3 执行动态委托</h4><p>使用：通过调用委托的 <code>Execute()</code> 函数执行绑定到委托的函数</p>\n<p>注意：</p>\n<ul>\n<li>执行前须检查委托是否已绑定</li>\n<li>此操作是为了使代码更安全，因为有时委托可能含有未初始化且被后续访问的返回值和输出参数</li>\n<li>执行未绑定的委托在某些情况下确实可能导致内存混乱</li>\n<li>可调用 <code>IsBound()</code> 检查是否可安全执行委托</li>\n<li>同时，对于无返回值的委托，可调用 <code>ExecuteIfBound()</code>，但需注意输出参数可能未初始化</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">执行函数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>Execute</code></td>\n<td align=\"left\">不检查其绑定情况即执行一个委托</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ExecuteIfBound</code></td>\n<td align=\"left\">检查一个委托是否已绑定，如是，则调用Execute</td>\n</tr>\n<tr>\n<td align=\"left\"><code>IsBound</code></td>\n<td align=\"left\">检查一个委托是否已绑定，经常出现在包含 <code>Execute</code> 调用的代码前</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-事件\"><a href=\"#4-事件\" class=\"headerlink\" title=\"4. 事件\"></a>4. 事件</h3><ul>\n<li>可绑定到多个函数并同时全部执行的委托</li>\n</ul>\n<p>说明：</p>\n<ul>\n<li>虽然任意类均可绑定事件，但只有声明事件的类可以调用事件 的 <code>Broadcast</code>、<code>IsBound</code> 和 <code>Clear</code> 函数</li>\n<li>意味着事件对象可在公共接口中公开，而无需让外部类访问这些敏感度函数</li>\n</ul>\n<p>事件使用情况有：</p>\n<ul>\n<li>在纯抽象类中包含回调、限制外部类调用 <code>Broadcast</code>、<code>IsBound</code> 和 <code>Clear</code> 函数</li>\n</ul>\n<h4 id=\"4-1-声明事件\"><a href=\"#4-1-声明事件\" class=\"headerlink\" title=\"4.1 声明事件\"></a>4.1 声明事件</h4><ul>\n<li>事件的声明和 <a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Delegates/Multicast\">组播委托声明</a> 方式几乎相同，唯一的区别是它们使用事件特有的宏变体</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">声明宏</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>DECLARE_EVENT( OwningType, EventName )</code></td>\n<td align=\"left\">创建一个事件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DECLARE_EVENT_OneParam( OwningType, EventName, Param1Type )</code></td>\n<td align=\"left\">创建带一个参数的事件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DECLARE_EVENT_TwoParams( OwningType, EventName, Param1Type, Param2Type )</code></td>\n<td align=\"left\">创建带两个参数的事件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DECLARE_EVENT_&lt;Num&gt;Params( OwningType, EventName, Param1Type, Param2Type, ...)</code></td>\n<td align=\"left\">创建带 N 个参数的事件</td>\n</tr>\n</tbody></table>\n<p>注意：<code>DECLARE_EVENT</code> 宏的首个参数是”拥有”此事件的类，因此可调用 <code>Broadcast()</code> 函数</p>\n<h4 id=\"4-2-绑定事件\"><a href=\"#4-2-绑定事件\" class=\"headerlink\" title=\"4.2 绑定事件\"></a>4.2 绑定事件</h4><ul>\n<li>事件绑定与 <a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Delegates/Multicast\">组播委托绑定</a> 方式相同</li>\n</ul>\n<h4 id=\"4-3-事件执行\"><a href=\"#4-3-事件执行\" class=\"headerlink\" title=\"4.3 事件执行\"></a>4.3 事件执行</h4><p>说明：</p>\n<ul>\n<li>事件允许附带多个函数委托，然后调用事件的 <code>Broadcast()</code> 函数将它们一次性全部执行</li>\n<li>事件签名不允许使用返回值。对于事件而言，只有定义事件的类才能调用 <code>Broadcast()</code> 函数</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>即使不存在绑定，在事件上调用 <code>Broadcast()</code> 也是安全操作</li>\n<li>唯一需要注意的情况是使用事件初始化输出变量，通常不建议执行此操作</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>调用 <code>Broadcast()</code> 函数时，被绑定函数的执行顺序尚未定义</li>\n<li>有可能不按照函数的添加顺序执行</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>Broadcast()</code></td>\n<td align=\"left\">将此事件广播到所有绑定对象，已失效的对象除外</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-4-实现范例\"><a href=\"#4-4-实现范例\" class=\"headerlink\" title=\"4.4 实现范例\"></a>4.4 实现范例</h4><h5 id=\"4-4-1-简单事件\"><a href=\"#4-4-1-简单事件\" class=\"headerlink\" title=\"4.4.1 简单事件\"></a>4.4.1 简单事件</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"comment\">/** Broadcasts whenever the layer changes */</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_EVENT</span>( FLayerViewModel, FChangedEvent )</span><br><span class=\"line\"><span class=\"function\">FChangedEvent&amp; <span class=\"title\">OnChanged</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> ChangedEvent; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"><span class=\"comment\">/** Broadcasts whenever the layer changes */</span></span><br><span class=\"line\">FChangedEvent ChangedEvent;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意：事件的访问器应该依照 OnXXX 模式，而非常规的 GetXXX 模式</p>\n<h5 id=\"4-4-2-继承的抽象事件\"><a href=\"#4-4-2-继承的抽象事件\" class=\"headerlink\" title=\"4.4.2 继承的抽象事件\"></a>4.4.2 继承的抽象事件</h5><p><strong>基础类实现</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Register/Unregister a callback for when assets are added to the registry */</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_EVENT_OneParam</span>( IAssetRegistry, FAssetAddedEvent, <span class=\"type\">const</span> FAssetData&amp;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> FAseetAddedEvent&amp; <span class=\"title\">OnAssetAdded</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>派生类实现</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">DECLARE_DERIVED_EVENT</span>( FAssetRegistry, IAssetRegistry::FAssetAddedEvent, FAssetAddedEvent);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> FassetAddedEvent&amp; <span class=\"title\">OnAssetAdded</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123; <span class=\"keyword\">return</span> AssetAddedEvent; &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意：</p>\n<ul>\n<li>在派生类中声明一个派生事件时，不要在 <code>DECLARE_DERIVED_EVENT</code> 宏中重复函数签名</li>\n<li>此外，<code>DECLARE_DERIVED_EVENT</code> 宏的最后一个参数是事件的新命名，通常与基础类型相同</li>\n</ul>\n<h5 id=\"4-4-3-继承事件\"><a href=\"#4-4-3-继承事件\" class=\"headerlink\" title=\"4.4.3 继承事件\"></a>4.4.3 继承事件</h5><ul>\n<li>派生类不会继承对基础类敏感事件成员的访问</li>\n<li>允许派生类广播其事件的基础类需要公开事件受保护的广播函数</li>\n</ul>\n<p><strong>基础类</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"comment\">/** Broadcasts whenever the layer changes */</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_EVENT</span>( FLayerViewModel, FChangedEvent )</span><br><span class=\"line\"><span class=\"function\">FChangedEvent&amp; <span class=\"title\">OnChanged</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> ChangedEvent; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BroadcastChanged</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ChangedEvent.<span class=\"built_in\">Broadcast</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"><span class=\"comment\">/** Broadcasts whenever the layer changes */</span></span><br><span class=\"line\">FChangedEvent ChangedEvent;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"5-多播委托\"><a href=\"#5-多播委托\" class=\"headerlink\" title=\"5. 多播委托\"></a>5. 多播委托</h3><p>说明：</p>\n<ul>\n<li>可以绑定到多个函数并一次性同时执行它们的委托</li>\n</ul>\n<p>功能：</p>\n<ul>\n<li>多播委托拥有大部分与单播委托相同的功能</li>\n<li>它们只拥有对对象的弱引用，可以与结构体一起使用，可以四处轻松复制</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>像常规委托一样，多播委托可以远程加载&#x2F;保存和触发；但多播委托函数不能使用返回值</li>\n<li>它们最适合用来 四处轻松传递一组委托</li>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Delegates/Events\">事件</a>是一种特殊类型的多播委托，它在访问<code>Broadcast()</code>、<code>IsBound()</code>和<code>Clear()</code>函数时会受到限制</li>\n</ul>\n<h4 id=\"5-1-声明多播委托\"><a href=\"#5-1-声明多播委托\" class=\"headerlink\" title=\"5.1 声明多播委托\"></a>5.1 声明多播委托</h4><p>多播委托在声明方式上与<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Delegates/\">声明标准委托</a>相同，只是前者使用特定于多播委托的宏变体。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">声明宏</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>DECLARE_MULTICAST_DELEGATE[_RetVal, ...]( DelegateName )</code></td>\n<td align=\"left\">创建一个多播委托。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DECLARE_DYNAMIC_MULTICAST_DELEGATE[_RetVal, ...]( DelegateName )</code></td>\n<td align=\"left\">创建一个动态多播委托。</td>\n</tr>\n</tbody></table>\n<h4 id=\"5-2-绑定多播委托\"><a href=\"#5-2-绑定多播委托\" class=\"headerlink\" title=\"5.2 绑定多播委托\"></a>5.2 绑定多播委托</h4><ul>\n<li>多播委托可以绑定多个函数，当委托触发时，将调用所有这些函数</li>\n<li>因此，绑定函数在语义上与数组更加类似</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">“Add()”</td>\n<td align=\"left\">将函数委托添加到该多播委托的调用列表中</td>\n</tr>\n<tr>\n<td align=\"left\">“AddStatic()”</td>\n<td align=\"left\">添加原始C++指针全局函数委托</td>\n</tr>\n<tr>\n<td align=\"left\">“AddRaw()”</td>\n<td align=\"left\">添加原始C++指针委托<br />原始指针不使用任何类型的引用，因此如果从委托下面删除了对象，则调用此函数可能不安全<br />调用Execute()时请小心！</td>\n</tr>\n<tr>\n<td align=\"left\">“AddSP()”</td>\n<td align=\"left\">添加基于共享指针的（快速、非线程安全）成员函数委托<br />共享指针委托保留对对象的弱引用</td>\n</tr>\n<tr>\n<td align=\"left\">“AddUObject()”</td>\n<td align=\"left\">添加基于UObject的成员函数委托<br />UObject委托保留对对象的弱引用</td>\n</tr>\n<tr>\n<td align=\"left\">“Remove()”</td>\n<td align=\"left\">从该多播委托的调用列表中删除函数（性能为O(N)）<br />注意，委托的顺序可能不会被保留</td>\n</tr>\n<tr>\n<td align=\"left\">“RemoveAll()”</td>\n<td align=\"left\">从该多播委托的调用列表中删除绑定到指定UserObject的所有函数<br />注意，委托的顺序可能不会被保留</td>\n</tr>\n</tbody></table>\n<p>注意：</p>\n<ul>\n<li>“RemoveAll()”将删除绑定到所提供指针的所有已注册委托</li>\n<li>未绑定到对象指针的原始委托不会被该函数所删除</li>\n</ul>\n<p>参阅”DelegateSignatureImpl.inl”（位于”..\\UE4\\Engine\\Source\\Runtime\\Core\\Public\\Delegates&quot;中）了解这些函数的变体、参数和实现</p>\n<h4 id=\"5-3-多播执行\"><a href=\"#5-3-多播执行\" class=\"headerlink\" title=\"5.3 多播执行\"></a>5.3 多播执行</h4><p>说明：</p>\n<ul>\n<li>多播委托允许您附加多个函数委托，然后通过调用多播委托的”Broadcast()”函数一次性同时执行它们</li>\n<li>多播委托签名不得使用返回值</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>在多播委托上调用”Broadcast()”总是安全的，即使是在没有任何绑定时也是如此</li>\n<li>唯一需要注意的是，如果您使用委托来初始化输出变量，通常会带来非常不利的后果</li>\n<li>调用”Broadcast()”时绑定函数的执行顺序尚未定义</li>\n<li>执行顺序可能与函数的添加顺序不相同</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">“Broadcast()”</td>\n<td align=\"left\">将该委托广播给所有绑定的对象，但可能已过期的对象除外</td>\n</tr>\n</tbody></table>\n<h3 id=\"6-委托示例\"><a href=\"#6-委托示例\" class=\"headerlink\" title=\"6. 委托示例\"></a>6. 委托示例</h3><h4 id=\"6-1-单播委托\"><a href=\"#6-1-单播委托\" class=\"headerlink\" title=\"6.1 单播委托\"></a>6.1 单播委托</h4><p><strong>定义单播委托</strong></p>\n<ol>\n<li><p>新建一个测试类<code>MyActor</code></p>\n</li>\n<li><p><code>MyActor.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;CoreMinimal.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;GameFramework/Actor.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyActor.generated.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义单播委托</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 无返回值，无参数</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE</span>(FTestDelegateNoParam);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无返回值，一个参数</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE_OneParam</span>(FTestDelegateOneParam, <span class=\"type\">float</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无返回值，多个参数（两个参数为例）</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE_TwoParams</span>(FTestDelegateTwoParams, <span class=\"type\">float</span>, <span class=\"type\">const</span> FString&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有返回值，多个参数（两个参数为例）</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE_RetVal_TwoParams</span>(int32, FTestDelegateRetValTwoParams, <span class=\"type\">float</span>, <span class=\"type\">const</span> FString&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UCLASS</span>()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A_03_DELEGATE_API</span> AMyActor : <span class=\"keyword\">public</span> AActor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">GENERATED_BODY</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">AMyActor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">BeginPlay</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明委托，定义函数，绑定委托</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 声明委托</span></span><br><span class=\"line\">\tFTestDelegateRetValTwoParams DelegateRetValTwoParams;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 测试单播委托，有返回值，两个参数</span></span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>()</span><br><span class=\"line\">\t<span class=\"function\">int32 <span class=\"title\">Func</span><span class=\"params\">(<span class=\"type\">float</span> a, <span class=\"type\">const</span> FString&amp; s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试单播委托，绑定静态函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> int32 <span class=\"title\">Func_Static</span><span class=\"params\">(<span class=\"type\">float</span> a, <span class=\"type\">const</span> FString &amp;s)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>MyActor.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyActor.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">int32 <span class=\"title\">Func</span><span class=\"params\">(<span class=\"type\">float</span> a, <span class=\"type\">const</span> FString &amp;s)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">AMyActor::<span class=\"built_in\">AMyActor</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AMyActor::BeginPlay</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSuper::<span class=\"built_in\">BeginPlay</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 委托-通过对象-绑定函数</span></span><br><span class=\"line\">\tDelegateRetValTwoParams.<span class=\"built_in\">BindUObject</span>(<span class=\"keyword\">this</span>, &amp;AMyActor::Func);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 委托-直接绑定Lambda函数</span></span><br><span class=\"line\">\tDelegateRetValTwoParams.<span class=\"built_in\">BindLambda</span>([<span class=\"keyword\">this</span>](<span class=\"type\">float</span> a, <span class=\"type\">const</span> FString &amp;s)-&gt;int32</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 委托-通过原生Cpp类-绑定函数</span></span><br><span class=\"line\">\tFTest TestA;</span><br><span class=\"line\">\tDelegateRetValTwoParams.<span class=\"built_in\">BindRaw</span>(&amp;TestA, &amp;FTest::Func);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 委托-通过共享指针-绑定函数</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> TSharedPtr&lt;FTest&gt; TestB = <span class=\"built_in\">MakeShareable</span>(<span class=\"keyword\">new</span> FTest);</span><br><span class=\"line\">\tDelegateRetValTwoParams.<span class=\"built_in\">BindSP</span>(TestB.<span class=\"built_in\">ToSharedRef</span>(), &amp;FTest::Func);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 委托-绑定静态函数</span></span><br><span class=\"line\">\tDelegateRetValTwoParams.<span class=\"built_in\">BindStatic</span>(&amp;Func_Static);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 委托-通过线程安全共享指针-绑定函数</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> TSharedPtr&lt;FTest, ESPMode::ThreadSafe&gt; TestC = <span class=\"built_in\">MakeShareable</span>(<span class=\"keyword\">new</span> FTest);</span><br><span class=\"line\">\tDelegateRetValTwoParams.<span class=\"built_in\">BindThreadSafeSP</span>(TestC.<span class=\"built_in\">ToSharedRef</span>(), &amp;FTest::Func);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 委托-通过函数名称的反射-绑定UFUNCTION()修饰的函数</span></span><br><span class=\"line\">\tDelegateRetValTwoParams.<span class=\"built_in\">BindUFunction</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;Func&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 顺手通过委托调用绑定的函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (DelegateRetValTwoParams.<span class=\"built_in\">IsBound</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ExecuteIfBound 是无参委托的调用方法</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a = DelegateRetValTwoParams.<span class=\"built_in\">Execute</span>(<span class=\"number\">24.f</span>, <span class=\"string\">&quot;FTestDelegateRetValTwoParams&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* My Code */</span></span><br><span class=\"line\"><span class=\"function\">int32 <span class=\"title\">AMyActor::Func</span><span class=\"params\">(<span class=\"type\">float</span> a, <span class=\"type\">const</span> FString &amp;s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">int32 <span class=\"title\">AMyActor::Func_Static</span><span class=\"params\">(<span class=\"type\">float</span> a, <span class=\"type\">const</span> FString&amp; s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"6-2-多播委托\"><a href=\"#6-2-多播委托\" class=\"headerlink\" title=\"6.2 多播委托\"></a>6.2 多播委托</h4><p><strong>定义多播委托</strong></p>\n<ol>\n<li><p><code>MyActor.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;CoreMinimal.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;GameFramework/Actor.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyActor.generated.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义多播委托，绑定多个形式相同的函数，同时执行（顺序随机）</span></span><br><span class=\"line\"><span class=\"comment\"> * 无返回值类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 无返回值，无参数</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_MULTICAST_DELEGATE</span>(FTestMulDelegateNoParam);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无返回值，一个或多个参数（两个参数为例）</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_MULTICAST_DELEGATE_TwoParams</span>(FTestMulDelegateTwoParams, <span class=\"type\">float</span>, <span class=\"type\">const</span> FString &amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UCLASS</span>()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A_03_DELEGATE_API</span> AMyActor : <span class=\"keyword\">public</span> AActor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">GENERATED_BODY</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">AMyActor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">BeginPlay</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明委托，定义函数，绑定委托</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 声明委托</span></span><br><span class=\"line\">\tFTestMulDelegateTwoParams MulDelegateTwoParams;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 测试多播委托，无返回值，两个参数</span></span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Func_Mul</span><span class=\"params\">(<span class=\"type\">float</span> a, <span class=\"type\">const</span> FString &amp;s)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>MyActor.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyActor.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">AMyActor::<span class=\"built_in\">AMyActor</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AMyActor::BeginPlay</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSuper::<span class=\"built_in\">BeginPlay</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多播委托</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"comment\">// 多播委托-通过对象-绑定函数</span></span><br><span class=\"line\">\tMulDelegateTwoParams.<span class=\"built_in\">AddUObject</span>(<span class=\"keyword\">this</span>, &amp;AMyActor::Func_Mul);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">\tMulDelegateTwoParams.<span class=\"built_in\">Broadcast</span>(<span class=\"number\">24.f</span>, <span class=\"string\">&quot;FTestMulDelegateTwoParams&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* My Code */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AMyActor::Func_Mul</span><span class=\"params\">(<span class=\"type\">float</span> a, <span class=\"type\">const</span> FString&amp; s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"6-3-动态委托\"><a href=\"#6-3-动态委托\" class=\"headerlink\" title=\"6.3 动态委托\"></a>6.3 动态委托</h4><h5 id=\"6-3-1-动态单播委托\"><a href=\"#6-3-1-动态单播委托\" class=\"headerlink\" title=\"6.3.1 动态单播委托\"></a>6.3.1 动态单播委托</h5><p><strong>定义动态单播委托</strong></p>\n<ol>\n<li><p><code>MyActor.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;CoreMinimal.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;GameFramework/Actor.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyActor.generated.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义动态单播委托</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以用于蓝图中</span></span><br><span class=\"line\"><span class=\"comment\"> * 所以定义时，参数列表中的参数类型后要跟上参数名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 无返回值，无参数</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DYNAMIC_DELEGATE</span>(FTestDynamicDelegateNoParam);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无返回值，有参数（一个参数为例）</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DYNAMIC_DELEGATE_OneParam</span>(FTestDynamicDelegateOneParam, int32, a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有返回值，有参数（一个参数为例）</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DYNAMIC_DELEGATE_RetVal_OneParam</span>(int32, FTestDynamicDelegateRetValOneParam, int32, a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UCLASS</span>()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A_03_DELEGATE_API</span> AMyActor : <span class=\"keyword\">public</span> AActor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">GENERATED_BODY</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">AMyActor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">BeginPlay</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明委托，定义函数，绑定委托</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 声明委托</span></span><br><span class=\"line\">\tFTestDynamicDelegateRetValOneParam DynamicDelegateRetValOneParam;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 测试动态单播委托，蓝图中使用</span></span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>(BlueprintCallable)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Func_Dynamic</span><span class=\"params\">(FTestDynamicDelegateRetValOneParam DynamicDelegateRetValOneParam)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 测试动态单播委托，cpp使用</span></span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>()</span><br><span class=\"line\">\t<span class=\"function\">int32 <span class=\"title\">Func_DynamicCpp</span><span class=\"params\">(int32 a)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>MyActor.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyActor.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">AMyActor::<span class=\"built_in\">AMyActor</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AMyActor::BeginPlay</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSuper::<span class=\"built_in\">BeginPlay</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 动态单播委托</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tDynamicDelegateRetValOneParam.<span class=\"built_in\">BindDynamic</span>(<span class=\"keyword\">this</span>, &amp;AMyActor::Func_DynamicCpp);</span><br><span class=\"line\">\tint32 b = DynamicDelegateRetValOneParam.<span class=\"built_in\">Execute</span>(<span class=\"number\">24</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* My Code */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AMyActor::Func_Dynamic</span><span class=\"params\">(FTestDynamicDelegateRetValOneParam DynamicDelegateRetValOneParam)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">int32 <span class=\"title\">AMyActor::Func_DynamicCpp</span><span class=\"params\">(int32 a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"6-3-2-动态多播委托\"><a href=\"#6-3-2-动态多播委托\" class=\"headerlink\" title=\"6.3.2 动态多播委托\"></a>6.3.2 动态多播委托</h5><p><strong>定义动态多播委托</strong></p>\n<ol>\n<li><p><code>MyActor.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;CoreMinimal.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;GameFramework/Actor.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyActor.generated.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态多播委托</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以用于蓝图中</span></span><br><span class=\"line\"><span class=\"comment\"> * 等同于蓝图中的事件调度器</span></span><br><span class=\"line\"><span class=\"comment\"> * 多播委托没有返回值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 无返回值，无参数</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DYNAMIC_MULTICAST_DELEGATE</span>(FTestDynamicMulDelegate);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无返回值，有参数（一个参数为例）</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FTestDynamicMulDelegateOnParam, int32, a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UCLASS</span>()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A_03_DELEGATE_API</span> AMyActor : <span class=\"keyword\">public</span> AActor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">GENERATED_BODY</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">AMyActor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">BeginPlay</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明委托，定义函数，绑定委托</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 声明委托</span></span><br><span class=\"line\">\t<span class=\"built_in\">UPROPERTY</span>(BlueprintAssignable)</span><br><span class=\"line\">\tFTestDynamicMulDelegate DynamicMulDelegate;</span><br><span class=\"line\"></span><br><span class=\"line\">\tFTestDynamicMulDelegateOnParam DynamicMulDelegateOnParam;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 测试动态多播委托，cpp使用</span></span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Func_DynamicMulCpp</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 测试动态多播委托，有参数，cpp使用</span></span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Func_DynamicMul_One</span><span class=\"params\">(int32 a)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>MyActor.cpp</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyActor.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">AMyActor::<span class=\"built_in\">AMyActor</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AMyActor::BeginPlay</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSuper::<span class=\"built_in\">BeginPlay</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 动态多播委托</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"comment\">// 无参数</span></span><br><span class=\"line\">\tDynamicMulDelegate.<span class=\"built_in\">AddDynamic</span>(<span class=\"keyword\">this</span>, &amp;AMyActor::Func_DynamicMulCpp);</span><br><span class=\"line\">\tDynamicMulDelegate.<span class=\"built_in\">Broadcast</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 有参数</span></span><br><span class=\"line\">\tDynamicMulDelegateOnParam.<span class=\"built_in\">AddDynamic</span>(<span class=\"keyword\">this</span>, &amp;AMyActor::Func_DynamicMul_One);</span><br><span class=\"line\">\tDynamicMulDelegateOnParam.<span class=\"built_in\">Broadcast</span>(<span class=\"number\">24</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* My Code */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AMyActor::Func_DynamicMulCpp</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AMyActor::Func_DynamicMul_One</span><span class=\"params\">(int32 a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"7-原生Cpp委托\"><a href=\"#7-原生Cpp委托\" class=\"headerlink\" title=\"7. 原生Cpp委托\"></a>7. 原生Cpp委托</h3><p><strong>Delegate.cpp</strong>单播</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数指针的两种定义方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*FuncMethod)</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// using FuncMethod = int(*)(int, int);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestA</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">TestAddNum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> c = a + b;</span><br><span class=\"line\">        std::cout &lt;&lt; c &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(TestA::*TestFuncMethod)</span><span class=\"params\">(<span class=\"type\">int</span> , <span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//using TestFuncMethod = int(TestA::*)(int, int);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单播代理</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FDelegateTwoParams</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::function&lt;<span class=\"type\">int</span>()&gt; Func;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BindGlobalFunc</span><span class=\"params\">(FuncMethod FuncPtr, <span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Func = std::<span class=\"built_in\">bind</span>(FuncPtr, a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BindRaw</span><span class=\"params\">(TestA *UserClass, TestFuncMethod FuncPtr, <span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Func = std::<span class=\"built_in\">bind</span>(FuncPtr, UserClass, a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsBound</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Func ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Execute</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Func</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ExecuteIfBound</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">IsBound</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Execute</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">AddNum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> c = a + b;</span><br><span class=\"line\">    std::cout &lt;&lt; c &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelegateDemo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FDelegateTwoParams Delegate;</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">BindGlobalFunc</span>(&amp;AddNum, <span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">Execute</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelegateDemo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TestA *testA = <span class=\"keyword\">new</span> TestA;</span><br><span class=\"line\">    FDelegateTwoParams Delegate;</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">BindRaw</span>(testA, &amp;TestA::TestAddNum, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">Execute</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// // 函数指针调用函数</span></span><br><span class=\"line\">    <span class=\"comment\">// FuncMethod FuncPtr = &amp;AddNum;</span></span><br><span class=\"line\">    <span class=\"comment\">// FuncPtr(1, 2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // 全局绑定调用函数</span></span><br><span class=\"line\">    <span class=\"comment\">// std::function&lt;int()&gt; FuncPtr2 = std::bind(&amp;AddNum, 2, 3);</span></span><br><span class=\"line\">    <span class=\"comment\">// FuncPtr2();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">DelegateDemo</span>();</span><br><span class=\"line\">    <span class=\"built_in\">DelegateDemo2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>DelegateMul.cpp</strong>多播</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数指针的两种定义方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*FuncMethod)</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestA</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">TestAddNum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> c = a + b;</span><br><span class=\"line\">        std::cout &lt;&lt; c &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(TestA::*TestFuncMethod)</span><span class=\"params\">(<span class=\"type\">int</span> , <span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多播代理</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FDelegateTwoParams</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BindGlobalFunc</span><span class=\"params\">(FuncMethod FuncPtr, <span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        FuncArray.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">bind</span>(FuncPtr, a, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BindRaw</span><span class=\"params\">(TestA *UserClass, TestFuncMethod FuncPtr, <span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        FuncArray.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">bind</span>(FuncPtr, UserClass, a, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BroadCast</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (std::vector&lt;std::function&lt;<span class=\"built_in\">int</span>()&gt;&gt;::iterator itr = FuncArray.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">              itr != FuncArray.<span class=\"built_in\">end</span>(); ++itr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (*itr)();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::vector&lt;std::function&lt;<span class=\"type\">int</span>()&gt;&gt; FuncArray;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">AddNum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> c = a + b;</span><br><span class=\"line\">    std::cout &lt;&lt; c &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelegateDemo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TestA *testA = <span class=\"keyword\">new</span> TestA;</span><br><span class=\"line\">    FDelegateTwoParams Delegate;</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">BindRaw</span>(testA, &amp;TestA::TestAddNum, <span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">BindRaw</span>(testA, &amp;TestA::TestAddNum, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">BroadCast</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">DelegateDemo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>DelegateMarco.cpp</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestA</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FuncNoParam</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;FuncNoParamDelegate&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FuncTwoParam</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> c = a + b;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;FuncTwoParam : &quot;</span> &lt;&lt; c &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 定义类 作用域下的函数指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(TestA::*FuncMethodNoParam)</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(TestA::*FuncMethodTwoParam)</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 宏定义 代理</span></span><br><span class=\"line\"><span class=\"comment\">// 无参数，无返回值</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DECLARE_DELEGATE(DelegateName)\\</span></span><br><span class=\"line\"><span class=\"meta\">class My##DelegateName\\</span></span><br><span class=\"line\"><span class=\"meta\">&#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">public:\\</span></span><br><span class=\"line\"><span class=\"meta\">    void BindRaw(TestA *UserClass, FuncMethodNoParam FuncPtr)\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">        Func = std::bind(FuncPtr, UserClass);\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">    bool IsBound() const\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">        return Func ? true : false;\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">    void Execute()\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">        Func();\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">    bool ExecuteIfBound()\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">if</span> (IsBound())\\</span></span><br><span class=\"line\"><span class=\"meta\">        &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">            Execute();\\</span></span><br><span class=\"line\"><span class=\"meta\">            return true;\\</span></span><br><span class=\"line\"><span class=\"meta\">        &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">        return false;\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">private:\\</span></span><br><span class=\"line\"><span class=\"meta\">    std::function<span class=\"string\">&lt;void()&gt;</span> Func;\\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有参数，无返回值</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DECLARE_DELEGATE_TWO_PARAM(DelegateName, TypeParam1, TypeParam2)\\</span></span><br><span class=\"line\"><span class=\"meta\">class My##DelegateName\\</span></span><br><span class=\"line\"><span class=\"meta\">&#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">public:\\</span></span><br><span class=\"line\"><span class=\"meta\">    void BindRaw(TestA *UserClass, FuncMethodTwoParam FuncPtr, TypeParam1 p1, TypeParam2 p2)\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">        Func = std::bind(FuncPtr, UserClass, p1, p2);\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">    bool IsBound() const\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">        return Func ? true : false;\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">    void Execute()\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">        Func();\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">    bool ExecuteIfBound()\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">if</span> (IsBound())\\</span></span><br><span class=\"line\"><span class=\"meta\">        &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">            Execute();\\</span></span><br><span class=\"line\"><span class=\"meta\">            return true;\\</span></span><br><span class=\"line\"><span class=\"meta\">        &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">        return false;\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;\\</span></span><br><span class=\"line\"><span class=\"meta\">private:\\</span></span><br><span class=\"line\"><span class=\"meta\">    std::function<span class=\"string\">&lt;void()&gt;</span> Func;\\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建自定义宏代理</span></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE</span>(TestDelegateNoParam);</span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE_TWO_PARAM</span>(TestDelegateTwoParam, <span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelegateDemo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TestA testA;</span><br><span class=\"line\">    MyTestDelegateNoParam Delegate;</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">BindRaw</span>(&amp;testA, &amp;TestA::FuncNoParam);</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">Execute</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelegateDemo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TestA testB;</span><br><span class=\"line\">    MyTestDelegateTwoParam Delegate;</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">BindRaw</span>(&amp;testB, &amp;TestA::FuncTwoParam, <span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    Delegate.<span class=\"built_in\">Execute</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">DelegateDemo</span>();</span><br><span class=\"line\">    <span class=\"built_in\">DelegateDemo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>DelegateTemplate.cpp</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Class, <span class=\"keyword\">typename</span> FuncType&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TMemFuncPtrType</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Class, <span class=\"keyword\">typename</span> RetType, <span class=\"keyword\">typename</span>... ArgTypes&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TMemFuncPtrType</span>&lt;Class, <span class=\"built_in\">RetType</span>(ArgTypes...)&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">RetType</span><span class=\"params\">(Class::*Type)</span><span class=\"params\">(ArgTypes...)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个模板代理</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> RetValType, <span class=\"keyword\">typename</span>... ParamTypes&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TBaseDelegate</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::function&lt;RetValType()&gt; Func;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> UserClass&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"type\">void</span> <span class=\"title\">BindRaw</span><span class=\"params\">(UserClass *MyUserClass, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">typename</span> TMemFuncPtrType&lt;UserClass, RetValType(ParamTypes...)&gt;::Type FuncPtr, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            ParamTypes... Vars)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Func = std::<span class=\"built_in\">bind</span>(FuncPtr, MyUserClass, Vars...);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsBound</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Func ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Execute</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Func</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ExecuteIfBound</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">IsBound</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Execute</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DECLARE_DELEGATE(DelegateName) class DelegateName : public TBaseDelegate<span class=\"string\">&lt;void&gt;</span>&#123;&#125;;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DECLARE_DELEGATE_TWO_PARAMS(DelegateName, ParamType1, ParamType2) class DelegateName : public TBaseDelegate<span class=\"string\">&lt;void, ParamType1, ParamType2&gt;</span>&#123;&#125;;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DECLARE_DELEGATE_RETVAL_TWO_PARAMS(RetType, DelegateName, ParamType1, ParamType2) class DelegateName : public TBaseDelegate<span class=\"string\">&lt;RetType, ParamType1, ParamType2&gt;</span>&#123;&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE</span>(TestDelegate);</span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE_TWO_PARAMS</span>(TestDelegateTwoParams, <span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\"><span class=\"built_in\">DECLARE_DELEGATE_RETVAL_TWO_PARAMS</span>(<span class=\"type\">int</span>, TestDelegateRetValTwoParams, <span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestA</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Hello World&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Print2</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> c = a + b;</span><br><span class=\"line\">        std::cout &lt;&lt; c &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Print3</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> c = a + b;</span><br><span class=\"line\">        std::cout &lt;&lt; c &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelegateDemo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TestDelegate TD;</span><br><span class=\"line\">    TestA testA;</span><br><span class=\"line\">    TD.<span class=\"built_in\">BindRaw</span>(&amp;testA, &amp;TestA::Print);</span><br><span class=\"line\">    TD.<span class=\"built_in\">Execute</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelegateDemo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TestDelegateTwoParams TDTwoParams;</span><br><span class=\"line\">    TestA testB;</span><br><span class=\"line\">    TDTwoParams.<span class=\"built_in\">BindRaw</span>(&amp;testB, &amp;TestA::Print2, <span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    TDTwoParams.<span class=\"built_in\">Execute</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelegateDemo3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TestDelegateRetValTwoParams TDRTwoParams;</span><br><span class=\"line\">    TestA testC;</span><br><span class=\"line\">    TDRTwoParams.<span class=\"built_in\">BindRaw</span>(&amp;testC, &amp;TestA::Print3, <span class=\"number\">99</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    TDRTwoParams.<span class=\"built_in\">Execute</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">DelegateDemo</span>();</span><br><span class=\"line\">    <span class=\"built_in\">DelegateDemo2</span>();</span><br><span class=\"line\">    <span class=\"built_in\">DelegateDemo3</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","text":"UE4 委托[toc] 1. 委托定义介绍：在C++对象上引用和执行成员函数的数据类型 定义： 是一种泛型但类型安全的方式，可在C++对象上调用成员函数 可使用...","permalink":"/post/7_06_UE4委托","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UE4-%E5%A7%94%E6%89%98\"><span class=\"toc-text\">UE4 委托</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%A7%94%E6%89%98%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 委托定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 基本使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%A3%B0%E6%98%8E%E5%A7%94%E6%89%98\"><span class=\"toc-text\">2.1 声明委托</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E7%BB%91%E5%AE%9A%E5%A7%94%E6%89%98\"><span class=\"toc-text\">2.2 绑定委托</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E8%BD%BD%E8%8D%B7%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">2.3 载荷数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2.4 用法示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%8A%A8%E6%80%81%E5%A7%94%E6%89%98\"><span class=\"toc-text\">3. 动态委托</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E5%A3%B0%E6%98%8E%E5%8A%A8%E6%80%81%E5%A7%94%E6%89%98\"><span class=\"toc-text\">3.1 声明动态委托</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E5%8A%A8%E6%80%81%E5%A7%94%E6%89%98%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">3.2 动态委托绑定</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E6%89%A7%E8%A1%8C%E5%8A%A8%E6%80%81%E5%A7%94%E6%89%98\"><span class=\"toc-text\">3.3 执行动态委托</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">4. 事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E5%A3%B0%E6%98%8E%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">4.1 声明事件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">4.2 绑定事件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-%E4%BA%8B%E4%BB%B6%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">4.3 事件执行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-%E5%AE%9E%E7%8E%B0%E8%8C%83%E4%BE%8B\"><span class=\"toc-text\">4.4 实现范例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-1-%E7%AE%80%E5%8D%95%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">4.4.1 简单事件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%8A%BD%E8%B1%A1%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">4.4.2 继承的抽象事件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-3-%E7%BB%A7%E6%89%BF%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">4.4.3 继承事件</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%A4%9A%E6%92%AD%E5%A7%94%E6%89%98\"><span class=\"toc-text\">5. 多播委托</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-%E5%A3%B0%E6%98%8E%E5%A4%9A%E6%92%AD%E5%A7%94%E6%89%98\"><span class=\"toc-text\">5.1 声明多播委托</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-%E7%BB%91%E5%AE%9A%E5%A4%9A%E6%92%AD%E5%A7%94%E6%89%98\"><span class=\"toc-text\">5.2 绑定多播委托</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-%E5%A4%9A%E6%92%AD%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">5.3 多播执行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%A7%94%E6%89%98%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">6. 委托示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-%E5%8D%95%E6%92%AD%E5%A7%94%E6%89%98\"><span class=\"toc-text\">6.1 单播委托</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-%E5%A4%9A%E6%92%AD%E5%A7%94%E6%89%98\"><span class=\"toc-text\">6.2 多播委托</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-%E5%8A%A8%E6%80%81%E5%A7%94%E6%89%98\"><span class=\"toc-text\">6.3 动态委托</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-3-1-%E5%8A%A8%E6%80%81%E5%8D%95%E6%92%AD%E5%A7%94%E6%89%98\"><span class=\"toc-text\">6.3.1 动态单播委托</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-3-2-%E5%8A%A8%E6%80%81%E5%A4%9A%E6%92%AD%E5%A7%94%E6%89%98\"><span class=\"toc-text\">6.3.2 动态多播委托</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%8E%9F%E7%94%9FCpp%E5%A7%94%E6%89%98\"><span class=\"toc-text\">7. 原生Cpp委托</span></a></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"UE4 智能指针","uid":"2d7038c614ab5b62d3dc8aa389662f8e","slug":"7_07_UE4智能指针","date":"2022-10-06T07:28:25.968Z","updated":"2023-01-10T01:10:19.442Z","comments":true,"path":"api/articles/7_07_UE4智能指针.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (23).webp","text":"UE4 智能指针[toc] 1. 虚幻智能指针库 为C++11智能指针的自定义实现，旨在减轻内存分配和追踪的负担 该实现包括行业标准 共享指针、弱指针 和 唯一...","permalink":"/post/7_07_UE4智能指针","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"UE4 联网和多人游戏","uid":"d2dc88f9aa1b74a2f377fe04af877f8c","slug":"7_05_UE4联网和多人游戏","date":"2022-10-06T07:28:25.963Z","updated":"2023-01-10T01:10:19.442Z","comments":true,"path":"api/articles/7_05_UE4联网和多人游戏.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (21).webp","text":"UE4 联网和多人游戏[toc] 复制Replication：在客户端服务器间同步数据和调用程序的过程 1. 网络概述1.1 尽早规划多人游戏 若项目可能需要多...","permalink":"/post/7_05_UE4联网和多人游戏","photos":[],"count_time":{"symbolsCount":"56k","symbolsTime":"50 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}