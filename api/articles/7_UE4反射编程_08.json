{"title":"UE4 反射编程","uid":"cde83abaa86ff43674449a34230233bc","slug":"7_UE4反射编程_08","date":"2022-10-06T07:28:25.958Z","updated":"2022-06-30T10:20:42.628Z","comments":true,"path":"api/articles/7_UE4反射编程_08.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN/Post_Img_mini/postImg_30.jpg","content":"<h1 id=\"UE4-反射编程\"><a href=\"#UE4-反射编程\" class=\"headerlink\" title=\"UE4 反射编程\"></a>UE4 反射编程</h1><h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><ol>\n<li><p>新建空白<code>ue4 cpp</code>项目：<code>Reflective</code></p>\n</li>\n<li><p>打开<code>ReflectiveGameModeBase.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#pragma once\n\n#include &quot;CoreMinimal.h&quot;\n#include &quot;GameFramework&#x2F;GameModeBase.h&quot;\n#include &quot;ReflectiveGameModeBase.generated.h&quot;\n\nUCLASS()\nclass REFLECTIVE_API ReflectiveGameModeBase : public AGameModeBase\n&#123;\n\tGENERATED_UCLASS_BODY()\n\t\n&#125;;</code></pre>\n</li>\n<li><p>修改<code>ReflectiveGameModeBase.cpp</code>，创建构造函数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Reflection Succeed\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Hello Reflective ]&quot;));\n&#125;</code></pre>\n</li>\n<li><p>编译运行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Hello Reflective ]</code></pre></li>\n</ol>\n<h3 id=\"2-获取类名\"><a href=\"#2-获取类名\" class=\"headerlink\" title=\"2. 获取类名\"></a>2. 获取类名</h3><ol>\n<li><p>创建<code>UE4 None类型 cpp文件</code>：<code>Student</code></p>\n</li>\n<li><p><code>Student.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#pragma once\n\n#include &quot;CoreMinimal.h&quot;\n\nclass REFLECTIVE_API Student\n&#123;\npublic:\n\tStudent();\n    ~Student();\n&#125;</code></pre>\n</li>\n<li><p><code>Student.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;Student.h&quot;\n\nStudent::Student()\n&#123;\n&#125;\n\nStudent::~Student()\n&#123;\n&#125;</code></pre>\n</li>\n<li><p>需要进行修改，才能拥有虚幻的反射功能</p>\n</li>\n<li><p><code>Student.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#pragma once\n\n#include &quot;CoreMinimal.h&quot;\n#include &quot;Student.generated.h&quot; &#x2F;&#x2F; 1. #include &quot;文件名.generated.h&quot;\n\nUCLASS() &#x2F;&#x2F; 2. UCLASS() 是虚幻提供的类反射\nclass REFLECTIVE_API UStudent : public UObject &#x2F;&#x2F; 3. 需要继承UObject才能使用UCALSS(), 类名前面要加U\n&#123;\n\tGENERATED_BODY() &#x2F;&#x2F; 4. 要加入 GENERATED_BODY()\npublic:\n\tUStudent(); &#x2F;&#x2F; 5. 类名前要统一加U\n    &#x2F;&#x2F; 6. 因为继承UObject，不需要考虑垃圾回收，~Student()不需要\n&#125;;</code></pre>\n</li>\n<li><p><code>Student.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;Student.h&quot;\n\nUStudent::UStudent() &#x2F;&#x2F; 1. 类名前加 U\n&#123;\n&#125;\n\n&#x2F;&#x2F; 2. 不需要 Student::~Student()&#123;&#125;</code></pre>\n</li>\n<li><p>开始获取类型</p>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Get Class Name By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Name ]&quot;));\n\tUStudent *Student &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *StudentClass &#x3D; Student-&gt;GetClass();\n\tconst FName StudentName &#x3D; StudentClass-&gt;GetFName();\n\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Class Name: %s --&gt;&quot;), *StudentName.ToString());\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Class Name ]\nLogTemp: Warning: &lt;-- Class Name: Student --&gt;</code></pre></li>\n</ol>\n<h3 id=\"3-获取类标签\"><a href=\"#3-获取类标签\" class=\"headerlink\" title=\"3. 获取类标签\"></a>3. 获取类标签</h3><ol>\n<li><p><code>Student.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#pragma once\n\n#include &quot;CoreMinimal.h&quot;\n#include &quot;Student.generated.h&quot;\n\nUCLASS(BlueprintType) &#x2F;&#x2F; 此次填入 BlueprintType\nclass REFLECTIVE_API UStudent : public UObject\n&#123;\n\tGENERATED_BODY()\npublic:\n\tUStudent();\n&#125;;</code></pre>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n    UStudent *Student &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *StudentClass &#x3D; Student-&gt;GetClass();\n\tconst FName StudentName &#x3D; StudentClass-&gt;GetFName();\n\n\t&#x2F;&#x2F; Get Class Flags By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Flags ]&quot;));\n\tEClassFlags StudentClassFlags &#x3D; StudentClass-&gt;ClassFlags;\n\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Class Name: %s, Class Flags: %x --&gt;&quot;),\n\t\t*StudentName.ToString(), StudentClassFlags);\n&#125;</code></pre>\n</li>\n<li><p>打印结果</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Class Flags ]\nLogTemp: Warning: &lt;-- Class Name: Student, Class Flags: 305000a0 --&gt;</code></pre></li>\n</ol>\n<h3 id=\"4-获取类属性\"><a href=\"#4-获取类属性\" class=\"headerlink\" title=\"4. 获取类属性\"></a>4. 获取类属性</h3><ol>\n<li><p><code>Student.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#pragma once\n\n#include &quot;CoreMinimal.h&quot;\n#include &quot;Student.generated.h&quot;\n\nUCLASS(BlueprintType)\nclass REFLECTIVE_API UStudent : public UObject\n&#123;\n\tGENERATED_BODY()\npublic:\n\tUStudent();\n    \nprivate: &#x2F;&#x2F; 添加属性，要加入UPROPERTY()，否则无法参与反射\n\tUPROPERTY()\n\tFString Name;\n\n\tUPROPERTY()\n\tFString Country;\n&#125;;</code></pre>\n</li>\n<li><p><code>Student.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;Student.h&quot;\n\nUStudent::UStudent()\n&#123;\n\tName &#x3D; &quot;FHang&quot;;\n\tCountry &#x3D; &quot;China&quot;;\n&#125;</code></pre>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n    UStudent *Student &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *StudentClass &#x3D; Student-&gt;GetClass();\n\n\t&#x2F;&#x2F; Get Class Property Value By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Property Value ]&quot;))\n\tfor (FProperty *Property &#x3D; StudentClass-&gt;PropertyLink; Property; Property &#x3D; Property-&gt;PropertyLinkNext)\n\t&#123;\n\t\tFString PropertyName &#x3D; Property-&gt;GetName();\n\t\tFString PropertyType &#x3D; Property-&gt;GetCPPType();\n\t\t\n\t\tif (PropertyType &#x3D;&#x3D; &quot;FString&quot;)\n\t\t&#123;\n\t\t\tconst FStrProperty *StringProperty &#x3D; CastField&lt;FStrProperty&gt;(Property);\n\t\t\tvoid *Address &#x3D; StringProperty-&gt;ContainerPtrToValuePtr&lt;void&gt;(Student);\n\t\t\tFString PropertyValue &#x3D; StringProperty-&gt;GetPropertyValue(Address);\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Class Property: %s, Type: %s, Value: %s--&gt;&quot;),\n\t\t\t\t*PropertyName, *PropertyType, *PropertyValue);\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Class Property Value ]\nLogTemp: Warning: &lt;-- Class Property: Name, Type: FString, Value: FHang --&gt;\nLogTemp: Warning: &lt;-- Class Property: Country, Type: FString, Value: China --&gt;</code></pre></li>\n</ol>\n<h3 id=\"5-获取类属性元数据\"><a href=\"#5-获取类属性元数据\" class=\"headerlink\" title=\"5. 获取类属性元数据\"></a>5. 获取类属性元数据</h3><ol>\n<li><p><code>Student.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#pragma once\n\n#include &quot;CoreMinimal.h&quot;\n#include &quot;Student.generated.h&quot;\n\nUCLASS(BlueprintType)\nclass REFLECTIVE_API UStudent : public UObject\n&#123;\n\tGENERATED_BODY()\npublic:\n\tUStudent();\n    \nprivate:\n\tUPROPERTY(VisibleAnywhere, Category&#x3D;&quot;Info&quot;) &#x2F;&#x2F; 添加元数据\n\tFString Name;\n\n\tUPROPERTY()\n\tFString Country;\n&#125;;</code></pre>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n    UStudent *Student &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *StudentClass &#x3D; Student-&gt;GetClass();\n\n\t&#x2F;&#x2F; Get Class Property Value By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Property Value ]&quot;))\n\tfor (FProperty *Property &#x3D; StudentClass-&gt;PropertyLink; Property; Property &#x3D; Property-&gt;PropertyLinkNext)\n\t&#123;\n        &#x2F;&#x2F; Get Class Property Meta By Reflection\n\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Property Meta ]&quot;))\n\t\tFString PropertyMeta &#x3D; Property-&gt;GetMetaData(TEXT(&quot;Category&quot;));\n\t\t\n\t\tif (PropertyType &#x3D;&#x3D; &quot;FString&quot;)\n\t\t&#123;\n\t\t\tconst FStrProperty *StringProperty &#x3D; CastField&lt;FStrProperty&gt;(Property);\n\t\t\tvoid *Address &#x3D; StringProperty-&gt;ContainerPtrToValuePtr&lt;void&gt;(Student);\n\t\t\tFString PropertyValue &#x3D; StringProperty-&gt;GetPropertyValue(Address);\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Class Property Meta: %s --&gt;&quot;), *PropertyMeta);\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Class Property Value ]\nLogTemp: [ Get Class Property Meta ]\nLogTemp: Warning: &lt;-- Class Property Meta: Info --&gt;\nLogTemp: Warning: &lt;-- Class Property Meta:  --&gt;</code></pre></li>\n</ol>\n<h3 id=\"6-设置类属性值\"><a href=\"#6-设置类属性值\" class=\"headerlink\" title=\"6. 设置类属性值\"></a>6. 设置类属性值</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n    UStudent *Student &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *StudentClass &#x3D; Student-&gt;GetClass();\n\n\t&#x2F;&#x2F; Get Class Property Value By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Property Value ]&quot;))\n\tfor (FProperty *Property &#x3D; StudentClass-&gt;PropertyLink; Property; Property &#x3D; Property-&gt;PropertyLinkNext)\n\t&#123;\n\t\tFString PropertyName &#x3D; Property-&gt;GetName();\n\t\tFString PropertyType &#x3D; Property-&gt;GetCPPType();\n\t\t\n\t\tif (PropertyType &#x3D;&#x3D; &quot;FString&quot;)\n\t\t&#123;\n\t\t\tconst FStrProperty *StringProperty &#x3D; CastField&lt;FStrProperty&gt;(Property);\n\t\t\tvoid *Address &#x3D; StringProperty-&gt;ContainerPtrToValuePtr&lt;void&gt;(Student);\n\t\t\tFString PropertyValue &#x3D; StringProperty-&gt;GetPropertyValue(Address);\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Class Property: %s, Type: %s, Value: %s --&gt;&quot;),\n\t\t\t\t*PropertyName, *PropertyType, *PropertyValue);\n\t\t\t\n\t\t\t&#x2F;&#x2F; Set Class Property Value By Reflection\n\t\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Set Class Property Value ]&quot;))\n\t\t\tStringProperty-&gt;SetPropertyValue(Address, &quot;XXXX&quot;);\n\t\t\tFString NewStringProperty &#x3D; StringProperty-&gt;GetPropertyValue(Address);\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Class Property: %s, Type: %s, Value: %s --&gt;&quot;),\n\t\t\t\t*PropertyName, *PropertyType, *NewStringProperty);\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Class Property Value ]\nLogTemp: Warning: &lt;-- Class Property: Name, Type: FString, Value: FHang --&gt;\nLogTemp: [ Set Class Property Value ]\nLogTemp: Warning: &lt;-- Class Property: Name, Type: FString, Value: XXXX --&gt;\nLogTemp: Warning: &lt;-- Class Property: Country, Type: FString, Value: China --&gt;\nLogTemp: [ Set Class Property Value ]\nLogTemp: Warning: &lt;-- Class Property: Country, Type: FString, Value: XXXX --&gt;</code></pre></li>\n</ol>\n<h3 id=\"7-获得类函数名\"><a href=\"#7-获得类函数名\" class=\"headerlink\" title=\"7. 获得类函数名\"></a>7. 获得类函数名</h3><ol>\n<li><p><code>Student.h</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#pragma once\n\n#include &quot;CoreMinimal.h&quot;\n#include &quot;Student.generated.h&quot;\n\nUCLASS(BlueprintType)\nclass REFLECTIVE_API UStudent : public UObject\n&#123;\n\tGENERATED_BODY()\npublic:\n\tUStudent();\n\nprivate:\n\tUPROPERTY(VisibleAnywhere, Category&#x3D;&quot;Info&quot;)\n\tFString Name;\n\n\tUPROPERTY()\n\tFString Country;\n\npublic:\n\tUFUNCTION(BlueprintCallable)\n\tvoid Study()&#123;&#125;;\n\n\tUFUNCTION()\n\tvoid Demo01(int a, bool isA)&#123;&#125;;\n&#125;;</code></pre>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n    UStudent *Student &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *StudentClass &#x3D; Student-&gt;GetClass();\n    const FName StudentName &#x3D; StudentClass-&gt;GetFName();\n\t\n    &#x2F;&#x2F; Get Class Function Name By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Function ]&quot;));\n\tfor (TFieldIterator&lt;UFunction&gt; IteratorOfFunction(StudentClass); IteratorOfFunction; ++IteratorOfFunction)\n\t&#123;\n\t\tconst UFunction *Function &#x3D; *IteratorOfFunction;\n\t\tFString FunctionName &#x3D; Function-&gt;GetName();\n\t\tif (FunctionName &#x3D;&#x3D; &quot;ExecuteUbergraph&quot;)&#123;continue;&#125;\n\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Class: %s, Function: %s --&gt;&quot;), *StudentName.ToString(),\n\t\t\t*FunctionName);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Class Function ]\nLogTemp: Warning: &lt;-- Class: Student, Function: Study --&gt;\nLogTemp: Warning: &lt;-- Class: Student, Function: Demo01 --&gt;</code></pre></li>\n</ol>\n<h3 id=\"8-获取类函数标签\"><a href=\"#8-获取类函数标签\" class=\"headerlink\" title=\"8. 获取类函数标签\"></a>8. 获取类函数标签</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n    UStudent *Student &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *StudentClass &#x3D; Student-&gt;GetClass();\n    const FName StudentName &#x3D; StudentClass-&gt;GetFName();\n\t\n    &#x2F;&#x2F; Get Class Function Name By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Function ]&quot;));\n\tfor (TFieldIterator&lt;UFunction&gt; IteratorOfFunction(StudentClass); IteratorOfFunction; ++IteratorOfFunction)\n\t&#123;\n\t\tconst UFunction *Function &#x3D; *IteratorOfFunction;\n\t\tFString FunctionName &#x3D; Function-&gt;GetName();\n\t\tif (FunctionName &#x3D;&#x3D; &quot;ExecuteUbergraph&quot;)&#123;continue;&#125;\n        \t\t\n        &#x2F;&#x2F; Get Class Function Flags\n\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Function Flags ]&quot;))\n\t\tEFunctionFlags FunctionFlags &#x3D; Function-&gt;FunctionFlags;\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Class: %s, Function: %s, Flags: %x --&gt;&quot;), *StudentName.ToString(),\n\t\t\t*FunctionName, FunctionFlags);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Class Function ]\nLogTemp: [ Get Class Function Flags ]\nLogTemp: Warning: &lt;-- Class: Student, Function: Study, Flags: 4020401 --&gt;\nLogTemp: [ Get Class Function Flags ]\nLogTemp: Warning: &lt;-- Class: Student, Function: Demo01, Flags: 20401 --&gt;</code></pre></li>\n</ol>\n<h3 id=\"9-获取类函数参数\"><a href=\"#9-获取类函数参数\" class=\"headerlink\" title=\"9. 获取类函数参数\"></a>9. 获取类函数参数</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n    UStudent *Student &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *StudentClass &#x3D; Student-&gt;GetClass();\n\t\n    &#x2F;&#x2F; Get Class Function Name By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Function ]&quot;));\n\tfor (TFieldIterator&lt;UFunction&gt; IteratorOfFunction(StudentClass); IteratorOfFunction; ++IteratorOfFunction)\n\t&#123;\n\t\tconst UFunction *Function &#x3D; *IteratorOfFunction;\n\t\tFString FunctionName &#x3D; Function-&gt;GetName();\n\t\tif (FunctionName &#x3D;&#x3D; &quot;ExecuteUbergraph&quot;)&#123;continue;&#125;\n        \t\t\n        &#x2F;&#x2F; Get Class Function Params By Reflection\n\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Function Params ]&quot;));\n\t\tfor (TFieldIterator&lt;FProperty&gt; IteratorOfParams(Function); IteratorOfParams; ++IteratorOfParams)\n\t\t&#123;\n\t\t\tconst FProperty *Param &#x3D; *IteratorOfParams;\n\t\t\tFString ParamType &#x3D; Param-&gt;GetCPPType();\n\t\t\tFString ParamName &#x3D; Param-&gt;GetName();\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Function: %s, ParamType: %s, ParamName: %s --&gt;&quot;),\n\t\t\t\t*FunctionName, *ParamType, *ParamName);\n\t\t&#125;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Class Function ]\nLogTemp: [ Get Function Params ]\nLogTemp: Warning: &lt;-- Function: Demo01, ParamType: int32, ParamName: a --&gt;\nLogTemp: Warning: &lt;-- Function: Demo01, ParamType: bool, ParamName: isA --&gt;</code></pre></li>\n</ol>\n<h3 id=\"10-获取类函数参数标签\"><a href=\"#10-获取类函数参数标签\" class=\"headerlink\" title=\"10. 获取类函数参数标签\"></a>10. 获取类函数参数标签</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n    UStudent *Student &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *StudentClass &#x3D; Student-&gt;GetClass();\n\t\n    &#x2F;&#x2F; Get Class Function Name By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Class Function ]&quot;));\n\tfor (TFieldIterator&lt;UFunction&gt; IteratorOfFunction(StudentClass); IteratorOfFunction; ++IteratorOfFunction)\n\t&#123;\n\t\tconst UFunction *Function &#x3D; *IteratorOfFunction;\n\t\tFString FunctionName &#x3D; Function-&gt;GetName();\n\t\tif (FunctionName &#x3D;&#x3D; &quot;ExecuteUbergraph&quot;)&#123;continue;&#125;\n        \t\t\n        &#x2F;&#x2F; Get Class Function Params By Reflection\n\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Function Params ]&quot;));\n\t\tfor (TFieldIterator&lt;FProperty&gt; IteratorOfParams(Function); IteratorOfParams; ++IteratorOfParams)\n\t\t&#123;\n\t\t\tconst FProperty *Param &#x3D; *IteratorOfParams;\n\n            &#x2F;&#x2F; Get Function Params Flags By Reflection\n\t\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Params Flags ]&quot;));\n\t\t\tEPropertyFlags ParamFlag &#x3D; Param-&gt;GetPropertyFlags();\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Function: %s, Flags: %x --&gt;&quot;),\n\t\t\t\t*FunctionName, ParamFlag);\n\t\t&#125;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Class Function ]\nLogTemp: [ Get Function Params ]\nLogTemp: [ Get Params Flags ]\nLogTemp: Warning: &lt;-- Function: Demo01, ParamType: int32, ParamName: a, Flags: 40000280 --&gt;\nLogTemp: [ Get Params Flags ]\nLogTemp: Warning: &lt;-- Function: Demo01, ParamType: bool, ParamName: isA, Flags: 40000280 --&gt;</code></pre></li>\n</ol>\n<h3 id=\"11-获取父类\"><a href=\"#11-获取父类\" class=\"headerlink\" title=\"11. 获取父类\"></a>11. 获取父类</h3><ol>\n<li><p>新建<code>Student</code>子类<code>SubStudent</code></p>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;SubStudent.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Get SubClass FatherClass By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get FatherClass ]&quot;));\n\tconst USubStudent *SubStudent &#x3D; NewObject&lt;USubStudent&gt;();\n\tconst UClass *FatherClass &#x3D; SubStudent-&gt;GetClass()-&gt;GetSuperClass();\n\tconst FString SubClassName &#x3D; SubStudent-&gt;GetClass()-&gt;GetName();\n\tconst FString FatherClassName &#x3D; FatherClass-&gt;GetName();\n\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- SubClass: %s, SuperClass: %s --&gt;&quot;), *SubClassName, *FatherClassName);\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get FatherClass ]\nLogTemp: Warning: &lt;-- SubClass: SubStudent, SuperClass: Student --&gt;</code></pre></li>\n</ol>\n<h3 id=\"12-判断是否是子类\"><a href=\"#12-判断是否是子类\" class=\"headerlink\" title=\"12. 判断是否是子类\"></a>12. 判断是否是子类</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n#include &quot;SubStudent.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Determine if the current class is a subclass of another class By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Determine Is SubClass ]&quot;));\n\tconst UClass *Class1 &#x3D; UStudent::StaticClass();\n\tconst UClass *Class2 &#x3D; USubStudent::StaticClass();\n\tconst UClass *Class3 &#x3D; AActor::StaticClass();\n\tif (Class2-&gt;IsChildOf(Class1))\n\t&#123;\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- %s Is %s SubClass --&gt;&quot;), \n\t\t\t*Class2-&gt;GetName(), *Class1-&gt;GetName());\n\t&#125;\n\tif (!Class3-&gt;IsChildOf(Class1))\n\t&#123;\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- %s Is Not %s SubClass --&gt;&quot;),\n\t\t\t*Class3-&gt;GetName(), *Class1-&gt;GetName());\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Determine Is SubClass ]\nLogTemp: Warning: &lt;-- SubStudent Is Student SubClass --&gt;\nLogTemp: Warning: &lt;-- Actor Is Not Student SubClass --&gt;</code></pre></li>\n</ol>\n<h3 id=\"13-查找类的所有子类\"><a href=\"#13-查找类的所有子类\" class=\"headerlink\" title=\"13. 查找类的所有子类\"></a>13. 查找类的所有子类</h3><ol>\n<li><p>新建<code>Student</code>子类<code>Sub1Student</code></p>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\tconst *NewStudent &#x3D; NewObject&lt;UStudent&gt;();\n\tconst UClass *FatherClass &#x3D; NewStudent-&gt;GetClass();\n\t\n\t&#x2F;&#x2F; Find Current Class All Of SubClass By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Current Class All Of SubClass ]&quot;));\n\tTArray&lt;UClass*&gt; ClassArray;\n\tGetDerivedClasses(FatherClass, ClassArray, false);\n\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- SuperClass: %s --&gt;&quot;), *FatherClassName);\n\tfor (const auto &amp;Elem : ClassArray)\n\t&#123;\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- SubClass: %s --&gt;&quot;), *Elem-&gt;GetName());\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Current Class All Of SubClass ]\nLogTemp: Warning: &lt;-- SuperClass: Student --&gt;\nLogTemp: Warning: &lt;-- SubClass: Sub1Student --&gt;\nLogTemp: Warning: &lt;-- SubClass: SubStudent --&gt;</code></pre></li>\n</ol>\n<h3 id=\"14-查找类生成的所有对象\"><a href=\"#14-查找类生成的所有对象\" class=\"headerlink\" title=\"14. 查找类生成的所有对象\"></a>14. 查找类生成的所有对象</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;Sub1Student.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Get Current Class Generated Objects By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Current Class Generated Objects ]&quot;));\n\tTArray&lt;UObject*&gt; ObjectsArray;\n\tUSub1Student *Sub1Student &#x3D; NewObject&lt;USub1Student&gt;(this, FName(&quot;Sub1Student&quot;));\n\tUSub1Student *Sub1 &#x3D; NewObject&lt;USub1Student&gt;(this, FName(&quot;Sub1&quot;));\n\tGetObjectsOfClass(USub1Student::StaticClass(), ObjectsArray, false);\n\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Current Class: %s --&gt;&quot;), *Sub1Student-&gt;GetName());\n\tfor (const auto &amp;Elem : ObjectsArray)\n\t&#123;\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Object: %s --&gt;&quot;), *Elem-&gt;GetName());\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Current Class Generated Objects ]\nLogTemp: Warning: &lt;-- Current Class: Sub1Student --&gt;\nLogTemp: Warning: &lt;-- Object: Sub1Student --&gt;\nLogTemp: Warning: &lt;-- Object: Sub1 --&gt;</code></pre></li>\n</ol>\n<h3 id=\"15-通过字符串查找类\"><a href=\"#15-通过字符串查找类\" class=\"headerlink\" title=\"15. 通过字符串查找类\"></a>15. 通过字符串查找类</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Use String Find Class By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Use String Find Class ]&quot;));\n\tUClass *FindedClass &#x3D; FindObject&lt;UClass&gt;(ANY_PACKAGE, *FString(&quot;Student&quot;), true);\n\tif (FindedClass)\n\t&#123;\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Find %s Succeed --&gt;&quot;), *FindedClass-&gt;GetName());\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Use String Find Class ]\nLogTemp: Warning: &lt;-- Find Student Succeed --&gt;</code></pre></li>\n</ol>\n<h3 id=\"16-通过字符查找枚举\"><a href=\"#16-通过字符查找枚举\" class=\"headerlink\" title=\"16. 通过字符查找枚举\"></a>16. 通过字符查找枚举</h3><ol>\n<li><p><code>Student.h</code>中定义<code>EStudentType</code>枚举</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#pragma once\n\n#include &quot;CoreMinimal.h&quot;\n#include &quot;Student.generated.h&quot;\n\nUENUM()\nenum class EStudentType : uint8\n&#123;\n\tE_GOOD UMETA(DisplayName &#x3D; &quot;GOOD&quot;),\n\tE_BAD UMETA(DisplayName &#x3D; &quot;BAD&quot;)\n&#125;;\n\nUCLASS(BlueprintType)\nclass REFLECTIVE_API UStudent : public UObject\n&#123;\n\tGENERATED_BODY()\npublic:\n\tUStudent();\n\nprivate:\n\tUPROPERTY(VisibleAnywhere, Category&#x3D;&quot;Info&quot;)\n\tFString Name;\n\n\tUPROPERTY()\n\tFString Country;\n\npublic:\n\tUFUNCTION(BlueprintCallable)\n\tvoid Study()&#123;&#125;;\n\n\tUFUNCTION()\n\tvoid Demo01(int a, bool isA)&#123;&#125;;\n&#125;;</code></pre>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Use String Find Enum By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Use String Find Enum ]&quot;));\n\tUEnum *FindedEnum &#x3D; FindObject&lt;UEnum&gt;(ANY_PACKAGE, *FString(&quot;EStudentType&quot;), true);\n\tif (FindedEnum)\n\t&#123;\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Find %s Succeed --&gt;&quot;), *FindedEnum-&gt;GetName());\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Use String Find Enum ]\nLogTemp: Warning: &lt;-- Find EStudentType Succeed --&gt;</code></pre></li>\n</ol>\n<h3 id=\"17-获得枚举的所有项\"><a href=\"#17-获得枚举的所有项\" class=\"headerlink\" title=\"17. 获得枚举的所有项\"></a>17. 获得枚举的所有项</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Use String Find Enum By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Use String Find Enum ]&quot;));\n\tUEnum *FindedEnum &#x3D; FindObject&lt;UEnum&gt;(ANY_PACKAGE, *FString(&quot;EStudentType&quot;), true);\n\tif (FindedEnum)\n\t&#123;        \t\t\n        &#x2F;&#x2F; Get Current Enum All Of Elements By Reflection\n\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get Current Enum All Of Elements ]&quot;));\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Enum: %s --&gt;&quot;), *FindedEnum-&gt;GetName());\n\t\tfor (int8 Index &#x3D; 0; Index &lt; FindedEnum-&gt;NumEnums(); ++Index)\n\t\t&#123;\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;Elem: %s&quot;), *FindedEnum-&gt;GetNameStringByIndex(Index));\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get Current Enum All Of Elements ]\nLogTemp: Warning: &lt;-- Enum: EStudentType --&gt;\nLogTemp: Warning: Elem: E_GOOD\nLogTemp: Warning: Elem: E_BAD\nLogTemp: Warning: Elem: E_MAX</code></pre></li>\n</ol>\n<h3 id=\"18-通过字符串查找蓝图类\"><a href=\"#18-通过字符串查找蓝图类\" class=\"headerlink\" title=\"18. 通过字符串查找蓝图类\"></a>18. 通过字符串查找蓝图类</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Use String Find Blueprint Class\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Use String Find Blueprint Class ]&quot;));\n\tUBlueprint *FindedBlueprint &#x3D; FindObject&lt;UBlueprint&gt;(ANY_PACKAGE, *FString(&quot;BP_Student&quot;));\n\tif (FindedBlueprint)\n\t&#123;\n\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Find %s Succeed --&gt;&quot;), *FindedBlueprint-&gt;GetName());\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Use String Find Blueprint Class ]\nLogTemp: &lt;-- Find BP_Student Succeed --&gt;</code></pre></li>\n</ol>\n<h3 id=\"19-判断蓝图是否是Native\"><a href=\"#19-判断蓝图是否是Native\" class=\"headerlink\" title=\"19. 判断蓝图是否是Native\"></a>19. 判断蓝图是否是Native</h3><ol>\n<li><p>在<code>UE</code>中通过<code>Student.cpp</code>类新建<code>BP_Student</code>蓝图类</p>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Use String Find Blueprint Class\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Use String Find Blueprint Class ]&quot;));\n\tUBlueprint *FindedBlueprint &#x3D; FindObject&lt;UBlueprint&gt;(ANY_PACKAGE, *FString(&quot;BP_Student&quot;));\n\tif (FindedBlueprint)\n\t&#123;\n\t\t&#x2F;&#x2F; Determine Is BlueprintClass Or Native(Cpp) Class By Reflection\n\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Determine Is BlueprintClass Or Native ]&quot;));\n\t\tif (!FindedBlueprint-&gt;IsNative())\n\t\t&#123;\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- %s Is Blueprint Class --&gt;&quot;), *FindedBlueprint-&gt;GetName());\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- %s Is Native Class --&gt;&quot;), *FindedBlueprint-&gt;GetName());\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Use String Find Blueprint Class ]\nLogTemp: [ Determine Is BlueprintClass Or Native ]\nLogTemp: &lt;-- BP_Student Is Blueprint Class --&gt;</code></pre></li>\n</ol>\n<h3 id=\"20-获取所有类\"><a href=\"#20-获取所有类\" class=\"headerlink\" title=\"20. 获取所有类\"></a>20. 获取所有类</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Get All Class By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Get All Class ]&quot;));\n\tTArray&lt;FString&gt; AllClassNames;\n\tfor (TObjectIterator&lt;UClass&gt; ClassIt; ClassIt; ++ClassIt)\n\t&#123;\n\t\tFString ClassName &#x3D; ClassIt-&gt;GetName();\n\t\tAllClassNames.Emplace(ClassName);\n\t&#125;\n\tfor (const auto &amp;Elem : AllClassNames)\n\t&#123;\n\t\tif (Elem &#x3D;&#x3D; &quot;Student&quot;)\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- %s --&gt;&quot;), *Elem);\n\t&#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Get All Class ]\nLogTemp: Warning: &lt;-- Student --&gt;</code></pre></li>\n</ol>\n<h3 id=\"21-通过字符串查找类函数\"><a href=\"#21-通过字符串查找类函数\" class=\"headerlink\" title=\"21. 通过字符串查找类函数\"></a>21. 通过字符串查找类函数</h3><ol>\n<li><p><code>SubStudent.h</code>定义函数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#pragma once\n\n#include &quot;CoreMinimal.h&quot;\n#include &quot;Student.h&quot;\n#include &quot;SubStudent.generated.h&quot;\n\nUCLASS()\nclass REFLECTIVE_API USubStudent : public UStudent\n&#123;\n\tGENERATED_BODY()\n\npublic:\n\tUFUNCTION()\n\tvoid PlayGame(FString GameName);\n\n\tUFUNCTION()\n\tint IsBoy();\n&#125;;</code></pre>\n</li>\n<li><p><code>SubStudent.cpp</code>实现函数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;SubStudent.h&quot;\n\nvoid USubStudent::PlayGame(FString GameName)\n&#123;\n\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- SubStudent::PlayGame(FString)&gt;&gt; Play %s --&gt;&quot;), *GameName);\n&#125;\n\nint USubStudent::IsBoy()\n&#123;\n\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- SubStudent::IsBoy&gt;&gt; Is Boy --&gt;&quot;));\n\treturn 1;\n&#125;</code></pre>\n</li>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;USubStudent.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Use String Find Class Function By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Use String Find Class Function ]&quot;));\n\tUSubStudent *SubStudent01 &#x3D; NewObject&lt;USubStudent&gt;();\n\tif (UClass *SubStudent01Class &#x3D; SubStudent01-&gt;GetClass())\n\t&#123;\n\t\tUFunction *SubStudent01Function &#x3D; SubStudent01Class-&gt;FindFunctionByName(\n\t\t\tTEXT(&quot;PlayGame&quot;), EIncludeSuperFlag::ExcludeSuper);\n\t\tif (SubStudent01Function)\n\t\t&#123;\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Class: %s, Function: %s --&gt;&quot;),\n\t\t\t\t*SubStudent01-&gt;GetClass()-&gt;GetName(), *SubStudent01Function-&gt;GetName());\n\t\t&#125;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Use String Find Class Function ]\nLogTemp: Warning: &lt;-- Class: SubStudent, Function: PlayGame --&gt;</code></pre></li>\n</ol>\n<h3 id=\"22-ProcessEvent调用类函数\"><a href=\"#22-ProcessEvent调用类函数\" class=\"headerlink\" title=\"22. ProcessEvent调用类函数\"></a>22. ProcessEvent调用类函数</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;USubStudent.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Use String Find Class Function By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Use String Find Class Function ]&quot;));\n\tUSubStudent *SubStudent01 &#x3D; NewObject&lt;USubStudent&gt;();\n\tif (UClass *SubStudent01Class &#x3D; SubStudent01-&gt;GetClass())\n\t&#123;\n\t\tUFunction *SubStudent01Function &#x3D; SubStudent01Class-&gt;FindFunctionByName(\n\t\t\tTEXT(&quot;PlayGame&quot;), EIncludeSuperFlag::ExcludeSuper);\n\t\tif (!SubStudent01Function)&#123;break;&#125;\n        \n\t\t&#x2F;&#x2F; ProcessEvent Transfer Class Function By Reflection\n\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ ProcessEvent Transfer Class Function ]&quot;));\n        \n\t\t&#x2F;&#x2F; 1.Allocate Space For Parameters\n\t\tuint16 *AllParamMemory &#x3D; static_cast&lt;uint16*&gt;FMemory_Alloca(SubStudent01Function-&gt;ParmsSize);\n\t\tFMemory::Memzero(AllParamMemory, SubStudent01Function-&gt;ParmsSize);\n\t\t\n\t\t&#x2F;&#x2F; 2.Parameter assignment\n\t\tfor (TFieldIterator&lt;FProperty&gt; IteratorOfParams(SubStudent01Function); IteratorOfParams; ++IteratorOfParams)\n\t\t&#123;\n\t\t\tconst FProperty *Param &#x3D; *IteratorOfParams;\n\t\t\tFString ParamName &#x3D; Param-&gt;GetName();\n\t\t\tif (ParamName &#x3D;&#x3D; FString(&quot;GameName&quot;))\n\t\t\t&#123;\n\t\t\t\t*Param-&gt;ContainerPtrToValuePtr&lt;FString&gt;(AllParamMemory) &#x3D; &quot;CSGO&quot;;\n\t\t\t&#125;\n\t\t&#125;\n        \t\t\n        &#x2F;&#x2F; 3.Call Function(Method)\n\t\tSubStudent01-&gt;ProcessEvent(SubStudent01Function, AllParamMemory);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Use String Find Class Function ]\nLogTemp: [ ProcessEvent Transfer Class Function ]\nLogTemp: Warning: &lt;-- SubStudent::PlayGame(FString)&gt;&gt; Play CSGO --&gt;</code></pre></li>\n</ol>\n<h3 id=\"23-Invoke调用类函数\"><a href=\"#23-Invoke调用类函数\" class=\"headerlink\" title=\"23. Invoke调用类函数\"></a>23. Invoke调用类函数</h3><ol>\n<li><p><code>ReflectiveGameModeBase.cpp</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;ReflectiveGameModeBase.h&quot;\n#include &quot;USubStudent.h&quot;\n\nReflectiveGameModeBase::ReflectiveGameModeBase(const FObjectInitializer&amp; ObjectInitializer)\n\t:AGameModeBase(ObjectInitializer)\n&#123;\n\t&#x2F;&#x2F; Use String Find Class Function By Reflection\n\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Use String Find Class Function ]&quot;));\n\tUSubStudent *SubStudent01 &#x3D; NewObject&lt;USubStudent&gt;();\n\tif (UClass *SubStudent01Class &#x3D; SubStudent01-&gt;GetClass())\n\t&#123;   \n\t\t&#x2F;&#x2F; \tInvoke Transfer Class Function By Reflection\n\t\tUE_LOG(LogTemp, Log, TEXT(&quot;[ Invoke Transfer Class Function ]&quot;));\n\t\tif (UFunction *SubStudent02Function &#x3D; SubStudent01Class-&gt;FindFunctionByName(\n\t\t\tTEXT(&quot;IsBoy&quot;), EIncludeSuperFlag::ExcludeSuper))\n\t\t&#123;\n\n\t\t\t&#x2F;&#x2F; 1.Allocate Space For Parameters\n\t\t\tuint16 *AllParamMemory02 &#x3D; static_cast&lt;uint16*&gt;FMemory_Alloca(SubStudent02Function-&gt;ParmsSize);\n\t\t\tFMemory::Memzero(AllParamMemory02, SubStudent02Function-&gt;ParmsSize);\n\n\t\t\t&#x2F;&#x2F; 2.Create FFrame\n\t\t\tFFrame Frame(nullptr, SubStudent02Function, &amp;AllParamMemory02);\n\n\t\t\t&#x2F;&#x2F; 3.Invoke Function\n\t\t\tSubStudent02Function-&gt;Invoke(SubStudent02Function, Frame,\n\t\t\t\t&amp;AllParamMemory02 + SubStudent02Function-&gt;ReturnValueOffset);\n\n\t\t\t&#x2F;&#x2F; 4. Get Function Return Value\n\t\t\tint *ReturnValue &#x3D; reinterpret_cast&lt;int*&gt;(&amp;AllParamMemory02 + SubStudent02Function-&gt;ReturnValueOffset);\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(&quot;&lt;-- Return Value: %d --&gt;&quot;), *ReturnValue);\n\t\t&#125;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>打印结果：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">LogTemp: [ Invoke Transfer Class Function ]\nLogTemp: Warning: &lt;-- SubStudent::IsBoy&gt;&gt; Is Boy --&gt;\nLogTemp: Warning: &lt;-- Return Value: 1 --&gt;</code></pre></li>\n</ol>\n","text":"UE4 反射编程1. 准备工作 新建空白ue4 cpp项目：Reflective 打开ReflectiveGameModeBase.h #pragma once #include &quot;CoreMinimal.h&quot; #include &quot;GameFrame...","link":"","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/tags/UnrealEngine.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UE4-%E5%8F%8D%E5%B0%84%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">UE4 反射编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">1. 准备工作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%90%8D\"><span class=\"toc-text\">2. 获取类名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%8E%B7%E5%8F%96%E7%B1%BB%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">3. 获取类标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">4. 获取类属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%85%83%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">5. 获取类属性元数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E8%AE%BE%E7%BD%AE%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%80%BC\"><span class=\"toc-text\">6. 设置类属性值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E8%8E%B7%E5%BE%97%E7%B1%BB%E5%87%BD%E6%95%B0%E5%90%8D\"><span class=\"toc-text\">7. 获得类函数名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%87%BD%E6%95%B0%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">8. 获取类函数标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">9. 获取类函数参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">10. 获取类函数参数标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E8%8E%B7%E5%8F%96%E7%88%B6%E7%B1%BB\"><span class=\"toc-text\">11. 获取父类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E5%AD%90%E7%B1%BB\"><span class=\"toc-text\">12. 判断是否是子类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E6%9F%A5%E6%89%BE%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%90%E7%B1%BB\"><span class=\"toc-text\">13. 查找类的所有子类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-%E6%9F%A5%E6%89%BE%E7%B1%BB%E7%94%9F%E6%88%90%E7%9A%84%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">14. 查找类生成的所有对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E9%80%9A%E8%BF%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E7%B1%BB\"><span class=\"toc-text\">15. 通过字符串查找类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-%E9%80%9A%E8%BF%87%E5%AD%97%E7%AC%A6%E6%9F%A5%E6%89%BE%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">16. 通过字符查找枚举</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-%E8%8E%B7%E5%BE%97%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%89%80%E6%9C%89%E9%A1%B9\"><span class=\"toc-text\">17. 获得枚举的所有项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-%E9%80%9A%E8%BF%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E8%93%9D%E5%9B%BE%E7%B1%BB\"><span class=\"toc-text\">18. 通过字符串查找蓝图类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#19-%E5%88%A4%E6%96%AD%E8%93%9D%E5%9B%BE%E6%98%AF%E5%90%A6%E6%98%AFNative\"><span class=\"toc-text\">19. 判断蓝图是否是Native</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#20-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E7%B1%BB\"><span class=\"toc-text\">20. 获取所有类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-%E9%80%9A%E8%BF%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E7%B1%BB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">21. 通过字符串查找类函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22-ProcessEvent%E8%B0%83%E7%94%A8%E7%B1%BB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">22. ProcessEvent调用类函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-Invoke%E8%B0%83%E7%94%A8%E7%B1%BB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">23. Invoke调用类函数</span></a></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":{"img":"/img/fh.png"},"link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"https://twitter.com/nUCFA2659We0pmu","stackoverflow":"https://stackoverflow.com/users/20173508/user20173508","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"UE4 功能整理","uid":"8d0c33a1aee99d366309310c2d2adece","slug":"7_UE4功能整理_09","date":"2022-10-06T07:28:25.960Z","updated":"2022-08-02T09:38:12.820Z","comments":true,"path":"api/articles/7_UE4功能整理_09.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN/Post_Img_mini/postImg_31.jpg","text":"UE4 功能整理1. SpawnActor情景： 我有一个Cpp类 这个Cpp类要生成一个其他Cpp或蓝图类 可以使用TSubclassOf&lt;&gt; 示例： 定义 private: UPROPERTY(EditDefaultsOnly, BlueprintReadWrit...","link":"","photos":[],"count_time":{"symbolsCount":"71k","symbolsTime":"1:04"},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":{"img":"/img/fh.png"},"link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"https://twitter.com/nUCFA2659We0pmu","stackoverflow":"https://stackoverflow.com/users/20173508/user20173508","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"UE4初始设置及个人使用崩溃记录","uid":"c7d8b276a0f55310d3a5259cec001a89","slug":"7_UE4初始设置及个人使用崩溃记录_01","date":"2022-10-06T07:28:25.955Z","updated":"2022-05-19T04:29:58.516Z","comments":true,"path":"api/articles/7_UE4初始设置及个人使用崩溃记录_01.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN/Post_Img_mini/postImg_10.jpg","text":"日志：1.第一次记录：2020.2.05 版本：4.24.2 UnrealEngine的初始设置1.在Epic中下载UnrealEngine4之后1-1. 首先：启动-选项 1-2. 接着 ：（勾选）输入调试用符号-应用以后出现新的崩溃问题，方便查看详细原因 2.进行UE4相关的...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":{"img":"/img/fh.png"},"link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"https://twitter.com/nUCFA2659We0pmu","stackoverflow":"https://stackoverflow.com/users/20173508/user20173508","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}