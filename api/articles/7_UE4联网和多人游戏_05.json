{"title":"UE4 联网和多人游戏","uid":"d2dc88f9aa1b74a2f377fe04af877f8c","slug":"7_UE4联网和多人游戏_05","date":"2022-10-06T07:28:25.963Z","updated":"2022-10-07T13:00:22.198Z","comments":true,"path":"api/articles/7_UE4联网和多人游戏_05.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (21).webp","content":"<h1 id=\"UE4-联网和多人游戏\"><a href=\"#UE4-联网和多人游戏\" class=\"headerlink\" title=\"UE4 联网和多人游戏\"></a>UE4 联网和多人游戏</h1><p><strong>复制Replication</strong>：在客户端服务器间同步数据和调用程序的过程</p>\n<h3 id=\"1-网络概述\"><a href=\"#1-网络概述\" class=\"headerlink\" title=\"1. 网络概述\"></a>1. 网络概述</h3><h4 id=\"1-1-尽早规划多人游戏\"><a href=\"#1-1-尽早规划多人游戏\" class=\"headerlink\" title=\"1.1 尽早规划多人游戏\"></a>1.1 尽早规划多人游戏</h4><ul>\n<li>若项目可能需要多人游戏功能，则从项目开始阶段起，构建所有gameplay时都应将多人游戏功能考虑在内，便于进行调试和维护，且支持单人</li>\n<li>若是单人游戏改为多人，重构无网络情况下编译的基本代码需要梳理整个项目，几乎所有gameplay都需要重新编写</li>\n</ul>\n<h4 id=\"1-2-客户端-服务器模型\"><a href=\"#1-2-客户端-服务器模型\" class=\"headerlink\" title=\"1.2 客户端-服务器模型\"></a>1.2 客户端-服务器模型</h4><ul>\n<li><p><strong>单人游戏或本地多人游戏</strong>：</p>\n<ul>\n<li>游戏在 <code>独立</code>游戏上本地运行。玩家将输入连接到一台计算机，直接控制其上所有内容，而包括Actor、场景和各玩家的用户界面在内的所有游戏项目均存在于这台本地机器上</li>\n</ul>\n</li>\n<li><p><strong>网络多人游戏</strong>：</p>\n<ul>\n<li><p>虚幻引擎使用 <code>客户端-服务器</code>模型</p>\n</li>\n<li><p>网络中的一台计算机作为 <code>服务器</code> 主持多人游戏会话，而所有其他玩家的计算机作为 <code>客户端</code> 连接到该服务器。然后，服务器与连接的客户端分享游戏状态信息，并提供一种客户端之间通信的方法</p>\n<p><strong>客户端和服务端</strong>：</p>\n<ul>\n<li>在网络多人游戏中，游戏将在服务器（1）与多个与之连接的客户端（2）之间进行。服务器处理gameplay，客户端向用户显示游戏</li>\n<li>服务器是多人游戏实际发生的地方</li>\n<li>客户端会远程控制其在服务器上各自拥有的 <code>Pawn</code>， 发送过程调用以使其执行游戏操作</li>\n<li>服务器不会将视觉效果直接流送至客户端显示器。服务器会将游戏状态信息 <strong>复制</strong> 到各客户端，告知应存在的Actor、此类Actor的行为，以及不同变量应拥有的值</li>\n<li>客户端使用此信息，对服务器上正在发生的情况进行高度模拟</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-2-1-客户端-服务器游戏范例\"><a href=\"#1-2-1-客户端-服务器游戏范例\" class=\"headerlink\" title=\"1.2.1 客户端-服务器游戏范例\"></a>1.2.1 客户端-服务器游戏范例</h5><ul>\n<li>分别以<code>本地游戏</code>和<code>多人游戏</code>为范例，说明<code>GamePlay</code>的处理逻辑</li>\n<li>本地游戏：玩家1</li>\n<li>多人游戏：玩家2</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">本地游戏</th>\n<th align=\"left\">网络游戏</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Overview/LocalMultiplayerExample.jpg\" alt=\"本地运行范例\"></td>\n<td align=\"left\"><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Overview/ClientServerExample.jpg\" alt=\"网络运行范例2\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>玩家1按下输入以发射武器</code><br />玩家1的Pawn将发射其当前武器以响应此操作。<br />玩家1的武器生成发射物，并播放附带音效和视觉效果。</td>\n<td align=\"left\"><code>玩家1在本地机器上按下输入以发射武器</code><br />玩家1的本地Pawn将武器发射命令传送给服务器上对应的Pawn。<br />玩家1在服务器上的武器生成发射物。<br />服务器告知所有连接的客户端各自生成玩家1发射物的副本。<br />玩家1在服务器上的武器告知所有客户端播放武器发射音效和视觉效果。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>玩家1的发射物从武器中射出并前移</code></td>\n<td align=\"left\"><code>玩家1的发射物从在服务器上的武器中射出并前移</code><br />此时，服务器告知所有客户端复制玩家1发射物发生的移动，因此各客户端上的玩家1发射物便相应移动。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>玩家1的发射物撞击玩家2的Pawn</code><br />碰撞将触发摧毁玩家1发射物的函数，对玩家2的Pawn造成伤害，并播放附带音效和视觉效果。<br />玩家2播放画面效果，作为对伤害的响应。</td>\n<td align=\"left\"><code>玩家1在服务器上的发射物撞击玩家2的Pawn</code><br />碰撞触发摧毁服务器上玩家1发射物的函数。<br />服务器自动告知所有客户端各自摧毁玩家1发射物副本。<br />碰撞触发告知所有客户端播放附带碰撞音效和视觉效果的函数。<br />玩家2在服务器上的Pawn承受发射物碰撞造成的伤害。<br />玩家2在服务器上的Pawn告知玩家2客户端播放画面效果，作为对伤害的响应。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>网络游戏中</strong>：<ul>\n<li>此类交互发生在多个不同场景，这一过程将在基础游戏交互（碰撞、移动、伤害）、美化效果（视觉效果和音效）和私人玩家信息（HUD更新）间进行划分。这三者各自与网络中的特定机器或机组关联</li>\n<li>此信息的复制过程并非完全自动，游戏编程时须指定要复制的信息和接收副本的机器</li>\n<li>主要的难点在于选择应复制的信息及方式，以向所有玩家提供一致的游戏体验，同时需最小化信息复制量，尽可能减少网络带宽占用率</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-3-基本网络概念\"><a href=\"#1-3-基本网络概念\" class=\"headerlink\" title=\"1.3 基本网络概念\"></a>1.3 基本网络概念</h4><h5 id=\"1-3-1-网络模式和服务器类型\"><a href=\"#1-3-1-网络模式和服务器类型\" class=\"headerlink\" title=\"1.3.1 网络模式和服务器类型\"></a>1.3.1 网络模式和服务器类型</h5><ul>\n<li><strong>网络模式</strong>：<ul>\n<li>描述了计算机与网络多人游戏会话的关系</li>\n<li>游戏实例可采用以下任意网络模式</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">网络模式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>独立</code></td>\n<td>游戏作为服务器运行，不接受远程客户端连接<br />参与游戏的玩家必须为本地玩家<br />此模式用于单人游戏和本地多人游戏<br />其将运行本地玩家适用的服务器逻辑和客户端逻辑</td>\n</tr>\n<tr>\n<td align=\"left\"><code>客户端</code></td>\n<td>游戏作为网络多人游戏会话中与服务器连接的客户端运行<br />其不会运行服务器逻辑</td>\n</tr>\n<tr>\n<td align=\"left\"><code>聆听服务器</code></td>\n<td>游戏作为主持网络多人游戏会话的服务器运行<br />其接受远程客户端中的连接，且直接在服务器上拥有本地玩家<br />此模式通常用于临时合作和竞技多人游戏</td>\n</tr>\n<tr>\n<td align=\"left\"><code>专属服务器</code></td>\n<td>游戏作为主持网络多人游戏会话的服务器运行<br />其接受远程客户端中的连接，但无本地玩家，因此为了高效运行，其将废弃图形、音效、输入和其他面向玩家的功能<br />此模式常用于需要更固定、安全和大型多人功能的游戏</td>\n</tr>\n</tbody></table>\n<ul>\n<li>独立游戏服务器可同时作为服务器和客户端，为多人游戏创建的逻辑可在无需额外工作的情况下，在单人游戏中运行</li>\n</ul>\n<h5 id=\"1-3-2-Actor复制\"><a href=\"#1-3-2-Actor复制\" class=\"headerlink\" title=\"1.3.2 Actor复制\"></a>1.3.2 Actor复制</h5><ul>\n<li><strong>描述</strong>：<ul>\n<li>复制是指在网络会话中的不同机器间复制游戏状态信息</li>\n<li>若正确设置复制，将可同步不同机器的游戏实例</li>\n<li>在C++ Actor类中设置 <code>bReplicates</code> 变量，或将Actor蓝图的 <code>复制（Replicates）</code>设置设为 <code>true</code>，可启用给定类的Actor复制</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"1-3-2-1-常见复制功能\"><a href=\"#1-3-2-1-常见复制功能\" class=\"headerlink\" title=\"1.3.2.1 常见复制功能\"></a>1.3.2.1 常见复制功能</h6><table>\n<thead>\n<tr>\n<th align=\"left\">复制功能</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>创建和销毁</strong></td>\n<td align=\"left\">服务器上生成复制Actor的授权版本时，其会在所有连接客户端上自动生成远程代理。<br />其之后会将信息复制到这些远程代理。<br />若销毁授权Actor，则将自动销毁所有连接客户端上的远程代理。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>移动复制</strong></td>\n<td align=\"left\">若授权Actor启用了 <strong>复制移动</strong>，或将C++中的 <code>bReplicateMovement</code> 设为 <code>true</code>，其将自动复制位置、旋转和速度。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>变量复制</strong></td>\n<td align=\"left\">在指定为复制变量的值变更时，其将自动从授权Actor复制到其远程代理。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>组件复制</strong></td>\n<td align=\"left\">Actor组件复制为其所属Actor的一部分。<br />组件内指定为复制变量将复制，而组件内调用的RPC将与Actor类中调用的RPC保持一致。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>远程过程调用（RPC）</strong></td>\n<td align=\"left\">RPC是传输到网络游戏中特定机器的特殊函数。<br />无论初始调用RPC的是哪台机器，其的实现仅在目标机器上运行。<br />此类RPC可指定为服务器（仅在服务器上运行）、客户端（仅在Actor的拥有客户端上运行）或NetMulticast（在连接会话的所有机器上运行，包括服务器）。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>虽然创建、销毁和移动等常见使用可自动处理，但即使启用复制，其他所有gameplay功能也不会默认自动复制</li>\n<li>必须根据游戏的需求明确指定要复制的变量和函数</li>\n</ul>\n<p><code>Actor</code>、<code>Pawn</code>和<code>角色</code>的部分常用功能不会复制：</p>\n<ul>\n<li><strong>骨架网格体</strong> 和 <strong>静态网格体</strong> 组件</li>\n<li><strong>材质</strong></li>\n<li><strong>动画蓝图</strong></li>\n<li><strong>粒子系统</strong></li>\n<li><strong>音效发射器</strong></li>\n<li><strong>物理对象</strong></li>\n</ul>\n<h6 id=\"1-3-2-2-网络角色和授权\"><a href=\"#1-3-2-2-网络角色和授权\" class=\"headerlink\" title=\"1.3.2.2 网络角色和授权\"></a>1.3.2.2 网络角色和授权</h6><ul>\n<li><strong>描述</strong>：<ul>\n<li>Actor的 <strong>网络角色</strong> 将决定网络游戏期间控制Actor的机器</li>\n<li><strong>授权</strong> Actor被认为可控制Actor的状态，并可将信息复制到网络多人游戏会话中的其他机器上</li>\n<li><strong>远程代理</strong> 是该Actor在远程机器上的副本，其将接收授权Actor中的复制信息，由 <strong>Local Role</strong> 和 <strong>Remote Role</strong> 变量进行追踪</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">网络角色</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>无</strong></td>\n<td align=\"left\">Actor在网络游戏中无角色，不会复制。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>授权</strong></td>\n<td align=\"left\">Actor为授权状态，会将其信息复制到其他机器上的远程代理。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>模拟代理</strong></td>\n<td align=\"left\">Actor为远程代理，由另一台机器上的授权Actor完全控制。<br />网络游戏中如拾取物、发射物或交互对象等多数Actor将在远程客户端上显示为模拟代理。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>自主代理</strong></td>\n<td align=\"left\">Actor为远程代理，能够本地执行部分功能，但会接收授权Actor中的矫正。<br />自主代理通常为玩家直接控制的actor所保留，如pawn。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>虚幻引擎使用的默认模型是 <strong>服务器授权</strong>，意味着服务器对游戏状态固定具有权限，而信息固定从服务器复制到客户端</li>\n<li>服务器上的Actor应具有授权的本地角色，而其在远程客户端上的对应Actor应具有模拟或自主代理的本地角色</li>\n</ul>\n<h6 id=\"1-3-2-3-客户端拥有权\"><a href=\"#1-3-2-3-客户端拥有权\" class=\"headerlink\" title=\"1.3.2.3 客户端拥有权\"></a>1.3.2.3 客户端拥有权</h6><ul>\n<li>特定客户端机器上的 <strong>PlayerController</strong> 拥有网络游戏中的pawn</li>\n<li>Pawn调用纯客户端函数时，其将无视调用函数的机器，而仅指向拥有玩家的机器</li>\n<li>将Actor的 <strong>Owner</strong> 变量设为特定Pawn，则通关关联，该Actor属于该Pawn的拥有客户端，并将纯客户端函数指向其拥有者的机器</li>\n<li>C++中的 <code>IsLocallyControlled</code> 函数，或蓝图中的 <strong>Is Locally Controlled</strong> 节点，以决定Pawn是否在其拥有客户端上</li>\n<li>由于构造期间Pawn可能未指定控制器，因此避免在自定义Pawn类的构造函数中使用 <code>IsLocallyControlled</code></li>\n</ul>\n<h6 id=\"1-3-2-4-相关性和优先级\"><a href=\"#1-3-2-4-相关性和优先级\" class=\"headerlink\" title=\"1.3.2.4 相关性和优先级\"></a>1.3.2.4 相关性和优先级</h6><ul>\n<li><p><strong>相关性</strong>：用于决定是否需要在多人游戏期间复制Actor</p>\n<ul>\n<li>复制期间将剔除被认为不相关的actor，此操作可节约带宽，以便相关Actor可更加高效地复制</li>\n<li>若Actor未被玩家拥有，且不在玩家附近，将其被视为不相关，而不会进行复制</li>\n<li>不相关Actor会存在于服务器上，且会影响授权游戏状态，但在玩家靠近前不会向客户端发送信息</li>\n<li>覆盖 <code>IsNetRelevantFor</code> 函数以手动控制相关性，并可使用 <code>NetCullDistanceSquared</code> 属性决定成为相关Actor所需距离</li>\n</ul>\n</li>\n<li><p><strong>优先级</strong>：有时在游戏单帧内，没有足够带宽供复制所有相关Actor，因此，Actor拥有 <strong>优先级(Priority)</strong> 值，用于决定优先复制的Actor</p>\n<ul>\n<li>Pawn和PlayerController的 <code>NetPriority</code> 默认为 <strong>3.0</strong>，从而使其成为游戏中最高优先级的Actor，基础Actor的 <code>NetPriority</code> 为 <strong>1.0</strong></li>\n<li>Actor在被复制前经历的时间越久，每次成功通过时所处的优先级便越高</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-3-3-变量复制\"><a href=\"#1-3-3-变量复制\" class=\"headerlink\" title=\"1.3.3 变量复制\"></a>1.3.3 变量复制</h5><ul>\n<li><p><strong>描述</strong>：授权Actor上复制变量的值变更时，其信息将自动从授权Actor发送到连接会话的远程代理</p>\n<ul>\n<li><p>C++中使用对应 <code>UPROPERTY</code> 宏内的 <code>Replicated</code> 或 <code>ReplicateUsing</code> 说明符</p>\n</li>\n<li><p>蓝图的细节面板中将它们指定为已复制，可将复制添加到变量和对象引用</p>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"1-3-3-1-RepNotify\"><a href=\"#1-3-3-1-RepNotify\" class=\"headerlink\" title=\"1.3.3.1 RepNotify\"></a>1.3.3.1 RepNotify</h6><ul>\n<li><p><strong>描述</strong>：可指定在Actor成功接收特定变量的复制信息时要调用的 <strong>RepNotify</strong> 函数</p>\n<ul>\n<li>RepNotify仅在变量更新时本地触发</li>\n<li>触发gameplay逻辑响应授权Actor上的变量更改时，使用RepNotify可减少开销</li>\n<li>在C++中使用变量的 <code>UPROPERTY</code> 宏的 <code>ReplicatedUsing</code> 说明符可访问此功能</li>\n<li>蓝图中变量的复制设置以使用RepNotify</li>\n</ul>\n</li>\n<li><p><strong>补充</strong>：由于RepNotify可添加到需复制的变量中，而无需考虑其他gameplay功能，创建额外网络调用时刻节约大量带宽，因此RepNotify比RPC或复制函数更加好用</p>\n</li>\n</ul>\n<h5 id=\"1-3-4-远程过程调用-RPC\"><a href=\"#1-3-4-远程过程调用-RPC\" class=\"headerlink\" title=\"1.3.4 远程过程调用(RPC)\"></a>1.3.4 远程过程调用(RPC)</h5><ul>\n<li><strong>描述</strong>：远程过程调用也称为复制函数<ul>\n<li>可在任何机器上进行调用，但会指示其的实现在与网络会话连接的特定机器上发生</li>\n<li>有三种类型的RPC</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">RPC类型</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>Server</strong></td>\n<td align=\"left\">仅在主持游戏的服务器上调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Client</strong></td>\n<td align=\"left\">仅在拥有该函数所属Actor的客户端上调用。若Actor无拥有连接，将不会执行此逻辑。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>NetMulticast</strong></td>\n<td align=\"left\">在与服务器连接的所有客户端及服务器本身上调用。</td>\n</tr>\n</tbody></table>\n<p><strong>蓝图：</strong></p>\n<ul>\n<li>CustomEvent 的 Replicates 选项设置为其中一个<ul>\n<li>Run On Server</li>\n<li>Run On Owning Client</li>\n<li>Net MultiCast</li>\n</ul>\n</li>\n<li>要勾选<code>Reliable</code></li>\n</ul>\n<p><strong>C++：</strong></p>\n<ul>\n<li><p>将一个自定义的函数声明为RPC，需要添加反射<code>UFUNCTION()</code></p>\n<ul>\n<li>Server</li>\n<li>Client</li>\n<li>NetMultiCast</li>\n</ul>\n</li>\n<li><p>额外添加<code>Reliable</code></p>\n</li>\n<li><p>其代码将在代码实现中使用后缀 <code>_Implementation</code></p>\n</li>\n<li><p><strong>ExampleClass.h</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;服务器RPC MyFunction的声明。\nUFUNCTION(Server, Reliable, WithValidation)\nvoid MyFunction(int myInt);</code></pre>\n</li>\n<li><p><strong>ExampleClass.cpp</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;服务器RPC MyFunction的实现。\nvoid AExampleClass::MyFunction_Implementation(int myInt)\n&#123;\n    &#x2F;&#x2F;游戏代码在此。\n&#125;</code></pre></li>\n</ul>\n<h6 id=\"1-3-4-1-可靠性\"><a href=\"#1-3-4-1-可靠性\" class=\"headerlink\" title=\"1.3.4.1 可靠性\"></a>1.3.4.1 可靠性</h6><ul>\n<li><p><strong>描述</strong>：必须将RPC指定为 <strong>可靠</strong> 或 <strong>不可靠</strong></p>\n<ul>\n<li><p><strong>不可靠</strong>：</p>\n<ul>\n<li>不可靠RPC无法保证必会到达预定目的地，但其发送速度和频率高于可靠的RPC</li>\n<li>最适用于对gameplay而言不重要或经常调用的函数</li>\n<li>例如，由于Actor移动每帧都可能变换，因此使用不可靠RPC复制该Actor移动</li>\n</ul>\n</li>\n<li><p><strong>可靠</strong>：</p>\n<ul>\n<li>可靠的RPC保证到达预定目的地，并在成功接收之前一直保留在队列中</li>\n<li>最适合用于对gameplay很关键或者不经常调用的函数</li>\n<li>相关例子包括碰撞事件、武器发射的开始或结束，或生成Actor</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>注意</strong>：</p>\n<ul>\n<li>滥用可靠函数可能导致其队列溢出，此操作将强制断开连接</li>\n<li>若逐帧调用复制函数，应将其设为不可靠</li>\n<li>若拥有与玩家输入绑定的可靠函数，应限制玩家调用该函数的频率</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"1-3-4-2-验证\"><a href=\"#1-3-4-2-验证\" class=\"headerlink\" title=\"1.3.4.2 验证\"></a>1.3.4.2 验证</h6><ul>\n<li><p><strong>描述</strong>：<code>WithValidation</code> 说明符表明除函数的实现外，还有可验证传入函数调用的数据的函数</p>\n<ul>\n<li>此验证函数与其负责的函数使用同一签名，但其将返回布尔而非原本返回值</li>\n<li>若返回 <code>true</code>，则其允许执行RPC的 <code>Implementation</code>；若返回 <code>false</code>，则防止执行</li>\n</ul>\n</li>\n<li><p><strong>ExampleClass.cpp</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;服务器RPC MyFunction的验证\nbool AExampleClass::MyFunction_Validation(int myInt)\n&#123;\n    &#x2F;* \n        若myInt的值为负，建议不允许运行MyFunction_Implementation。 \n        因此仅在myInt大于零时返回true。\n    *&#x2F;\n    return myInt &gt;&#x3D; 0;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"2-提示和深入阅读\"><a href=\"#2-提示和深入阅读\" class=\"headerlink\" title=\"2. 提示和深入阅读\"></a>2. 提示和深入阅读</h3><ul>\n<li><strong>描述</strong>：戏中实现高效、稳定多人游戏系统的基本指南</li>\n</ul>\n<h4 id=\"2-1-基本复制Actor清单\"><a href=\"#2-1-基本复制Actor清单\" class=\"headerlink\" title=\"2.1 基本复制Actor清单\"></a>2.1 基本复制Actor清单</h4><ul>\n<li>将Actor的复制设置设为True</li>\n<li>若复制Actor需要移动，将复制移动（Replicates Movement）设为True</li>\n<li>生成或销毁复制Actor时，确保在服务器上执行该操作</li>\n<li>设置必须在机器间共享的变量，以便进行复制。这通常适用于以gameplay为基础的变量</li>\n<li>尽量使用虚幻引擎的预制移动组件，其已针对复制进行构建</li>\n<li>若使用服务器授权模型，需确保玩家可执行的新操作均由服务器函数触发</li>\n</ul>\n<h4 id=\"2-2-网络提示\"><a href=\"#2-2-网络提示\" class=\"headerlink\" title=\"2.2 网络提示\"></a>2.2 网络提示</h4><ul>\n<li>尽可能少用RPC或复制蓝图函数。在合适情况下改用RepNotify</li>\n<li>组播函数会导致会话中各连接客户端的额外网络流量，需尤其少用</li>\n<li>若能保证非复制函数仅在服务器上执行，则服务器RPC中无需包含纯服务器逻辑</li>\n<li>将可靠RPC绑定到玩家输入时需谨慎。玩家可能会快速反复点击按钮，导致可靠RPC队列溢出。应采取措施限制玩家激活此项的频率</li>\n<li>若游戏频繁调用RPC或复制函数，如tick时，则应将其设为不可靠</li>\n<li>部分函数可重复使用。调用其响应游戏逻辑，然后调用其响应RepNotify，确保客户端和服务器拥有并列执行即可</li>\n<li>检查Actor的网络角色可查看其是否为 <code>ROLE_Authority</code>。此方法适用于过滤函数中的执行，该函数同时在服务器和客户端上激活</li>\n<li>使用C++中的 <code>IsLocallyControlled</code> 函数或蓝图中的Is Locally Controlled函数，可检查Pawn是否受本地控制。基于执行是否与拥有客户端相关来过滤函数时，此方法十分有用</li>\n<li>构造期间Pawn可能未被指定控制器，因此避免在构造函数脚本中使用 <code>IsLocallyControlled</code></li>\n</ul>\n<h3 id=\"3-Actor-复制\"><a href=\"#3-Actor-复制\" class=\"headerlink\" title=\"3. Actor 复制\"></a>3. Actor 复制</h3><p>Actor 主要通过两种方式进行更新：</p>\n<ul>\n<li>属性更新</li>\n<li>RPC （远程过程调用）</li>\n<li>属性更新和 RPC 的主要区别在于，属性可以在发生变化时随时自动更新，而 RPC 只能在被执行时获得调用更新</li>\n</ul>\n<p>复制例子：Actor 的健康值</p>\n<ul>\n<li>当健康值发生变化时，您通常都希望告知客户端。如果健康值没有变化，则不会发送任何数据</li>\n<li>即使这个属性没有变化（因此不消耗任何带宽），它仍然会消耗 CPU 资源来判断这个值是否发生变化</li>\n<li>适合那些经常变化的属性</li>\n</ul>\n<p>RPC例子：同一场爆炸</p>\n<ul>\n<li>可以以位置和半径为参数的 RPC 函数，同时在每次发生爆炸时调用它</li>\n<li>也可以将此存储为一组属性，通过同步的方式将其传达给客户端</li>\n<li>这种做法会损失一些效率，因为爆炸出现的频繁度也许不会高得有必要将它们作为属性</li>\n</ul>\n<h4 id=\"3-1-组件复制\"><a href=\"#3-1-组件复制\" class=\"headerlink\" title=\"3.1 组件复制\"></a>3.1 组件复制</h4><h5 id=\"3-1-1-组件复制介绍\"><a href=\"#3-1-1-组件复制介绍\" class=\"headerlink\" title=\"3.1.1 组件复制介绍\"></a>3.1.1 组件复制介绍</h5><p>介绍：</p>\n<ul>\n<li>虚幻引擎 4 支持组件复制</li>\n<li>大多数组件都不会复制</li>\n<li>多数游戏逻辑都是在 Actor 类和组件中完成，而它们 通常只代表了构成 Actor 的零散部分</li>\n<li>实际复制的是 Actor 中的游戏逻辑，而这样做的结果，有时会调用&#x2F;更改组件</li>\n<li>有些情况下，组件本身的属性或事件必须要直接复制</li>\n<li>一旦复制了 Actor，它就可以复制自身组件</li>\n<li>这些组件 可以按 Actor 的方式复制属性和 RPC</li>\n<li>组件必须以 Actor 的方式实施 <code>::GetLifetimeReplicatedProps (...)</code> 函数</li>\n</ul>\n<p>组件复制涉及两大类组件：</p>\n<ul>\n<li><p>静态组件：一种是随 Actor 一起创建的组件</p>\n<ul>\n<li>在客户端或服务器上生成 所属 Actor 时，这些组件也会同时生成，与组件是否被复制无关</li>\n<li>服务器不会告知客户端显式生成这些组件</li>\n<li>静态组件无需通过复制存在于客户端</li>\n<li>只有在属性或事件需要在服务器和客户端之间自动同步时，才需要进行复制</li>\n</ul>\n</li>\n<li><p>动态组件：运行时在服务器上生成的组件种，其创建和删除操作也将被复制到客户端</p>\n<ul>\n<li>运行方式与 Actor 极为一致</li>\n<li>动态组件需通过复制的方式存在于所有客户端</li>\n<li>客户端可以生成自己的本地非复制组件，当那些在服务器上触发的 属性或事件需要自动同步到客户端时，才会出现复制行为</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-1-2-使用方式\"><a href=\"#3-1-2-使用方式\" class=\"headerlink\" title=\"3.1.2 使用方式\"></a>3.1.2 使用方式</h5><ul>\n<li><p>在组件上设置属性和 RPC 的过程与 Actor 并无区别</p>\n</li>\n<li><p>将一个类设置为具有复本后，这些组件的实际实例也必须经过设置后才能复制</p>\n</li>\n<li><p>C++</p>\n</li>\n<li><p>调用 <code>AActorComponent::SetIsReplicated(true)</code> 即可</p>\n</li>\n<li><p>如果组件是一个默认子对象，就应当在生成组件之后通过类构造函数来完成此调用</p>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">ACharacter::ACharacter()\n&#123;\n    &#x2F;&#x2F; Etc...\n\n    CharacterMovement &#x3D; CreateDefaultSubobject&lt;UMovementComp_Character&gt;(TEXT(&quot;CharMoveComp&quot;));\n    if (CharacterMovement)\n    &#123;\n        CharacterMovement-&gt;UpdatedComponent &#x3D; CapsuleComponent;\n\n        CharacterMovement-&gt;GetNavAgentProperties()-&gt;bCanJump &#x3D; true;\n        CharacterMovement-&gt;GetNavAgentProperties()-&gt;bCanWalk &#x3D; true;\n        CharacterMovement-&gt;SetJumpAllowed(true);\n        CharacterMovement-&gt;SetNetAddressable(); &#x2F;&#x2F; Make DSO components net addressable\n        CharacterMovement-&gt;SetIsReplicated(true); &#x2F;&#x2F; Enable replication by default\n\n    &#125;\n&#125;</code></pre>\n\n\n</li>\n<li><p>蓝图</p>\n</li>\n<li><p>要进行静态蓝图组件复制，只需在组件默认设置中切换 <strong>Replicates</strong> 布尔变量</p>\n</li>\n<li><p>静态组件需要在客户端和服务器上隐式创建</p>\n</li>\n<li><p>并非所有组件都会如此显示，必须要支持某种复制形式才会显示</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/Components/components_checkbox.jpg\" alt=\"components_checkbox.png\"></p>\n</li>\n<li><p>通过动态生成的组件来实现这一点，可以调用 <strong>SetIsReplicated</strong> 函数</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/Components/components_function.jpg\" alt=\"components_function.png\"></p>\n</li>\n</ul>\n<h5 id=\"3-1-3-时间轴\"><a href=\"#3-1-3-时间轴\" class=\"headerlink\" title=\"3.1.3 时间轴\"></a>3.1.3 时间轴</h5><ul>\n<li>时间轴必须通过其属性中的 Replicated 选项来启用复制</li>\n<li>会将服务器控制的运行位置、速率和方向复制到客户端</li>\n<li>大多数时间轴都无需复制</li>\n<li>时间轴复本只应当在服务器上直接 操作 (start&#x2F;stop etc)</li>\n<li>客户端只应当查看运行位置的复本，而不应尝试改变时间轴本身</li>\n<li>在进行复制更新的间歇，客户端将推测 运行位置</li>\n</ul>\n<h5 id=\"3-1-4-带宽开销\"><a href=\"#3-1-4-带宽开销\" class=\"headerlink\" title=\"3.1.4 带宽开销\"></a>3.1.4 带宽开销</h5><ul>\n<li>复制组件时的资源开销是比较低的</li>\n<li>复制的 Actor 中的每个组件都需要添加一个额外的 NetGUID（4 字节）”标头”和一个大约 1 字节的”标脚”（footer） 及其属性</li>\n<li>在 CPU 层面上，基于 Actor 的属性复制与基于组件的复制之间应当有一个最小差异</li>\n</ul>\n<h5 id=\"3-1-5-一般性子对象复制\"><a href=\"#3-1-5-一般性子对象复制\" class=\"headerlink\" title=\"3.1.5 一般性子对象复制\"></a>3.1.5 一般性子对象复制</h5><ul>\n<li><p>所有 Actor 子对象都可以复制，而不只限于组件</p>\n</li>\n<li><p>对于希望复制非 ActorComponent 子对象的类，应当实施三种方法</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;** FActory 方法，用于对模板化 TobjectReplicator 类进行实例化，以便实现子对象复制 *&#x2F;\nvirtual class FObjectReplicatorBase * InstantiateReplicatorForSubObject(UClass *SubobjClass);\n\n&#x2F;** 能让 Actor 在其 Actor 通道上复制子对象的方法 *&#x2F;\nvirtual bool ReplicateSubobjects(class UActorChannel *Channel, class FOutBunch *Bunch, FReplicationFlags *RepFlags);\n\n&#x2F;** 通过复制来动态创建新的子对象时，在 Actor 上进行调用 *&#x2F;\nvirtual void OnSubobjectCreatedFromReplication(UObject *NewSubobject);</code></pre></li>\n</ul>\n<h6 id=\"3-1-5-1-使用情形\"><a href=\"#3-1-5-1-使用情形\" class=\"headerlink\" title=\"3.1.5.1 使用情形\"></a>3.1.5.1 使用情形</h6><ul>\n<li>能在 Actor 通道的层面上使用 UObject 和多态（polymorphism）</li>\n<li>之前用于复杂数据结构的复制方法只适合那些 在 Actor 类中对类型进行静态定义的结构</li>\n<li>利用子对象复制，建立一个道具栏系统，使其中的每个物品作为一个从基本道具栏类扩展而来的类， 也可以进行完整复制，同时无需让这些项成为 Actor（资源负担太大）</li>\n</ul>\n<h6 id=\"3-1-5-2-优化\"><a href=\"#3-1-5-2-优化\" class=\"headerlink\" title=\"3.1.5.2 优化\"></a>3.1.5.2 优化</h6><ul>\n<li><p>有很多子对象需要复制，Actor 只需了解哪些子对象（如存在）最近发生过变化且需要复制，从而节省了大量时间</p>\n</li>\n<li><p>通过访问器（accessor）函数来持续跟踪子对象的更改情况</p>\n</li>\n<li><p>所用的接口位于 UActorChannel 中</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool KeyNeedsToReplicate(int32 ObjID, int32 RepKey);</code></pre>\n</li>\n<li><p>该函数应当由 Actor 在其 <code>::ReplicateSubobjects</code> 实施中调用</p>\n</li>\n<li><p>Actor 类可以设置一个任意的对象 ID 和复制键，供复制系统跟踪每个客户端</p>\n</li>\n<li><p>对象 ID 和复制键完全是任意指定的</p>\n</li>\n<li><p>对象 ID 仅用于引用”事情”</p>\n<ul>\n<li>可以是整个子对象列表、部分列表或单个对象</li>\n</ul>\n</li>\n<li><p>复制键同样可以任意指定</p>\n<ul>\n<li>可以是一个在对象 ID 跟踪变化时递增的计数器</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-2-Actor及其所属连接\"><a href=\"#3-2-Actor及其所属连接\" class=\"headerlink\" title=\"3.2 Actor及其所属连接\"></a>3.2 Actor及其所属连接</h4><h5 id=\"3-2-1-连接\"><a href=\"#3-2-1-连接\" class=\"headerlink\" title=\"3.2.1 连接\"></a>3.2.1 连接</h5><ul>\n<li>每个连接都有一个专门为其创建的 PlayerController</li>\n<li>确定一个 actor 是否归某一连接所有，您可以查询这个 actor 最外围的所有者</li>\n<li>所有者是一个 PlayerController，则这个 actor 同样归属于拥有 PlayerController 的那个连接</li>\n</ul>\n<h5 id=\"3-2-2-确定连接\"><a href=\"#3-2-2-确定连接\" class=\"headerlink\" title=\"3.2.2 确定连接\"></a>3.2.2 确定连接</h5><ul>\n<li>在确定所属连接方面，组件有一些特殊之处<ul>\n<li>首先确定组件所有者，方法是遍历组件的”外链”，直到找出所属的 actor</li>\n<li>确定这个 actor 的所属连接，像上面那样继续下去</li>\n<li>连接所有权是以下情形中的重要因素：<ul>\n<li>RPC 需要确定哪个客户端将执行运行于客户端的 RPC</li>\n<li>Actor 复制与连接相关性</li>\n<li>在涉及所有者时的 Actor 属性复制条件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-2-3-连接的作用\"><a href=\"#3-2-3-连接的作用\" class=\"headerlink\" title=\"3.2.3 连接的作用\"></a>3.2.3 连接的作用</h5><ul>\n<li><p>连接所有权对于 RPC 这样的机制至关重要，因为当您在 actor 上调用 RPC 函数时</p>\n</li>\n<li><p>除非 RPC 被标记为多播，否则就需要知道要在哪个客户端上执行该 RPC</p>\n</li>\n<li><p>它可以查找所属连接来确定将 RPC 发送到哪条连接</p>\n</li>\n<li><p>连接所有权会在 actor 复制期间使用，用于确定各个 actor 上有哪些连接获得了更新</p>\n</li>\n<li><p>对于那些将 bOnlyRelevantToOwner 设置为 true 的 actor，只有拥有此 actor 的连接才会接收这个 actor 的属性更新</p>\n</li>\n<li><p>默认情况下，所有 PlayerController 都设置了此标志，正因如此，客户端才只会收到它们拥有的 PlayerController 的更新</p>\n</li>\n<li><p>最主要的是防止玩家作弊和提高效率</p>\n</li>\n<li><p>对于那些要用到所有者的 <a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/Actors/Properties/Conditions\">需要复制属性的情形</a> 来说，连接所有权具有重要意义：</p>\n<ul>\n<li>当使用 <code>COND_OnlyOwner</code> 时，只有此 actor 的所有者才会收到这些属性更新</li>\n</ul>\n</li>\n<li><p>所属连接对那些作为自治代理的 actor（角色为 <code>ROLE_AutonomousProxy</code>）来说也很重要</p>\n<ul>\n<li>这些 actor 的角色会降级为 <code>ROLE_SimulatedProxy</code>，其属性则被复制到不拥有这些 actor 的连接中</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-3-Actor相关性与优先级\"><a href=\"#3-3-Actor相关性与优先级\" class=\"headerlink\" title=\"3.3 Actor相关性与优先级\"></a>3.3 Actor相关性与优先级</h4><h5 id=\"3-3-1-相关性\"><a href=\"#3-3-1-相关性\" class=\"headerlink\" title=\"3.3.1 相关性\"></a>3.3.1 相关性</h5><p>前提：</p>\n<ul>\n<li>场景的规模可能非常大，在特定时刻某个玩家只能看到关卡中的一小部分 Actor</li>\n<li>场景中的其他大多数 Actor 都不会被看到和听到， 对玩家也不会产生显著的影响</li>\n<li>被服务器认为可见或能够影响客户端的 Actor 组会被视为该客户端的相关 Actor 组</li>\n</ul>\n<p>虚幻引擎的网络代码中包含一处重要的带宽优化：</p>\n<ul>\n<li>服务器只会让客户端知道其相关组内的 Actor</li>\n</ul>\n<p>参照以下规则确定玩家的相关 Actor 组：在虚拟函数 <code>AActor::IsNetRelevantFor()</code> 中实施</p>\n<ul>\n<li>如果 Actor 是 bAlwaysRelevant、归属于 Pawn 或 PlayerController、本身为 Pawn 或者 Pawn 是某些行为（如噪音或伤害）的发起者，则其具有相关性</li>\n<li>如果 Actor 是 bNetUseOwnerRelevancy 且拥有一个所有者，则使用所有者的相关性</li>\n<li>如果 Actor 是 bOnlyRelevantToOwner 且没有通过第一轮检查，则不具有相关性</li>\n<li>如果 Actor 被附加到另一个 Actor 的骨架模型，它的相关性将取决于其所在基础的相关性</li>\n<li>如果 Actor 是不可见的 (bHidden &#x3D;&#x3D; <em>true</em>) 并且它的 Root Component 并没有碰撞，那么则不具有相关性<ul>\n<li>如果没有 Root Component 的话，<code>AActor::IsNetRelevantFor()</code> 会记录一条警告，提示是否要将它设置为 bAlwaysRelevant&#x3D;<em>true</em></li>\n</ul>\n</li>\n<li>如果 AGameNetworkManager 被设置为使用基于距离的相关性，则只要 Actor 低于净剔除距离，即被视为具有相关性</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>Pawn 和 PlayerController 将覆盖 <code>AActor::IsNetRelevantFor()</code> 并最终具有不同的相关性条件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>距离检查在遇到大型 Actor 时可能会出现漏报（尽管我们用了一些启发式方法来应对），也不能处理环境声音的吸收</li>\n<li>相对于互联网的延迟和数据包丢失这些网络环境所固有的问题来说，这种近似法产生的错误就不那么明显了</li>\n</ul>\n<h5 id=\"3-3-2-优先级设定\"><a href=\"#3-3-2-优先级设定\" class=\"headerlink\" title=\"3.3.2 优先级设定\"></a>3.3.2 优先级设定</h5><p>介绍：虚幻引擎采用了负载平衡技术来安排所有 Actor 的优先级，并根据它们对游戏的重要性为其分别提供一个公平的带宽份额</p>\n<p>原理：</p>\n<ul>\n<li>每个 Actor 都有一个名为 NetPriority 的浮点变量</li>\n<li>变量的数值越大，Actor 相对于其他”同伴”的带宽就越多</li>\n<li>和优先级为 1.0 的 Actor 相比，优先级是 2.0 的 Actor 可以得到两倍的更新频度</li>\n<li>唯一影响优先顺序的就是它们的比值</li>\n<li>所以无法通过提高所有优先级的数值来增加虚幻引擎的网络性能</li>\n</ul>\n<p>例子：</p>\n<ul>\n<li>Actor &#x3D; 1.0</li>\n<li>Matinee &#x3D; 2.7</li>\n<li>Pawn &#x3D; 3.0</li>\n<li>PlayerController &#x3D; 3.0</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>计算 Actor 的当前优先级时使用了虚拟函数 <code>AActor::GetNetPriority()</code></li>\n<li>为避免出现<code>饥荒（starvation）</code>，<code>AActor::GetNetPriority()</code> 使用 Actor 上次复制后经过的时间 去乘以 <code>NetPriority</code></li>\n<li>同时，<code>GetNetPriority</code> 函数还考虑了 Actor 与观察者的相对位置以及两者之间的距离</li>\n</ul>\n<h4 id=\"3-4-Actor复制流程详述\"><a href=\"#3-4-Actor复制流程详述\" class=\"headerlink\" title=\"3.4 Actor复制流程详述\"></a>3.4 Actor复制流程详述</h4><p>介绍：</p>\n<ul>\n<li>大多数 actor 复制操作都发生在 <code>UNetDriver::ServerReplicateActors</code> 内</li>\n<li>服务器将收集所有被认定与各个客户端相关的 actor，并发送那些自上次（已连接的）客户端更新后出现变化的所有属性</li>\n</ul>\n<h5 id=\"3-4-1-复制流程\"><a href=\"#3-4-1-复制流程\" class=\"headerlink\" title=\"3.4.1 复制流程\"></a>3.4.1 复制流程</h5><p><strong>复制连接流程</strong>：指定了 actor 的更新方式、要调用的特定框架回调，以及在此过程中使用的特定属性</p>\n<ul>\n<li><code>AActor::NetUpdateFrequency</code> - 用于确定 actor 的复制频度</li>\n<li><code>AActor::PreReplication</code> - 在复制发生前调用</li>\n<li><code>AActor::bOnlyRelevantToOwner</code> - 如果此 actor 仅复制到所有者，则值为 true</li>\n<li><code>AActor::IsRelevancyOwnerFor</code> - 用于确定 bOnlyRelevantToOwner 为 true 时的相关性</li>\n<li><code>AActor::IsNetRelevantFor</code> - 用于确定 bOnlyRelevantToOwner 为 false 时的相关性</li>\n</ul>\n<p><strong>高级流程</strong>：</p>\n<ul>\n<li><p>循环每一个主动复制的 actor（<code>AActor::SetReplicates( true )</code>）</p>\n<ul>\n<li>确定这个 actor 是否在一开始出现休眠（<code>DORM_Initial</code>），如果是这样，则立即跳过</li>\n<li>通过检查 NetUpdateFrequency 的值来确定 actor 是否需要更新，如果不需要就跳过</li>\n<li>如果 <code>AActor::bOnlyRelevantToOwner</code> 为 true，则检查此 actor 的所属连接以寻找相关性（对所属连接的观察者调用 <code>AActor::IsRelevancyOwnerFor</code>），如果相关，则添加到此连接的已有相关列表<ul>\n<li>此时，这个 actor 只会发送到单个连接</li>\n</ul>\n</li>\n<li>对于任何通过这些初始检查的 actor，都将调用 <code>AActor::PreReplication</code><ul>\n<li>PreReplication 可以让您决定是否针对连接来复制属性，这时要使用 <code>DOREPLIFETIME_ACTIVE_OVERRIDE</code></li>\n</ul>\n</li>\n<li>如果同过了以上步骤，则添加到所考虑的列表</li>\n</ul>\n</li>\n<li><p>对于每个连接：</p>\n<ul>\n<li>对于每个所考虑的上述 actor<ul>\n<li>确定是否休眠</li>\n<li>是否还没有通道<ul>\n<li>确定客户端是否加载了 actor 所处的场景<ul>\n<li>如未加载则跳过</li>\n</ul>\n</li>\n<li>针对连接调用 <code>AActor::IsNetRelevantFor</code>，以确定 actor 是否相关<ul>\n<li>如不相关则跳过</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在归连接所有的相关列表上添加上述任意 actor</li>\n<li>这时，我们拥有了一个针对此连接的相关 actor 列表</li>\n<li>按照优先级对 actor 排序</li>\n<li>对于每个排序的 actor：<ul>\n<li>如果连接没有加载此 actor 所在的关卡，则关闭通道（如存在）并继续</li>\n<li>每 1 秒钟调用一次 AActor::IsNetRelevantFor，确定 actor 是否与连接相关</li>\n<li>如果不相关的时间达到 5 秒钟，则关闭通道</li>\n<li>如果相关且没有通道打开，则立即打开一个通道</li>\n<li>如果此连接出现饱和<ul>\n<li>对于剩下的 actor<ul>\n<li>如果保持相关的时间不到 1 秒，则强制在下一时钟单位进行更新</li>\n<li>如果保持相关的时间超过 1 秒，则调用 <code>AActor::IsNetRelevantFor</code> 以确定是否应当在下一时钟单位更新</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对于通过了以上这几点的 actor，将调用 <code>UChannel::ReplicateActor</code> 将其复制到连接</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-4-2-Actor复制到连接\"><a href=\"#3-4-2-Actor复制到连接\" class=\"headerlink\" title=\"3.4.2 Actor复制到连接\"></a>3.4.2 Actor复制到连接</h5><p>流程：<code>UChannel::ReplicateActor</code> 将负责把 actor 及其所有组件复制到连接中</p>\n<ul>\n<li>确定这是不是此 actor 通道打开后的第一次更新<ul>\n<li>如果是，则将所需的特定信息（初始方位、旋转等）序列化</li>\n</ul>\n</li>\n<li>确定该连接是否拥有这个 actor<ul>\n<li>如果没有，而且这个 actor 的角色是 <code>ROLE_AutonomousProxy</code>，则降级为 <code>ROLE_SimulatedProxy</code></li>\n</ul>\n</li>\n<li>复制这个 actor 中已更改的属性</li>\n<li>复制每个组件中已更改的属性</li>\n<li>对于已经删除的组件，发送专门的删除命令</li>\n</ul>\n<h4 id=\"3-5-Role和RemoteRole\"><a href=\"#3-5-Role和RemoteRole\" class=\"headerlink\" title=\"3.5 Role和RemoteRole\"></a>3.5 Role和RemoteRole</h4><p>介绍： Actor 的复制过程中，有两个属性扮演了重要角色，分别是 <code>Role</code> 和 <code>RemoteRole</code></p>\n<p>作用：有了这两个属性，可以知道</p>\n<ul>\n<li>谁拥有 actor 的主控权</li>\n<li>actor 是否被复制</li>\n<li>复制模式</li>\n</ul>\n<p>前提：</p>\n<ul>\n<li>首先一件要确定的事，就是谁拥有特定 actor 的主控权</li>\n<li>确定当前运行的引擎实例是否有主控者，需要查看 Role 属性是否为 <code>ROLE_Authority</code><ul>\n<li>如果是，就表明这个运行中的引擎实例负责掌管此 actor（决定其是否被复制）</li>\n<li>如果 Role 是 <code>ROLE_Authority</code>，RemoteRole 是 <code>ROLE_SimulatedProxy</code> 或 <code>ROLE_AutonomousProxy</code></li>\n<li>就说明这个引擎实例负责将此 actor 复制到远程连接</li>\n</ul>\n</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>只有服务器能够向已连接的客户端同步 Actor （客户端永远都不能向服务器同步）</li>\n<li><em>只有</em> 服务器才能看到 <code>Role == ROLE_Authority</code> 和 <code>RemoteRole == ROLE_SimulatedProxy</code> 或者 <code>ROLE_AutonomousProxy</code></li>\n</ul>\n<h5 id=\"3-5-1-Role-x2F-RemoteRole对调\"><a href=\"#3-5-1-Role-x2F-RemoteRole对调\" class=\"headerlink\" title=\"3.5.1 Role&#x2F;RemoteRole对调\"></a>3.5.1 Role&#x2F;RemoteRole对调</h5><p>对于不同的数值观察者，它们的 Role 和 RemoteRole 值可能发生对调</p>\n<p>例子：</p>\n<ul>\n<li><p>服务器上有这样的配置：</p>\n<ul>\n<li><code>Role == ROLE_Authority</code></li>\n<li><code>RemoteRole == ROLE_SimulatedProxy</code></li>\n</ul>\n</li>\n<li><p>客户端会将其识别为以下形式：</p>\n<ul>\n<li><code>Role == ROLE_SimulatedProxy</code></li>\n<li><code>RemoteRole == ROLE_Authority</code></li>\n</ul>\n</li>\n<li><p>这种情况是正常的，因为服务器要负责掌管 actor 并将其复制到客户端</p>\n</li>\n<li><p>而客户端只是接收更新，并在更新的间歇模拟 actor</p>\n</li>\n</ul>\n<h5 id=\"3-5-2-复制模式\"><a href=\"#3-5-2-复制模式\" class=\"headerlink\" title=\"3.5.2 复制模式\"></a>3.5.2 复制模式</h5><p>前提：</p>\n<ul>\n<li>服务器不会在每次更新时复制 actor</li>\n<li>会消耗太多的带宽和 CPU 资源</li>\n<li>服务器会按照 <code>AActor::NetUpdateFrequency</code> 属性指定的频度来复制 actor</li>\n<li>因此在 actor 更新的间歇，会有一些时间数据被传递到客户端</li>\n<li>会导致 actor 呈现出断续、不连贯的移动</li>\n<li>弥补这个缺陷，客户端将在更新的间歇中模拟 actor</li>\n</ul>\n<p>两种模拟：</p>\n<ul>\n<li><p><code>ROLE_SimulatedProxy</code></p>\n<ul>\n<li>标准的模拟途径，通常是根据上次获得的速率对移动进行推算</li>\n<li>服务器为特定的 actor 发送更新时，客户端将向着新的方位调整其位置，然后利用更新的间歇，根据由服务器发送的最近的速率值来继续移动 actor</li>\n</ul>\n</li>\n<li><p><code>ROLE_AutonomousProxy</code></p>\n<ul>\n<li>这种模拟通常只用于 PlayerController 所拥有的 actor</li>\n<li>说明此 actor 会接收来自真人控制者的输入，所以在我们进行推算时，我们会有更多一些的信息，而且能使用真人输入内容来补足缺失的信息（而不是根据上次获得的速率来进行推算）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-6-RPC\"><a href=\"#3-6-RPC\" class=\"headerlink\" title=\"3.6 RPC\"></a>3.6 RPC</h4><p>简介：</p>\n<ul>\n<li>RPC （远程过程调用）是在本地调用但在其他机器（不同于执行调用的机器）上远程执行的函数</li>\n<li>允许客户端或服务器通过网络连接相互发送消息</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>执行那些不可靠的暂时性&#x2F;修饰性游戏事件</li>\n<li>包括播放声音、生成粒子或产生其他临时效果 之类的事件，它们对于 Actor 的正常运作并不重要</li>\n<li>在此之前，这些类型的事件往往要通过 Actor 属性进行复制</li>\n</ul>\n<h5 id=\"3-6-1-使用RPC\"><a href=\"#3-6-1-使用RPC\" class=\"headerlink\" title=\"3.6.1 使用RPC\"></a>3.6.1 使用RPC</h5><ul>\n<li><p>声明：将一个函数声明为 RPC，您只需将 <code>Server</code>、<code>Client</code> 或 <code>NetMulticast</code> 关键字添加到 <code>UFUNCTION</code> 声明</p>\n</li>\n<li><p>例子1：要将某个函数声明为一个要在服务器上调用、但需要在客户端上执行的 RPC</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">UFUNCTION( Client )\nvoid ClientRPCFunction();</code></pre>\n\n\n</li>\n<li><p>例子2：将某个函数声明为一个要在客户端上调用、但需要在服务器上执行的 RPC，您可以采取类似的方法，但需要使用 <code>Server</code> 关键字</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">UFUNCTION( Server )\nvoid ServerRPCFunction();</code></pre>\n\n\n</li>\n<li><p>例子3：多播 RPC 可以从服务器调用，然后在服务器和当前连接的所有客户端上执行，需使用 <code>NetMulticast</code> 关键字</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">UFUNCTION( NetMulticast )\nvoid MulticastRPCFunction();</code></pre>\n</li>\n<li><p>注：多播 RPC 还可以从客户端调用，但这时就只能在本地执行</p>\n</li>\n</ul>\n<h5 id=\"3-6-2-快速提示\"><a href=\"#3-6-2-快速提示\" class=\"headerlink\" title=\"3.6.2 快速提示\"></a>3.6.2 快速提示</h5><ul>\n<li>在函数的开头预置 <code>Client</code>、<code>Server</code> 或 <code>Multicast</code> 关键字</li>\n<li>这是我们在内部所做的一个约定，用来告诉程序员所用的函数将分别在客户端、服务器或所有客户端上调用</li>\n<li>事先确定该函数将在多人游戏会话期间被哪些机器调用</li>\n</ul>\n<h5 id=\"3-6-3-要求和注意事项\"><a href=\"#3-6-3-要求和注意事项\" class=\"headerlink\" title=\"3.6.3 要求和注意事项\"></a>3.6.3 要求和注意事项</h5><p>前提：</p>\n<ul>\n<li>它们必须从 Actor 上调用</li>\n<li>Actor 必须被复制</li>\n<li>如果 RPC 是从服务器调用并在客户端上执行，则只有实际拥有这个 Actor 的客户端才会执行函数</li>\n<li>如果 RPC 是从客户端调用并在服务器上执行，客户端就必须拥有调用 RPC 的 Actor</li>\n<li>多播 RPC 则是个例外：<ul>\n<li>如果它们是从服务器调用，服务器将在本地和所有已连接的客户端上执行它们</li>\n<li>如果它们是从客户端调用，则只在本地而非服务器上执行</li>\n<li>有一个简单的多播事件限制机制：<code>在特定 Actor 的网络更新期内，多播函数将不会复制两次以上</code></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"3-6-3-1-从服务器调用的RPC\"><a href=\"#3-6-3-1-从服务器调用的RPC\" class=\"headerlink\" title=\"3.6.3.1 从服务器调用的RPC\"></a>3.6.3.1 从服务器调用的RPC</h6><table>\n<thead>\n<tr>\n<th align=\"left\">Actor 所有权</th>\n<th align=\"left\">未复制</th>\n<th align=\"left\"><code>NetMulticast</code></th>\n<th align=\"left\"><code>Server</code></th>\n<th align=\"left\"><code>Client</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>Client-owned actor</strong></td>\n<td align=\"left\">在服务器上运行</td>\n<td align=\"left\">在服务器和所有客户端上运行</td>\n<td align=\"left\">在服务器上运行</td>\n<td align=\"left\">在 actor 的所属客户端上运行</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Server-owned actor</strong></td>\n<td align=\"left\">在服务器上运行</td>\n<td align=\"left\">在服务器和所有客户端上运行</td>\n<td align=\"left\">在服务器上运行</td>\n<td align=\"left\">在服务器上运行</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Unowned actor</strong></td>\n<td align=\"left\">在服务器上运行</td>\n<td align=\"left\">在服务器和所有客户端上运行</td>\n<td align=\"left\">在服务器上运行</td>\n<td align=\"left\">在服务器上运行</td>\n</tr>\n</tbody></table>\n<h6 id=\"3-6-3-2-从客户端调用的RPC\"><a href=\"#3-6-3-2-从客户端调用的RPC\" class=\"headerlink\" title=\"3.6.3.2 从客户端调用的RPC\"></a>3.6.3.2 从客户端调用的RPC</h6><table>\n<thead>\n<tr>\n<th align=\"left\">Actor 所有权</th>\n<th align=\"left\">未复制</th>\n<th align=\"left\"><code>NetMulticast</code></th>\n<th align=\"left\"><code>Server</code></th>\n<th align=\"left\"><code>Client</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>Owned by invoking client</strong></td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n<td align=\"left\">在服务器上运行</td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Owned by a different client</strong></td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n<td align=\"left\">丢弃</td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Server-owned actor</strong></td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n<td align=\"left\">丢弃</td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Unowned actor</strong></td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n<td align=\"left\">丢弃</td>\n<td align=\"left\">在执行调用的客户端上运行</td>\n</tr>\n</tbody></table>\n<h5 id=\"3-6-4-可靠性\"><a href=\"#3-6-4-可靠性\" class=\"headerlink\" title=\"3.6.4 可靠性\"></a>3.6.4 可靠性</h5><ul>\n<li><p>默认情况下，RPC 并不可靠</p>\n</li>\n<li><p>要确保在远程机器上执行 RPC 调用，可以指定 <code>Reliable</code> 关键字</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">UFUNCTION( Client, Reliable )\nvoid ClientRPCFunction();</code></pre></li>\n</ul>\n<h5 id=\"3-6-5-蓝图\"><a href=\"#3-6-5-蓝图\" class=\"headerlink\" title=\"3.6.5 蓝图\"></a>3.6.5 蓝图</h5><p>前提：</p>\n<ul>\n<li>如果被标记为 RPC 的函数是从蓝图中调用，它们也会被复制</li>\n<li>它们将遵循相同的规则，就像是从 C++ 调用一样</li>\n<li>在此情况下，无法将函数动态标记为蓝图的 RPC</li>\n<li>自定义事件可以从蓝图编辑器内部被标记为复制</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li><p>使用此功能，您需要在您的事件图表中新建一个自定义事件</p>\n</li>\n<li><p>单击自定义事件并在详细信息视图中编辑复制设置</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/RPCs/RPC_BP.jpg\" alt=\"RPC_BP.png\"></p>\n</li>\n</ul>\n<h5 id=\"3-6-6-验证\"><a href=\"#3-6-6-验证\" class=\"headerlink\" title=\"3.6.6 验证\"></a>3.6.6 验证</h5><p>使用验证的原因：</p>\n<ul>\n<li>作为检测错误数据&#x2F;输入的一个手段</li>\n<li>如果 RPC 的验证函数检测到任何 参数存在问题，就会通知系统将发起 RPC 调用的客户端&#x2F;服务器断开</li>\n<li>会通知系统将发起 RPC 调用的客户端&#x2F;服务器断开</li>\n</ul>\n<p>例：</p>\n<ul>\n<li><p>要为 RPC 声明一个验证函数，只需将 <code>WithValidation</code> 关键字添加到 <code>UFUNCTION</code> 声明语句</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">UFUNCTION( Server, WithValidation )\nvoid SomeRPCFunction( int32 AddHealth );</code></pre>\n</li>\n<li><p>然后在实施函数旁边加入验证函数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool SomeRPCFunction_Validate( int32 AddHealth )\n&#123;\n    if ( AddHealth &gt; MAX_ADD_HEALTH )\n    &#123;\n        return false;                       &#x2F;&#x2F; This will disconnect the caller\n    &#125;\nreturn true;                              &#x2F;&#x2F; This will allow the RPC to be called\n&#125;\n\nvoid SomeRPCFunction_Implementation( int32 AddHealth )\n&#123;\n    Health +&#x3D; AddHealth;\n&#125;</code></pre>\n\n\n</li>\n<li><p>注：</p>\n<ul>\n<li>被添加到 UHT，以便要求客户端 -&gt; 服务器 RPC 具有一个 _Validate 函数</li>\n<li>鼓励使用安全的服务器 RPC 函数，同时尽可能方便其他人 添加代码以检查所有参数，确保其符合所有已知的输入限制</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-7-属性复制\"><a href=\"#3-7-属性复制\" class=\"headerlink\" title=\"3.7 属性复制\"></a>3.7 属性复制</h4><p>说明：</p>\n<ul>\n<li>每个Actor维护一个全属性列表，其中包含<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/GameplayArchitecture/Properties/Specifiers\"><code>Replicated</code> 说明符</a></li>\n<li>每当复制的属性值发生变化时，服务器会向所有客户端发送更新</li>\n<li>客户端会将其应用到Actor的本地版本上</li>\n<li>这些更新只会来自服务器，客户端永远不会向服务器或其他客户端发送属性更新</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>不推荐在客户端上更改复制的变量值</li>\n<li>该值将始终与服务器端的值不一致，直到服务器下一次侦测到变更并发送更新为止</li>\n<li>如果服务器版本的属性不是经常更新，那客户端就需要等待很长时间才能被纠正</li>\n</ul>\n<p>Tips：</p>\n<ul>\n<li><p>Actor属性复制可靠</p>\n</li>\n<li><p>意味着，Actor的客户端版本的属性最终将反映服务器上的值，但客户端不必接受服务器上某个属性的每一个单独变更</p>\n</li>\n<li><p>例：</p>\n<ul>\n<li>如果一个整数属性的值快速从100变成200，然后又变成了300</li>\n<li>客户端将最终接受一个值为300的变更，但客户端不一定会知道这个值曾经变成过200</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-7-1-设置要复制的属性\"><a href=\"#3-7-1-设置要复制的属性\" class=\"headerlink\" title=\"3.7.1 设置要复制的属性\"></a>3.7.1 设置要复制的属性</h5><ul>\n<li><p>复制属性：在定义属性的Actor类标头处，您需要确保<code>replicated</code>关键字作为<code>UPROPERTY</code>声明的参数之一</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class ENGINE_API AActor : public UObject\n&#123;\n    UPROPERTY( replicated )\n    AActor * Owner;\n&#125;;</code></pre>\n\n\n</li>\n<li><p>在Actor类的实现过程中，需要实现<code>GetLifetimeReplicatedProps</code>函数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void AActor::GetLifetimeReplicatedProps( TArray&lt; FLifetimeProperty &gt; &amp; OutLifetimeProps ) const\n&#123;\n    DOREPLIFETIME( AActor, Owner );\n&#125;</code></pre>\n\n\n</li>\n<li><p>在Actor的构造函数中，确保将<code>bReplicates</code>标记设置为<code>true</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">AActor::AActor( const class FPostConstructInitializeProperties &amp; PCIP ) : Super( PCIP )\n&#123; \n    bReplicates &#x3D; true;\n&#125;</code></pre>\n</li>\n<li><p>注：对于当前实例化的Actor类型的每个副本，成员变量”Owner”现在将同步到所有连接的客户端（在本例中为基础Actor类）</p>\n</li>\n</ul>\n<h5 id=\"3-7-2-网络更新优化\"><a href=\"#3-7-2-网络更新优化\" class=\"headerlink\" title=\"3.7.2 网络更新优化\"></a>3.7.2 网络更新优化</h5><h6 id=\"3-7-2-1-数据驱动型网络更新频率\"><a href=\"#3-7-2-1-数据驱动型网络更新频率\" class=\"headerlink\" title=\"3.7.2.1 数据驱动型网络更新频率\"></a>3.7.2.1 数据驱动型网络更新频率</h6><ul>\n<li>Actor将观察在其<code>NetUpdateFrequency</code>变量中设置的最大更新频率</li>\n<li>通过在不太重要或不太频繁变化的Actor上降低该变量，网络更新可以变得更高效，同时在有限带宽的场景中可能会带来更流畅的游戏体验</li>\n<li>常见的更新频率值为：<ul>\n<li>重要且不可预知的Actor：射击游戏中由玩家控制的角色，为10（每0.1秒更新一次）</li>\n<li>对于行动缓慢的角色：<ul>\n<li>合作类游戏中由AI控制的怪物，为5（每0.2秒更新一次）</li>\n<li>对于游戏进程不是很重要但仍通过网络同步的以及&#x2F;或者由服务器端逻辑控制因而需要复制的后台Actor，为2（每0.5秒更新一次）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"3-7-2-2-自适应型网络更新频率\"><a href=\"#3-7-2-2-自适应型网络更新频率\" class=\"headerlink\" title=\"3.7.2.2 自适应型网络更新频率\"></a>3.7.2.2 自适应型网络更新频率</h6><p>Tips：</p>\n<ul>\n<li>在默认情况下，该功能是关闭的</li>\n<li>将控制台变量 <code>net.UseAdaptiveNetUpdateFrequency</code> 设置到 <code>1</code> 可以将其激活</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li><p>节省CPU周期，这些CPU周期通常会在没有任何实际更改的情况下多次尝试复制Actor而浪费掉</p>\n</li>\n<li><p>启用了该功能时，系统将根据各个Actor的更新是否有意义，动态调整其更新频率</p>\n</li>\n<li><p>有意义：</p>\n<ul>\n<li>初始化了Actor、添加或删除了子对象（即拥有的组件）</li>\n<li>更改了Actor上或其任何子对象上复制字段值的任何更新</li>\n</ul>\n</li>\n<li><p>每个Actor可能的更新速率范围由Actor本身的两个变量决定：<code>NetUpdateFrequency</code>和<code>MinNetUpdateFrequency</code></p>\n</li>\n<li><p><code>NetUpdateFrequency</code>表示Actor每秒尝试更新自己的最大次数，而<code>MinNetUpdateFrequency</code>表示每秒尝试更新的最小次数</p>\n</li>\n<li><p>使用该功能可以大大提高复制性能</p>\n</li>\n</ul>\n<h6 id=\"3-7-2-3-更新频率降低算法\"><a href=\"#3-7-2-3-更新频率降低算法\" class=\"headerlink\" title=\"3.7.2.3 更新频率降低算法\"></a>3.7.2.3 更新频率降低算法</h6><ul>\n<li>在更新尝试期间，Actor将确定最近一次有意义的更新发送到现在有多长时间，如果它们发送了有意义的更新，将记录新的时间</li>\n<li>例1：<ul>\n<li>进行更新的Actor超过2秒没有发送有意义的更新，那么它将开始降低更新频率</li>\n<li>在没有发送有意义的更新的情况下，更新频率将在7秒后达到最小</li>\n</ul>\n</li>\n<li>例2：<ul>\n<li>更新延迟在0.1秒到0.6秒之间的Actor在3秒内没有任何有意义的更新</li>\n<li>那么它将在0.2秒内尝试下一次更新</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"3-7-2-4-更新频率增加算法\"><a href=\"#3-7-2-4-更新频率增加算法\" class=\"headerlink\" title=\"3.7.2.4 更新频率增加算法\"></a>3.7.2.4 更新频率增加算法</h6><ul>\n<li><p>在发送一个有意义的更新之后，Actor将安排下一个更新发生的时间，使其比前两次有意义的更新之间的时间短30%，并且处于最小更新频率与最大更新频率之间</p>\n</li>\n<li><p>如果Actor在两次有意义的更新之间恰好间隔了一秒，那么它会将下一次更新尝试安排在未来0.7秒</p>\n</li>\n<li><p>或者接近指定的最小与最大更新频率的时间</p>\n</li>\n<li><p>接下来每次有意义的更新，都将重复该计算，如果Actor开始频繁地进行数据或子对象更改，将快速缩短更新之间的时间</p>\n</li>\n</ul>\n<h4 id=\"3-8-条件属性复制\"><a href=\"#3-8-条件属性复制\" class=\"headerlink\" title=\"3.8 条件属性复制\"></a>3.8 条件属性复制</h4><p>前提：</p>\n<ul>\n<li>当属性被注册进行复制后，您将无法再取消注册（涉及到生存期）</li>\n<li>因为要预制尽可能多的信息，以便针对同一组属性将某一工作分担给多个连接</li>\n<li>可以节省大量的计算时间</li>\n</ul>\n<p>说明：</p>\n<ul>\n<li><p>默认情况下，每个复制属性都有一个内置条件：如果不发生变化就不会进行复制</p>\n</li>\n<li><p>为了加强对属性复制的控制，使用一个专门的宏来添加附加条件</p>\n<ul>\n<li>这个宏被称为 <code>DOREPLIFETIME_CONDITION</code></li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void AActor::GetLifetimeReplicatedProps( TArray&lt; FLifetimeProperty &gt; &amp; OutLifetimeProps ) const\n&#123;\n    DOREPLIFETIME_CONDITION( AActor, ReplicatedMovement, COND_SimulatedOnly );\n&#125;</code></pre>\n</li>\n<li><p>传递给条件宏的 <code>COND_SimulatedOnly</code> 标志甚至可以在考虑复制属性前执行一次额外检查</p>\n</li>\n<li><p>这时，它只会复制到拥有此 actor 模拟复本的客户端</p>\n</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>最明显的好处在于节省带宽</li>\n<li>因为我们确信拥有此 actor 的自治代理版本的客户端无需了解这个属性</li>\n<li>例：<ul>\n<li>该客户端为了进行预测而直接设置了这一属性</li>\n<li>对于不接收该属性的客户端而言，服务器无需干涉这个客户端的本地复本</li>\n</ul>\n</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>目前支持的条件，在 <code>Engine\\Source\\Runtime\\CoreUObject\\Public\\UObject\\CoreNet.h</code> 的 <code>ELifetimeCondition</code> 枚举中指定</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">条件</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>COND_InitialOnly</code></td>\n<td align=\"left\">该属性仅在初始数据组尝试发送</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COND_OwnerOnly</code></td>\n<td align=\"left\">该属性仅发送至 actor 的所有者</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COND_SkipOwner</code></td>\n<td align=\"left\">该属性将发送至除所有者之外的每个连接</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COND_SimulatedOnly</code></td>\n<td align=\"left\">该属性仅发送至模拟 actor</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COND_AutonomousOnly</code></td>\n<td align=\"left\">该属性仅发送给自治 actor</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COND_SimulatedOrPhysics</code></td>\n<td align=\"left\">该属性将发送至模拟或 bRepPhysics actor</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COND_InitialOrOwner</code></td>\n<td align=\"left\">该属性将发送初始数据包，或者发送至 actor 所有者</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COND_Custom</code></td>\n<td align=\"left\">该属性没有特定条件，但需要通过 SetCustomIsActiveOverride 得到开启&#x2F;关闭能力</td>\n</tr>\n</tbody></table>\n<p>补充：</p>\n<ul>\n<li><p>有一个名叫 <code>DOREPLIFETIME_ACTIVE_OVERRIDE</code> 的宏可以进行全面控制</p>\n</li>\n<li><p>利用任何定制条件来决定何时复制&#x2F;不复制某个属性</p>\n</li>\n<li><p>需要注意的是：</p>\n<ul>\n<li>这种控制需针对每个 actor（而不是每条连接）逐一进行</li>\n<li>在定制条件中使用一个可根据连接而发生变化的状态，会存在一定的安全风险</li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void AActor::PreReplication( IRepChangedPropertyTracker &amp; ChangedPropertyTracker )\n&#123;\n    DOREPLIFETIME_ACTIVE_OVERRIDE( AActor, ReplicatedMovement, bReplicateMovement );\n&#125;</code></pre>\n</li>\n<li><p>现在 ReplicatedMovement 属性只会在 bReplicateMovement 为 true 时复制</p>\n</li>\n<li><p>不使用这个宏的原因：</p>\n<ul>\n<li>如果定制条件的值变化太大，这种做法会降低执行速度</li>\n<li>您不能使用根据连接而变化的条件（此时不检查 RemoteRole）</li>\n</ul>\n</li>\n</ul>\n<p>条件属性复制的好处：</p>\n<ul>\n<li>属性复制条件可以很好的实现控制力与性能之间的平衡</li>\n<li>可以使引擎以更快的速度针对多条连接检查并发送属性</li>\n<li>同时让程序员对复制属性的方式和时机进行精细控制</li>\n</ul>\n<h4 id=\"3-9-复制对象引用\"><a href=\"#3-9-复制对象引用\" class=\"headerlink\" title=\"3.9 复制对象引用\"></a>3.9 复制对象引用</h4><p>前提：</p>\n<ul>\n<li>一般而言，对象引用会在 UE4 多人游戏架构中自动处理</li>\n<li>一个已经复制的 UObject 属性，该对象的引用将作为服务器分配的专门 ID 通过网络进行发送</li>\n<li>这个专门 id 是一个 FNetworkGUID</li>\n<li>服务器将负责分配此 id，然后向所有已连接的客户端告知这一分配</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li><p>需将一个 UObject 属性标记为已复制</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class ENGINE_API AActor : public UObject\n&#123;\n    UPROPERTY( replicated )\n    AActor * Owner;\n&#125;;</code></pre>\n</li>\n<li><p><code>Owner</code> 属性将作为其引用的 actor 的一个复制引用</p>\n</li>\n<li><p>注意：</p>\n<ul>\n<li>通过网络合法引用的对象，必须对其提供支持以保证网络连接</li>\n<li>要进行检查，可以调用 <code>UObject::IsSupportedForNetworking()</code></li>\n<li>这是一个底层函数，所以一般不需要在游戏代码中对其进行检查</li>\n</ul>\n</li>\n</ul>\n<p>其他方式：</p>\n<ul>\n<li>任何复制的 actor 都可以复制为一个引用</li>\n<li>任何未复制的 actor 都必须有可靠命名（直接从数据包加载）</li>\n<li>任何复制的组件都可以复制为一个引用</li>\n<li>任何未复制的组件都必须有可靠命名。</li>\n<li>其他所有 UObject（非 actor 或组件）必须由加载的数据包直接提供</li>\n</ul>\n<h5 id=\"3-9-1-拥有可靠命名的对象\"><a href=\"#3-9-1-拥有可靠命名的对象\" class=\"headerlink\" title=\"3.9.1 拥有可靠命名的对象\"></a>3.9.1 拥有可靠命名的对象</h5><p>说明：</p>\n<ul>\n<li>拥有可靠命名的对象指的是存在于服务器和客户端上的同名对象</li>\n<li>如果 Actor 是从数据包直接加载（并非在游戏期间生成），它们就被认为是拥有可靠命名</li>\n</ul>\n<p>方式：</p>\n<ul>\n<li>从数据包直接加载</li>\n<li>通过简单构建脚本添加</li>\n<li>采用手动标记（通过 <code>UActorComponent::SetNetAddressable</code> 进行）<ul>\n<li>只有当您知道要手动命名组件以便其在服务器和客户端上具有相同名称时，才应当使用这种方法</li>\n<li>（最好的例子就是 <code>AActor</code> C++ 构造函数中添加的组件）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-10-蓝图使用RPC\"><a href=\"#3-10-蓝图使用RPC\" class=\"headerlink\" title=\"3.10 蓝图使用RPC\"></a>3.10 蓝图使用RPC</h4><p>远程调用函数主要包括 3 种类型：</p>\n<ol>\n<li><strong>Multicast 广播</strong>：广播函数在服务器上调用和执行，然后自动转发给客户端<ul>\n<li>Server的函数，Server调用，Server执行，复制给所有在场的Actor</li>\n</ul>\n</li>\n<li><strong>Run on Server 在服务端执行</strong>：在服务端执行的函数由客户端调用，然后仅在服务器上执行<ul>\n<li>Server的函数，Client调用，Server执行</li>\n</ul>\n</li>\n<li><strong>Run on owning Client 在客户端执行</strong>：在客户端执行的函数由服务器调用，然后仅在自有客户端上执行<ul>\n<li>Client的函数，Server调用，Client执行</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"3-10-1-Multicast广播\"><a href=\"#3-10-1-Multicast广播\" class=\"headerlink\" title=\"3.10.1 Multicast广播\"></a>3.10.1 Multicast广播</h5><ol>\n<li><p>自定义事件</p>\n</li>\n<li><p>然后在 <strong>Details</strong> 面板中将 <strong>Replicates</strong> 下拉菜单设置为 <strong>Multicast</strong></p>\n<p><a href=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo5.png\"><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo5.jpg\" alt=\"HowTo5.png\"></a></p>\n</li>\n<li><p>从 <strong>Space Bar</strong> 按键事件连出来，搜索并添加调用函数<strong>MulticastSpawn</strong></p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo6.jpg\" alt=\"HowTo6.png\"></p>\n</li>\n<li><p><strong>编译</strong> 并 <strong>保存</strong>，关闭蓝图，然后单击 <strong>运行</strong> 按钮在编辑器中开始游戏</p>\n</li>\n<li><p>在游戏中，定位服务器所在的窗口，然后按 <strong>Space Bar</strong> 跳转</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo7.jpg\" alt=\"HowTo7.png\"></p>\n</li>\n<li><p>服务器上的玩家按跳转时，服务器和所有客户端上都将生成喷火效果</p>\n</li>\n<li><p>其他玩家跳转仍只能在本地喷火，因为我们并未告知服务器客户端已生成该效果</p>\n</li>\n</ol>\n<h5 id=\"3-10-2-RunOnServer\"><a href=\"#3-10-2-RunOnServer\" class=\"headerlink\" title=\"3.10.2 RunOnServer\"></a>3.10.2 RunOnServer</h5><ol>\n<li><p>选择 <strong>MulticastSpawn</strong> 自定义事件，然后将 <strong>Replicates</strong> 下拉选项更改为 <strong>Run on Server</strong></p>\n<p><a href=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo8.png\"><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo8.jpg\" alt=\"HowTo8.png\"></a></p>\n</li>\n<li><p><strong>编译</strong> 并 <strong>保存</strong>，关闭蓝图，然后单击 <strong>运行</strong> 按钮在编辑器中开始游戏</p>\n</li>\n<li><p>在游戏中，定位非服务器的任何游戏窗口，然后按 <strong>Space Bar</strong> 跳转</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo9.jpg\" alt=\"HowTo9.png\"></p>\n</li>\n<li><p>注意，喷火效果只在服务器上生成，无论哪个玩家跳转，其他玩家都看不到，只有服务器端才能看到</p>\n</li>\n<li><p>我们需确保该效果已设置为复制，以便其传递给所有客户端和服务器</p>\n</li>\n<li><p>在 <strong>Content&#x2F;StarterContent&#x2F;Blueprints</strong> 文件夹中，打开 <strong>Blueprint_Effect_Fire</strong> 蓝图</p>\n</li>\n<li><p>从主工具栏中选择 <strong>Class Defaults</strong> 后，在 <strong>Details</strong> 面板中，选中 <strong>Replicates</strong> 复选框</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo10.jpg\" alt=\"HowTo10.png\"></p>\n</li>\n<li><p><strong>编译</strong> 并 <strong>保存</strong>，关闭蓝图，然后单击 <strong>运行</strong> 按钮在编辑器中开始游戏</p>\n</li>\n<li><p>在游戏中，定位非服务器的任何游戏窗口，然后按 <strong>Space Bar</strong> 跳转</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo11.jpg\" alt=\"HowTo11.png\"></p>\n</li>\n<li><p>向服务器发送消息，以在服务器运行部分脚本来生成 Actor，由于此 Actor 已设置为复制，因此我们可以在所有客户端上看到它</p>\n</li>\n</ol>\n<h5 id=\"3-10-3-RunOnOwningClient\"><a href=\"#3-10-3-RunOnOwningClient\" class=\"headerlink\" title=\"3.10.3 RunOnOwningClient\"></a>3.10.3 RunOnOwningClient</h5><p>说明：在此示例中，我们要做到是创建一个发生服务器事件时仅在特定客户端上更新的变量</p>\n<p>步骤：设置 <strong>Run on owning Client</strong> 复制函数</p>\n<ol>\n<li><p>在 <strong>Content&#x2F;ThirdPersonBP&#x2F;Blueprints</strong> 文件夹中，打开 <strong>ThirdPersonCharacter</strong> 蓝图</p>\n</li>\n<li><p>在 <strong>MyBlueprint</strong> 窗口中，创建新变量并将其命名为 <strong>Inventory</strong>，然后单击 <strong>Compile</strong></p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/Inventory.jpg\" alt=\"Inventory.png\"></p>\n</li>\n<li><p>在此变量的 <strong>Details</strong> 面板中，将其设置为 <strong>String</strong>、<strong>Editable</strong> 和 <strong>Replicated</strong>，然后为 <strong>Default Value</strong> 输入 <strong>Empty</strong></p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo12.jpg\" alt=\"HowTo12.png\"></p>\n<ul>\n<li><p>将此变量设置为 <strong>Replicated</strong> 可确保其通过网络复制到所连接的机器上</p>\n</li>\n<li><p>我们将使用此变量模拟人物在多人游戏中进入触发卷时收集道具，退出触发卷时删除道具</p>\n</li>\n</ul>\n</li>\n<li><p>添加一个与 <strong>Print String</strong> 连接的 <strong>P</strong> 按键事件，然后按住 <strong>Control</strong> 并拖入 <strong>Inventory</strong> 变量，并按所示方式连接</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo13.jpg\" alt=\"HowTo13.png\"></p>\n</li>\n<li><p><strong>Compile</strong> 并 <strong>Save</strong>，然后关闭 <strong>ThirdPersonCharacter</strong> 蓝图</p>\n</li>\n<li><p>在 <strong>放置Actor（Place Actors）</strong> 的 <strong>基础（Basic）</strong> 选项卡中，将 <strong>盒体触发器（Box Trigger）</strong> 拖入你的关卡</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo14.jpg\" alt=\"HowTo14.png\"></p>\n<ul>\n<li>当玩家人物进入触发器时，我们将更新创建的变量，但仅在进入触发器盒的客户端上更新。</li>\n</ul>\n</li>\n<li><p>在 <strong>Rendering</strong> 下 <strong>Box Trigger</strong> 的 <strong>Details</strong> 面板中，取消选中 <strong>Actor Hidden In Game</strong>。</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/UnHideBox.jpg\" alt=\"UnHideBox.png\"></p>\n<ul>\n<li>在编辑器中玩游戏时，这可让我们在关卡中看到此盒，使得测试更加轻松</li>\n</ul>\n</li>\n<li><p>单击 <strong>Box Trigger</strong> 将其选中，然后从主工具栏打开<strong>Level Blueprint</strong>。</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo15.jpg\" alt=\"HowTo15.png\"></p>\n</li>\n<li><p>在图表中 <strong>右键</strong> ，然后搜索 <strong>Begin Overlap</strong> 并选择 <strong>Add On Actor Begin Overlap</strong> 事件</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo16.jpg\" alt=\"HowTo16.png\"></p>\n</li>\n<li><p>重复上一步，但搜索并添加 <strong>Add On Actor End Overlap</strong> 事件</p>\n</li>\n<li><p>将每个节点连接到 <strong>Switch Has Authority</strong> 节点</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo17.jpg\" alt=\"HowTo17.png\"></p>\n<ul>\n<li><p>Switch Has Authority 节点用于检查当前正在运行的脚本正在从何处执行，然后基于脚本是在网络授权者（通常为服务器）还是远程机器（客户端）上运行将其分成两个不同的方向</p>\n</li>\n<li><p>通常，你会对只希望在服务器上发生的事情使用授权者（这些通常为游戏关键性事件，例如调整玩家的生命值或赠送奖励或掠夺物品，因为你不想让客户端确定这些更改何时发生，以防作弊）</p>\n</li>\n<li><p>在此示例中，我们将更新文本变量，此变量也完全可以是包含玩家生命值的变量，或所收集道具的变量</p>\n</li>\n</ul>\n</li>\n<li><p>在图表中 <strong>右键</strong> 并添加一个称作 <strong>Add Item</strong> 的 <strong>Custom Event</strong> 节点</p>\n</li>\n<li><p>将 Replicates 选项设置为 <strong>Run on owning Client</strong>，并添加称作 <strong>Character</strong> 的输入，将其设置为 <strong>Actor</strong></p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo18.jpg\" alt=\"HowTo18.png\"></p>\n</li>\n<li><p>创建另一个称作 <strong>Remove Item</strong> 的 <strong>Custom Event</strong>，其设置与 <strong>Add Item</strong> 事件的设置相同</p>\n</li>\n<li><p>如下所示，从两个重叠事件连出来，接 <strong>Add Item</strong> 和 <strong>Remove Item</strong> 节点</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo19.jpg\" alt=\"HowTo19.png\"></p>\n<ul>\n<li>这里我们指的是，当重叠触发器时，如果重叠发生在服务器上，在服务器上运行 <strong>Add Item</strong> 事件，并将它复制到自有客户端（即重叠触发器的人物所在的客户端）</li>\n<li>“它”是指 <strong>Add Item</strong> 启动并仅在服务器上执行但复制到客户端时所调用的脚本</li>\n<li>当人物退出触发器盒时 — 这也由服务器决定，在服务器上运行 <strong>Remove Item</strong> 事件，并将其复制到自有客户端</li>\n</ul>\n</li>\n<li><p>从 <strong>Add Item</strong> 事件连出来，添加 <strong>Print String</strong> （文本设置为 <strong>Item Added</strong> ），然后拖开 <strong>Character</strong> 和 <strong>Cast To ThirdPersonCharacter</strong></p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo20.jpg\" alt=\"HowTo20.png\"></p>\n</li>\n<li><p>从 <strong>As Third Person Character</strong> 针连出来，搜索并添加 <strong>Set Inventory</strong> 节点，将文本设置为 <strong>Has the Item</strong></p>\n<p><a href=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo21.png\"><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo21.jpg\" alt=\"HowTo21.png\"></a></p>\n<ul>\n<li>此处，我们选取的是在服务器上执行并复制到客户端的事件，此事件将在屏幕上显示<code>item added</code></li>\n<li>然后将自有客户端的 <strong>Inventory</strong> 文本变量设置为<code>Has the item</code></li>\n</ul>\n</li>\n<li><p>在 <strong>Add Item</strong> 事件之后复制三个节点，并将其连接到 <strong>Remove Item</strong> 事件</p>\n</li>\n<li><p>将 <strong>Print String</strong> 更改为 <strong>Item Removed</strong>，将 <strong>Inventory</strong> 文本变量更改为 <strong>Empty</strong></p>\n<p><a href=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo22.png\"><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Actors/ReplicatingFunctions/HowTo22.jpg\" alt=\"HowTo22.png\"></a></p>\n<ul>\n<li>现在，当人物退出触发器时，文本变量将在服务器上更新并复制到自有客户端</li>\n</ul>\n</li>\n<li><p><strong>编译</strong> 并 <strong>保存</strong>，然后关闭 <strong>Level Blueprint</strong> 并在编辑器中开始游戏</p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n    <iframe src=\"https://www.youtube.com/embed/KiBrcLbXbYQ?rel=0&amp;modestbranding=1&amp;showinfo=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\">\n    </iframe>\n</div>\n\n<ul>\n<li>在以上视频中，当游戏启动时，按 P 可将文本变量打印到屏幕上，可对每个角色显示 “empty”</li>\n<li>但是，当其中一个角色退出触发器盒时，将显示文本 “item added”</li>\n<li>当人物按 P 时，文本将更改为 “has the item”，但其他人物仍显示 “empty”</li>\n<li>当人物退出触发器盒时，将显示文本 “item removed”，再次按 P 时，文本将更改回 “empty”</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-客户端-服务器模式\"><a href=\"#4-客户端-服务器模式\" class=\"headerlink\" title=\"4. 客户端-服务器模式\"></a>4. 客户端-服务器模式</h3><p>说明：</p>\n<ul>\n<li><p>UE4 多人游戏基于客户端-服务器模式</p>\n</li>\n<li><p>一个服务器担当游戏状态的主控者，而连接的客户端将保持近似复本</p>\n</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>做出所有重要决定，包含所有的主控状态，处理客户端连接，转移到新的地图以及处理比赛开始&#x2F;结束时的总体游戏流程等</li>\n</ul>\n<h4 id=\"4-1-启动服务器\"><a href=\"#4-1-启动服务器\" class=\"headerlink\" title=\"4.1 启动服务器\"></a>4.1 启动服务器</h4><p>基本命令：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">监听服务器</td>\n<td align=\"left\"><code>UE4Editor.exe ProjectName MapName?Listen -game</code></td>\n</tr>\n<tr>\n<td align=\"left\">专用服务器</td>\n<td align=\"left\"><code>UE4Editor.exe ProjectName MapName -server -game -log</code></td>\n</tr>\n<tr>\n<td align=\"left\">客户端</td>\n<td align=\"left\"><code>UE4Editor.exe ProjectName ServerIP -game</code></td>\n</tr>\n</tbody></table>\n<p>注：</p>\n<ul>\n<li>专用服务器在默认情况下并不会显示窗口</li>\n<li>如果不使用 -log，您将不会看到任何呈现专用服务器的窗口</li>\n</ul>\n<h4 id=\"4-2-服务器游戏流程\"><a href=\"#4-2-服务器游戏流程\" class=\"headerlink\" title=\"4.2 服务器游戏流程\"></a>4.2 服务器游戏流程</h4><p>说明：</p>\n<ul>\n<li>服务器的职责是在游戏开始&#x2F;结束以及 actor 复制更新等情况下通知客户端转移到新地图</li>\n<li>游戏状态和流程一般是通过 GameMode 这一 actor 来驱动</li>\n<li>只有服务器才包含此 actor 的有效复本（客户端不包含复本）</li>\n<li>要向客户端传达该状态，可以使用 GameState actor 显示 GameMode actor 的重要状态</li>\n<li>这个 GameState actor 被标记为复制到每个客户端</li>\n<li>客户端将包含此 GameState actor 的一个近似复本，而且能使用这个 actor 作为引用，用于了解游戏的一般状态</li>\n</ul>\n<h4 id=\"4-3-连接过程\"><a href=\"#4-3-连接过程\" class=\"headerlink\" title=\"4.3 连接过程\"></a>4.3 连接过程</h4><p>前提：一个服务器需要从网络连接的角度实现某种目的，它就必须要有客户端连接</p>\n<p>说明：新的客户端初次连接时</p>\n<ul>\n<li>首先，客户端要向即将连接的服务器发送一个请求</li>\n<li>服务器将处理这条请求</li>\n<li>如果它不拒绝连接，服务器会向客户端发回一个包含了继续运行所需信息的响应</li>\n</ul>\n<p>主要步骤如下：</p>\n<ol>\n<li>客户端发送连接请求</li>\n<li>如果服务器接受连接，则发送当前地图</li>\n<li>服务器等待客户端加载此地图</li>\n<li>加载之后，服务器将在本地调用 AGameModeBase::PreLogin<ul>\n<li>这样可以使 GameMode 有机会拒绝连接</li>\n</ul>\n</li>\n<li>如果接受连接，服务器将调用 AGameModeBase::Login<ul>\n<li>该函数的作用是创建一个 PlayerController，可用于在今后复制到新连接的客户端</li>\n<li>成功接收后，这个 PlayerController 将替代客户端的临时 PlayerController （之前被用作连接过程中的占位符）</li>\n<li>此时将调用 APlayerController::BeginPlay</li>\n<li>应当注意的是，在此 actor 上调用 RPC 函数尚存在安全风险。您应当等待 AGameModeBase::PostLogin 被调用完成</li>\n</ul>\n</li>\n<li>如果一切顺利，AGameModeBase::PostLogin 将被调用<ul>\n<li>这时，可以放心的让服务器在此 PlayerController 上开始调用 RPC 函数</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-角色移动组件\"><a href=\"#5-角色移动组件\" class=\"headerlink\" title=\"5. 角色移动组件\"></a>5. 角色移动组件</h3><p>说明：</p>\n<ul>\n<li><strong>角色移动组件</strong> 是一种 <strong>Actor 组件</strong>，提供封装的移动系统和类人 <strong>角色</strong> 的常见移动模式，包括行走、跌倒、游泳和飞行</li>\n<li>角色移动组件还具备强大的网络gameplay整合</li>\n<li>默认移动模式全都默认用于复制，并提供框架来帮助开发者创建自定义的联网移动</li>\n</ul>\n<h4 id=\"5-1-角色移动基础\"><a href=\"#5-1-角色移动基础\" class=\"headerlink\" title=\"5.1 角色移动基础\"></a>5.1 角色移动基础</h4><ul>\n<li><p><a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/UCharacterMovementComponent\"><code>UCharacterMovementComponent</code></a>前附于 <a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/ACharacter\"><code>ACharacter</code></a>Actor类及其派生的所有 <strong>蓝图</strong></p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/CharacterMovementComponent/CharacterMovement_ComponentAttached.jpg\" alt=\"角色移动组件\"></p>\n</li>\n<li><p>在其 <code>TickComponent</code> 函数期间，<code>UCharacterMovementComponent</code> 将调用 <code>PerformMovement</code></p>\n</li>\n<li><p>基于当前所用 <strong>移动模式</strong> 以及玩家的输入变量来计算世界场景中所需的加速度</p>\n</li>\n<li><p>通常在<a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/APlayerController\"><code>APlayerController</code></a>中以 <em>control input</em> 变量表示</p>\n</li>\n<li><p>一旦完成移动计算，<code>UCharacterMovementComponent</code> 将把最终移动应用于拥有的角色</p>\n</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>虽然 <code>ACharacter</code> 派生自<a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/APawn\"><code>APawn</code></a>，但角色并不只是增加了角色移动组件的Pawn</li>\n<li><code>UCharacterMovementComponent</code> 和 <code>ACharacter</code> 需要一同使用，因为 <code>ACharacter</code> 覆盖数个复制的变量和函数，专为在 <code>UCharacterMovementComponent</code> 中进行复制</li>\n</ul>\n<h4 id=\"5-2-PerformMovement\"><a href=\"#5-2-PerformMovement\" class=\"headerlink\" title=\"5.2 PerformMovement\"></a>5.2 PerformMovement</h4><p>说明：</p>\n<ul>\n<li><code>PerformMovement</code> 函数负责游戏世界场景中的角色物理移动</li>\n<li>在非联网游戏中，<code>UCharacterMovementComponent</code> 每次tick将直接调用一次 <code>PerformMovement</code></li>\n<li>在联网游戏中，由专用函数为服务器和客户端调用 <code>PerformMovement</code>，在玩家的本地机器上执行初始移动，或在远程机器上再现移动</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>应用外部物理效果，例如脉冲、力和重力</li>\n<li>根据动画根运动和 <strong>根运动源</strong> 计算移动</li>\n<li>调用 <code>StartNewPhysics</code>，它基于角色使用的移动模式选择 <code>Phys*</code> 函数</li>\n</ul>\n<h4 id=\"5-3-移动物理效果\"><a href=\"#5-3-移动物理效果\" class=\"headerlink\" title=\"5.3 移动物理效果\"></a>5.3 移动物理效果</h4><p>每个移动模式都有各自的 <code>Phys*</code> 函数，负责计算速度和加速度：</p>\n<ul>\n<li><code>PhysWalking</code> 决定角色在地面上移动时的移动物理效果</li>\n<li><code>PhysFalling</code> 决定在空中移动时的移动物理效果</li>\n</ul>\n<p>若移动模式在一个tick内发生变化（例如角色开始跌倒或撞到某个对象）：</p>\n<ul>\n<li><code>Phys*</code> 函数会再次调用 <code>StartNewPhysics</code>，在新移动模式中继续角色的运动</li>\n<li><code>StartNewPhysics</code> 和 <code>Phys*</code> 函数各自通过已发生的 <code>StartNewPhysics</code> 迭代的次数</li>\n<li>参数 <code>MaxSimulationIterations</code> 是此递归所允许的最大次数</li>\n</ul>\n<h4 id=\"5-4-移动复制摘要\"><a href=\"#5-4-移动复制摘要\" class=\"headerlink\" title=\"5.4 移动复制摘要\"></a>5.4 移动复制摘要</h4><p><code>UCharacterMovementComponent</code> 使用其所有者的 <strong>网络角色</strong> 来确定移动的复制方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">网络角色</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>自主代理（Autonomous Proxy）</strong></td>\n<td align=\"left\">角色在其 <em>所属客户端</em> 机器上，由玩家本地控制</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>权威（Authority）</strong></td>\n<td align=\"left\">角色存在于建立游戏的服务器上</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>模拟代理（Simulated Proxy）</strong></td>\n<td align=\"left\">角色存在于可查看远程控制角色的其他客户端上，无论角色受服务器AI控制，还是由不同客户端上的自主代理控制</td>\n</tr>\n</tbody></table>\n<ul>\n<li>复制进程遵循 <code>TickComponent</code> 函数中的循环，每tick重复一次</li>\n<li>角色执行移动时，为同步移动信息，网络游戏中所有不同机器上的副本会相互进行 **远程进程调用 (RPC)**，不同网络角色使用相应的不同执行路径</li>\n</ul>\n<p>下表逐步概述此进程中 <code>UCharacterMovementComponent</code> 在各个机器上所执行的操作：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">步骤</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">自主代理（所属玩家的客户端）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>1</strong></td>\n<td align=\"left\">所属客户端本地控制自主代理。<code>PerformMovement</code> 运行移动组件的物理移动逻辑</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>2</strong></td>\n<td align=\"left\">代理构建 <code>FSavedMove_Character</code>，其中包含其所做移动的相关数据，然后在 <code>SavedMoves</code> 中将其排入队列</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>3</strong></td>\n<td align=\"left\">类似的 <code>FSavedMove</code> 条目组合在一起。自主代理通过 <strong>ServerMove</strong> RPC将压缩版数据发送到服务器</td>\n</tr>\n<tr>\n<td align=\"left\">权威Actor（服务器）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>4</strong></td>\n<td align=\"left\">服务器接收ServerMove并使用 <code>PerformMovement</code> 复制客户端移动</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>5</strong></td>\n<td align=\"left\">服务器检查其在ServerMove后的位置是否与客户端报告的最终位置匹配</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>6</strong></td>\n<td align=\"left\">若服务器和客户端的最终位置匹配，则向客户端发回信号，表示移动有效。否则将使用 <strong>ClientAdjustPosition</strong> RPC 发送矫正</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>7</strong></td>\n<td align=\"left\">服务器复制 <code>ReplicatedMovement</code> 结构，将其位置、旋转和当前状态发送到其他已连接客户端上的模拟代理</td>\n</tr>\n<tr>\n<td align=\"left\">自主代理（所属玩家的客户端）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>8</strong></td>\n<td align=\"left\">若客户端收到ClientAdjustPosition，则复制服务器的移动，并使用它的 <code>SavedMoves</code> 队列重新追踪其步骤，以获得新的最终位置。成功解析移动后，从队列中移除已保存的移动</td>\n</tr>\n<tr>\n<td align=\"left\">模拟代理（所有其他客户端）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>9</strong></td>\n<td align=\"left\">模拟代理直接应用复制的移动信息。<strong>网络平滑</strong> 提供最终运动的可视化清理</td>\n</tr>\n</tbody></table>\n<h4 id=\"5-5-复制角色移动详解\"><a href=\"#5-5-复制角色移动详解\" class=\"headerlink\" title=\"5.5 复制角色移动详解\"></a>5.5 复制角色移动详解</h4><h5 id=\"5-5-1-所属客户端上的本地移动\"><a href=\"#5-5-1-所属客户端上的本地移动\" class=\"headerlink\" title=\"5.5.1 所属客户端上的本地移动\"></a>5.5.1 所属客户端上的本地移动</h5><p>说明：自主代理在 <code>TickComponent</code> 中本地处理移动，予以记录，然后发送到服务器以授权方式再现和应用</p>\n<h6 id=\"5-5-1-1-编译客户端预测数据\"><a href=\"#5-5-1-1-编译客户端预测数据\" class=\"headerlink\" title=\"5.5.1.1 编译客户端预测数据\"></a>5.5.1.1 编译客户端预测数据</h6><p>说明：</p>\n<ul>\n<li>自主代理编译名为 <code>ClientPredictionData</code> 的 <code>FNetworkPredictionData_Client_Character</code> 对象</li>\n<li>其部分流程负责记录移动情况和处理来自服务器的矫正</li>\n</ul>\n<p>参数：</p>\n<ul>\n<li><p>客户端与服务器通信时的时间戳</p>\n</li>\n<li><p>已保存或待定移动情况的列表</p>\n</li>\n<li><p>来自服务器矫正的已保存信息</p>\n</li>\n<li><p>指示如何应用矫正的标记</p>\n</li>\n<li><p>决定平滑行为的参数</p>\n</li>\n<li><p><code>ClientPredictionData</code> 还包括与这些参数交互的效用函数</p>\n</li>\n<li><p>可在<a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/FNetworkPredictionData_Client_Ch-\"><code>FNetworkPredictionData_Client_Character</code> 的API参考</a>中找到此对象信息和函数的完整列表</p>\n</li>\n<li><p>客户端执行本地移动、准备要发送到服务器的移动并处理矫正时，它的参数将被频繁引用和更改</p>\n</li>\n</ul>\n<h6 id=\"5-5-1-2-复制服务器矫正\"><a href=\"#5-5-1-2-复制服务器矫正\" class=\"headerlink\" title=\"5.5.1.2 复制服务器矫正\"></a>5.5.1.2 复制服务器矫正</h6><ul>\n<li>处理玩家的输入或世界场景中的力之前，自主代理将调用 <code>ClientUpdatePositionAfterServerUpdate</code></li>\n<li>这将检查服务器是否已向所属玩家发送矫正</li>\n<li>若是，<code>ClientPredictionData</code> 中的变量 <code>bUpdatePosition</code> 将为true，且该角色将再现服务器通过客户端矫正进程发送的移动</li>\n</ul>\n<h6 id=\"5-5-1-3-执行和记录移动\"><a href=\"#5-5-1-3-执行和记录移动\" class=\"headerlink\" title=\"5.5.1.3 执行和记录移动\"></a>5.5.1.3 执行和记录移动</h6><ul>\n<li><p>自主代理角色在 <code>TickComponent</code> 期间调用 <code>ReplicateMoveToServer</code>，而非直接调用 <code>PerformMovement</code></p>\n</li>\n<li><p>此函数围绕 <code>PerformMovement</code> 提供必要的逻辑，以便在角色执行它时记录移动，然后将移动提交到服务器</p>\n</li>\n<li><p><code>FSavedMove_Character</code> 结构记录自主代理在每个tick中如何开始和结束移动，之后通过ServerMove RPC将其数据的最小子集发送到服务器</p>\n</li>\n<li><p>其参数包括：</p>\n<ul>\n<li><p>角色最终位置和旋转的相关信息</p>\n</li>\n<li><p>已采集哪些移动输入</p>\n</li>\n<li><p>角色拥有的速度和加速度</p>\n</li>\n<li><p>从 <strong>AnimMontages</strong> 采集的根运动信息</p>\n</li>\n</ul>\n</li>\n<li><p>可在<a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/FSavedMove_Character\"><code>FSavedMove_Character</code> 的API参考</a>中查看此结构的完整参数列表</p>\n</li>\n<li><p>此信息使服务器能够再现玩家执行的移动，然后检查客户端的最终位置</p>\n</li>\n<li><p>处理 <code>PerformMovement</code> 之后，<code>ReplicateMoveToServer</code> 函数利用名为 <code>NewMove</code> 的 <code>FSavedMove_Character</code> 结构在客户端预测数据中记录角色移动的结果，然后将其添加到名为 <code>SavedMoves</code> 的缓冲</p>\n</li>\n<li><p>此缓冲将保存的移动按最旧到最新的顺序排列，并用作队列，直至保存的移动可提交到服务器为止。提交之前，为缓解带宽压力，缓冲中的所有类似移动将合并成单个 <code>FSavedMove_Character</code></p>\n</li>\n<li><p>移动正等着与即将到来的移动相结合，那么参数 <code>PendingMove</code> 将用于存储移动</p>\n</li>\n<li><p>当这些移动被确认或 <em>ACK</em> 后，会从缓冲中移除</p>\n</li>\n<li><p>服务器可通过确认客户端位置有效来直接确认移动，客户端也可以在处理来自服务器的矫正时确认移动</p>\n</li>\n<li><p>最新确认的移动保存在 <code>LastAckedMove</code> 中，以供处理未来的矫正时使用</p>\n</li>\n</ul>\n<h6 id=\"5-5-1-4-向服务器提交移动\"><a href=\"#5-5-1-4-向服务器提交移动\" class=\"headerlink\" title=\"5.5.1.4 向服务器提交移动\"></a>5.5.1.4 向服务器提交移动</h6><p>说明：</p>\n<ul>\n<li><code>ReplicateMoveToServer</code> 通过运行函数 <code>CallServerMove</code> 来完成，该函数接受队列中未获得服务器确认的最新和最旧移动</li>\n<li>这将执行向服务器提交移动的最后准备工作，先尝试提交旧移动（若适用），然后调用正确的ServerMove函数来提交新移动的最终移动</li>\n<li>最终ServerMove直接提交给 <code>UCharacterMovementComponent</code> 的所属角色，作为 <em>不可靠的</em> 服务器RPC</li>\n</ul>\n<p>ServerMove函数不可靠的原因有二：</p>\n<ol>\n<li>正常游戏期间经常会调用ServerMove函数，如果它们被视为可靠，大量调用可靠函数可能会导致缓冲溢出，迫使所属玩家断开连接</li>\n<li>用于缓冲已保存移动的系统可确保传输进程中丢失的移动信息会被重新提交和计算，这为可靠函数提供了类似的安全保障，但却没有可靠RPC缓冲溢出的风险，并增加了一些规定来确保丢弃太旧的移动数据</li>\n</ol>\n<h5 id=\"5-5-2-计算服务器上的移动\"><a href=\"#5-5-2-计算服务器上的移动\" class=\"headerlink\" title=\"5.5.2 计算服务器上的移动\"></a>5.5.2 计算服务器上的移动</h5><p>说明：</p>\n<ul>\n<li>服务器不会定期tick移动来与游戏的tick循环同步，而是等待从自主代理处接收ServerMove调用</li>\n<li><code>ServerMove_Implementation</code> 处理服务器端的移动，重新构造客户端的移动并检查细微差异</li>\n</ul>\n<h6 id=\"5-5-2-1-编译服务器预测数据\"><a href=\"#5-5-2-1-编译服务器预测数据\" class=\"headerlink\" title=\"5.5.2.1 编译服务器预测数据\"></a>5.5.2.1 编译服务器预测数据</h6><ul>\n<li>角色移动组件的权威版本创建名为 <code>ServerPredictionData</code> 的 <code>FNetworkPredictionData_Server_Character</code> 对象，该对象在角色生命周期内存在</li>\n<li>在 <code>ServerMove_Implementation</code> 期间，此对象将存储信息，供以后的进程再现所属客户端的移动</li>\n<li>服务器接收数据时，此对象在后台被不断修改，参数包括：<ul>\n<li>用于计算服务器差量时间的时间戳</li>\n<li>待定的客户端调整</li>\n<li>与解决时间差异相关的标记</li>\n<li>指示服务器确认还是矫正移动的标记</li>\n</ul>\n</li>\n<li>可在<a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/FNetworkPredictionData_Server_Ch-\"><code>FNetworkPredictionData_Server_Character</code> 的API参考指南</a>中查看它的参数和函数的完整列表</li>\n</ul>\n<h6 id=\"5-5-2-2-验证客户端时间戳\"><a href=\"#5-5-2-2-验证客户端时间戳\" class=\"headerlink\" title=\"5.5.2.2 验证客户端时间戳\"></a>5.5.2.2 验证客户端时间戳</h6><ul>\n<li>与ServerMove RPC一同发送的信息包括移动发生时的时间戳</li>\n<li>若服务器时间戳和客户端时间戳差异太大，客户端时间戳将视为已过期，移动将被丢弃</li>\n<li>否则该差异将标记为已解决，且 <code>UCharacterMovementComponent</code> 使用 <code>ProcessClientTimeStampForTimeDiscrepancy</code> 在下一步中创建差量时间的覆盖</li>\n</ul>\n<h6 id=\"5-5-2-3-计算差量时间\"><a href=\"#5-5-2-3-计算差量时间\" class=\"headerlink\" title=\"5.5.2.3 计算差量时间\"></a>5.5.2.3 计算差量时间</h6><p>说明：</p>\n<ul>\n<li>差量时间通常是通过追踪当前tick与上一个tick之间经过的时间来获取</li>\n<li>但服务器上的角色并不使用 <code>TickComponent</code> 来计算移动</li>\n</ul>\n<p>原理：</p>\n<ul>\n<li><code>ServerMove_Implementation</code> 调用 <code>GetServerMoveDeltaTime</code> 并在收到ServerMove后计算移动</li>\n<li>若服务器预测数据被标记为尝试解决时间戳差异，它将使用 <code>TimeDiscrepancyResolutionMoveDeltaOverride</code></li>\n<li>若无时间差异，则根据当前ServerMove RPC时间戳和最后一个ServerMove RPC时间戳之间的差异，使用服务器预测数据来创建差量时间</li>\n<li>为多一层安全，执行这些计算时多半使用服务器时间戳而非客户端时间戳，以防止客户端加快本地游戏时间进行速度作弊</li>\n</ul>\n<h6 id=\"5-5-2-4-计算移动\"><a href=\"#5-5-2-4-计算移动\" class=\"headerlink\" title=\"5.5.2.4 计算移动\"></a>5.5.2.4 计算移动</h6><p>说明：</p>\n<ul>\n<li>服务器使用来自ServerMove RPC的数据重新构造所属玩家控制器的控制旋转</li>\n<li>然后调用函数 <code>MoveAutonomous</code> 来处理角色的加速、旋转和跳跃输入</li>\n</ul>\n<p>原理：</p>\n<ul>\n<li><code>MoveAutonomous</code> 使用 <code>PerformMovement</code> 函数，根据之前重新构造的数据和上一步中提供的差量时间来模拟角色的移动物理效果</li>\n<li>服务器从获取ServerMove调用时自身角色副本所在的位置模拟运动，而非从客户端开始位置模拟</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>若角色正在计算来自动画的根运动，MoveAutonomous还会使用提供的差量时间tick角色的动画姿势</li>\n<li>所有动画事件都将相应触发。否则动画将正常tick</li>\n</ul>\n<h5 id=\"5-5-3-处理客户端错误和矫正\"><a href=\"#5-5-3-处理客户端错误和矫正\" class=\"headerlink\" title=\"5.5.3 处理客户端错误和矫正\"></a>5.5.3 处理客户端错误和矫正</h5><p>说明：</p>\n<ul>\n<li>服务器移动的工作原理是假设服务器和所属客户端在相同位置开始移动，且若服务器执行的移动与客户端报告的相同，则移动结束的位置也将相同</li>\n<li>若客户端的移动由于连接问题而丢失，或者客户端提交了错误数据，则两者的移动将在不同的位置结束，因此需要矫正</li>\n<li>函数 <code>ServerMoveHandleClientError</code> 负责这些操作</li>\n</ul>\n<h6 id=\"5-5-3-1-确定是否需要调整\"><a href=\"#5-5-3-1-确定是否需要调整\" class=\"headerlink\" title=\"5.5.3.1 确定是否需要调整\"></a>5.5.3.1 确定是否需要调整</h6><p>说明：</p>\n<ul>\n<li>频繁发送矫正会导致带宽紧张，并导致客户端过于频繁地重新模拟大量已保存的移动</li>\n<li>因此要首先检查从 <code>WithinUpdateDelayBounds</code> 返回的值，查看移动间歇是否已超过最小时间量</li>\n<li>若返回 <code>false</code>，则不发出矫正，若返回true，则可运行其余进程</li>\n</ul>\n<p>原理：</p>\n<ul>\n<li>使用 <code>ServerCheckClientError</code> 查看服务器与客户端之间的误差是否大到需要矫正</li>\n<li>若返回true 或 <code>bForceClientUpdate</code> 因故被设为true而强制矫正，则 <code>ServerMoveHandleClientError</code> 将继续执行余下进程</li>\n</ul>\n<p>注：</p>\n<ul>\n<li><p>可在 <code>BaseGame.ini</code> 中找到用于调整这两个操作的参数，并可在 <code>DefaultGame.ini</code> 中提供项目特定的覆盖</p>\n</li>\n<li><p><code>ClientErrorUpdateRateLimit</code> 值决定着服务器向客户端发送错误矫正的最小延迟（单位为秒）<code>MAXPOSITIONERRORSQUARED</code> 值是网络游戏中可接受未矫正最大位置误差的平方</p>\n</li>\n<li><p>两者都可在配置文件的 <code>[/Script/Engine.GameNetworkManager]</code> 部分中找到</p>\n</li>\n<li><p>若需要调整，服务器预测数据用从角色的服务器副本中采集的当前移动变量样本填充名为 <code>PendingAdjustment</code> 的 **<a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/FClientAdjustment\"><code>FClientAdjustment</code></a>**，包括位置、旋转、速度和可能充当角色移动基础的对象</p>\n</li>\n<li><p>否则将 <code>PendingAdjustment</code> 的 <code>bAckGoodMove</code> 值设为 <code>true</code>，将客户端的移动标记为有效</p>\n</li>\n</ul>\n<h6 id=\"5-5-3-2-发送客户端调整或确认移动\"><a href=\"#5-5-3-2-发送客户端调整或确认移动\" class=\"headerlink\" title=\"5.5.3.2 发送客户端调整或确认移动\"></a>5.5.3.2 发送客户端调整或确认移动</h6><p>说明：</p>\n<ul>\n<li>确认到客户端的移动的最后一步由 <code>SendClientAdjustment</code> 完成</li>\n<li>此函数不作为 <code>ServerMove_Implementation</code> 的一部分，而是作为 <code>UNetDriver::ServerReplicateActors</code> 的一部分，在服务器端的tick结束时调用，并同样负责调用其他客户端调整RPC</li>\n<li>调用 <code>SendClientAdjustment</code> 时，操作方式将取决于之前步骤中编译的预测数据的标记方式</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>若服务器预测数据的 <code>PendingAdjustment</code> 的 <code>bAckGoodMove</code> 标记为 <code>true</code>，则将调用 <code>ClientAckGoodMove</code> RPC来确认移动，告知所属客户端机器上的自主代理该移动为有效</li>\n<li>这将从所属客户端的 <code>SavedMoves</code> 缓冲中移除原始移动，并将其记录为 <code>LastAckedMove</code>，用于编译未来的预测数据</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>若 <code>PendingAdjustment</code> 的 <code>bAckGoodMove</code> 标记为false，则将调用客户端调整函数，将最终矫正发送到客户端</li>\n</ul>\n<h6 id=\"5-5-3-3-自主代理接收客户端调整\"><a href=\"#5-5-3-3-自主代理接收客户端调整\" class=\"headerlink\" title=\"5.5.3.3 自主代理接收客户端调整\"></a>5.5.3.3 自主代理接收客户端调整</h6><p>说明：</p>\n<ul>\n<li>客户端调整RPC包括 <code>ClientAdjustPosition</code>、<code>ClientAdjustRotation</code>、这两者在速度为零时发生的缩略版、以及这两者专用于根运动移动的版本</li>\n<li>作为 <code>SendClientAdjustment</code> 的一部分，服务器可调用多个此类函数，具体取决于待矫正内容的性质和严重程度</li>\n<li>每个此类函数都可告知 <code>ClientPredictionData</code> 在应用必要矫正后确认移动，且都会将 <code>bUpdatePosition</code> 标记为true</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>然后在客户端的下一个 <code>TickComponent</code> 开始时使用 <code>ClientUpdatePosition</code> 应用最终矫正</li>\n</ul>\n<h5 id=\"5-5-4-将移动复制到模拟代理\"><a href=\"#5-5-4-将移动复制到模拟代理\" class=\"headerlink\" title=\"5.5.4 将移动复制到模拟代理\"></a>5.5.4 将移动复制到模拟代理</h5><p>说明：</p>\n<ul>\n<li>客户端机器上的角色（其所有者除外）为模拟代理，而非自主代理、</li>\n<li>由于模拟代理的唯一工作就是响应服务器，因此将移动从服务器复制到模拟代理的进程为高度简化</li>\n<li>从服务器接收移动更新时不会模拟运动物理效果，而是将其位置、旋转和速度设为服务器想要的值，并使用一些额外的进程让移动更流畅、更可信</li>\n</ul>\n<h6 id=\"5-5-4-1-存储复制的移动信息\"><a href=\"#5-5-4-1-存储复制的移动信息\" class=\"headerlink\" title=\"5.5.4.1 存储复制的移动信息\"></a>5.5.4.1 存储复制的移动信息</h6><p>说明：</p>\n<ul>\n<li>Actor复制移动时，其不会直接复制自身的变换。所有Actor都维持名为 <code>ReplicatedMovement</code> 的复制变量，该变量使用结构<a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/Engine/FRepMovement\"><code>FRepMovement</code></a></li>\n</ul>\n<p>作用：</p>\n<ul>\n<li><p>布尔 <code>bReplicateMovement</code> 由蓝图中的 <strong>Replicate Movement</strong> 变量表示，标记Actor将移动信息存储在此结构中，并将其复制到客户端</p>\n</li>\n<li><p>客户端收到 <code>ReplicatedMovement</code> 的更新时，<strong>RepNotify</strong> 函数 <code>OnRep_ReplicatedMovement</code> 将解压缩存储的移动数据，并相应地更新Actor的位置和速度</p>\n</li>\n<li><p>在蓝图中无法访问 <code>ReplicatedMovement</code> 或其 OnRep，但可在C++中覆盖 <code>OnRep_ReplicatedMovement</code>，还可在<code>GetLifetimeReplicatedProps</code> 中覆盖 <code>ReplicatedMovement</code> 的复制条件</p>\n</li>\n<li><p>用户因此能够自定义移动复制在基于C++的Actor类中的行为</p>\n</li>\n<li><p>在 <code>ACharacter</code> 中，仅为模拟代理复制 <code>ReplicatedMovement</code> 结构</p>\n</li>\n<li><p>自主代理上会忽略此结构，而使用服务器移动和客户端调整RPC来处理移动</p>\n</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>若角色用另一个Actor作为基础，则将使用 <code>ReplicatedBasedMovement</code>，从而应用额外的逻辑来确保客户端是依据服务器而正确建立</li>\n<li>若角色使用根运动系统，则忽略所有这些进程，而倾向于使用 <code>RepRootMotion</code></li>\n</ul>\n<h6 id=\"5-5-4-2-在模拟代理上tick移动\"><a href=\"#5-5-4-2-在模拟代理上tick移动\" class=\"headerlink\" title=\"5.5.4.2 在模拟代理上tick移动\"></a>5.5.4.2 在模拟代理上tick移动</h6><ul>\n<li>当 <code>UCharacterMovementComponent</code> 在模拟代理上运行 <code>TickComponent</code> 时，其将调用 <code>SimulatedTick</code> 来处理模拟移动的逻辑</li>\n<li>这不会执行上述复制移动。相反，<code>SimulatedTick</code> 会根据最近提供的复制移动数据继续移动</li>\n<li>执行标准移动物理效果时，调用 <code>SimulateMovement</code> 函数，然后使用 <code>SmoothClientPosition</code> 执行最终的验证和网络平滑</li>\n</ul>\n<h6 id=\"5-5-4-3-执行模拟移动\"><a href=\"#5-5-4-3-执行模拟移动\" class=\"headerlink\" title=\"5.5.4.3 执行模拟移动\"></a>5.5.4.3 执行模拟移动</h6><p>说明：</p>\n<ul>\n<li><code>SimulateMovement</code> 函数负责移动模拟代理角色</li>\n<li>除了会被 <code>SimulatedTick</code> 调用，其还会被 <code>OnRep_ReplicateMovement</code> 调用</li>\n<li>此函数执行以下进程：<ol>\n<li>调用所属角色的 <code>GetReplicatedMovement</code> 函数，以获取对 <code>ReplicatedMovement</code> 的引用</li>\n<li>执行安全检查，确保复制的移动数据有效，且客户端的基础被解析</li>\n<li>检查是否已收到网络更新</li>\n<li>从服务器应用通过 <code>GetReplicatedMovementMode</code> 获取的角色移动模式</li>\n<li>重置有关网络更新的所有标记</li>\n<li>基于当前 <code>MovementMode</code> 和角色的当前状态信息执行模拟移动的逻辑</li>\n</ol>\n</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>与标准运动物理效果相比，模拟运动的逻辑高度简化，因此主要包含在 <code>SimulateMovement</code> 函数本身中，不会分解成更小的函数</li>\n<li>但是，此函数仍负责更新角色的本地移动状态，包括应转换为哪个移动模式，角色是否已经降落至地面，以及应拥有的速度</li>\n<li>这些信息可确保角色正确更新动画，让动作看起来十分准确</li>\n</ul>\n<h6 id=\"5-5-4-4-网络平滑\"><a href=\"#5-5-4-4-网络平滑\" class=\"headerlink\" title=\"5.5.4.4 网络平滑\"></a>5.5.4.4 网络平滑</h6><p>说明：</p>\n<ul>\n<li>若单纯通过复制角色的位置和旋转来复制移动，则角色看起来每隔数分钟就会瞬移一次</li>\n<li>这是因为本地机器的渲染速率比网络发送数据速率更快</li>\n<li>举例而言，客户端可能以240 Hz刷新率渲染显示器，而复制的移动可能仅以30 Hz发送</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>网络平滑是使此运动平滑的进程，将角色从源位置逐渐向目标位置插入，而非立即将其对齐到目标位置</li>\n<li>源位置由角色当前位置提供，而目标位置由客户端预测数据提供</li>\n<li>内插本身在 <code>SmoothClientPosition</code> 中处理，使用<a href=\"https://docs.unrealengine.com/en-US/API/Runtime/Engine/Engine/ENetworkSmoothingMode\"><code>NetworkSmoothingMode</code></a>确定应使用的内插类型</li>\n</ul>\n<h4 id=\"5-6-特殊移动情况\"><a href=\"#5-6-特殊移动情况\" class=\"headerlink\" title=\"5.6 特殊移动情况\"></a>5.6 特殊移动情况</h4><ul>\n<li>包含常见特殊移动情况的信息，包括传送、自定义移动，<strong>以及可能在特殊技能中看到的代码驱动移动</strong></li>\n</ul>\n<h5 id=\"5-6-1-多人游戏中传送角色\"><a href=\"#5-6-1-多人游戏中传送角色\" class=\"headerlink\" title=\"5.6.1 多人游戏中传送角色\"></a>5.6.1 多人游戏中传送角色</h5><p>说明：可调用 <strong>SetLocation</strong> 函数或 <strong>Teleport</strong> 蓝图节点在网络游戏中传送角色</p>\n<ol>\n<li>必须在服务器上调用</li>\n<li>若使用 <code>SetLocation</code> 函数，将 <code>bTeleport</code> 变量设为true，使其将该移动视为传送</li>\n</ol>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/CharacterMovementComponent/CharacterMovement_Teleport.jpg\" alt=\"传送角色\"></p>\n<ul>\n<li>若满足这些条件，移动会作为传送记录到服务器的预测数据和复制移动中，且所有客户端会将角色对齐到所需位置（而非应用平滑）来做出相应的响应</li>\n</ul>\n<h5 id=\"5-6-2-自定义移动模式\"><a href=\"#5-6-2-自定义移动模式\" class=\"headerlink\" title=\"5.6.2 自定义移动模式\"></a>5.6.2 自定义移动模式</h5><p>说明：移动模式 <code>MOVE_Custom</code> 会中止所有其他移动物理效果，可实现自定义移动逻辑，不受 <code>UCharacterMovementComponent</code> 正常进程的干扰</p>\n<p>作用：</p>\n<ul>\n<li><p><code>UCharacterMovementComponent</code> 通常不可蓝图化，因此蓝图中的自定义移动通常是使用 <strong>UpdateCustomMovement</strong> 事件直接在角色内实现</p>\n</li>\n<li><p>可使用 <strong>Custom Movement Mode</strong> 字节变量通过整数开关或自定义列举转换提供子模式</p>\n<p><img src=\"/UE4%E8%81%94%E7%BD%91%E5%92%8C%E5%A4%9A%E4%BA%BA%E6%B8%B8%E6%88%8F.assets/CharacterMovement_CustomMovementModeBP.jpg\" alt=\"蓝图中的自定义移动模式\"></p>\n</li>\n<li><p><code>UpdateCustomMovement</code> 由 <code>UCharacterMovementComponent</code> 中的 <code>PhysCustom</code> 函数调用</p>\n</li>\n<li><p>函数 <code>StartNewPhysics</code>、<code>PhysCustom</code> 和所有其他移动物理效果函数都是虚拟函数，因此若要在C++中创建自定义 <code>UCharacterMovementComponent</code>，可直接将其覆盖</p>\n</li>\n</ul>\n<h5 id=\"5-6-3-通根运动复制\"><a href=\"#5-6-3-通根运动复制\" class=\"headerlink\" title=\"5.6.3 通根运动复制\"></a>5.6.3 通根运动复制</h5><p>说明：</p>\n<ul>\n<li>有时需要在短时间内直接控制角色的移动，例如在使用 <strong>Gameplay Ability System</strong> 创建的技能发动期间、或在动画驱动操作发生期间</li>\n<li>虽然这在纯本地游戏中很容易做到，但复制的特殊移动情况需要使用根运动（通常指应用动画中的移动）</li>\n<li>根运动系统也已调整为允许代码驱动的特殊移动情况</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>无论 <code>UCharacterMovementComponent</code> 使用哪种运动模式，根运动始终优先于标准移动物理状态。完成根运动后将继续正常移动</li>\n</ul>\n<h6 id=\"5-6-3-1-来自动画蒙太奇\"><a href=\"#5-6-3-1-来自动画蒙太奇\" class=\"headerlink\" title=\"5.6.3.1 来自动画蒙太奇\"></a>5.6.3.1 来自动画蒙太奇</h6><p>说明：</p>\n<ul>\n<li>根运动的大部分应用来自动画蒙太奇，而动画蒙太奇用于代码触发的一次性动画</li>\n<li>根运动的这种用法会中止角色正在执行的其他移动，直至动画结束</li>\n<li>角色从其骨架的根骨骼使用移动，并将其转换为场景空间的移动，使动画能够控制角色的移动方式</li>\n<li>完成这一步后，角色恢复使用普通物理效果</li>\n</ul>\n<p>注：</p>\n<ul>\n<li><p>若角色处于下落移动模式，即使角色正在执行根运动，重力仍将作用于角色的Z轴移动</p>\n</li>\n<li><p>在上述复制进程中，根运动信息由 <code>FSavedMove_Character</code> 结构采集，包括作为其来源的动画蒙太奇、角色在蒙太奇中的轨迹位置，以及角色移动本身的参数</p>\n</li>\n</ul>\n<p>服务器和所属客户端上的自主代理不会检查播放的动画是否相同，因为这通常被视为是一种装饰功能</p>\n<ul>\n<li>因此必须对游戏逻辑进行编程，确保所有动画蒙太奇都能在所有连接游戏的机器上正确触发</li>\n<li>但是模拟代理拥有上述进程的并行进程，用于同步基于根运动的移动</li>\n</ul>\n<p>Gameplay Ability System插件将复制触发动画蒙太奇和根运动的技能，以此同步这些动画蒙太奇和根运动。</p>\n<h6 id=\"5-6-3-2-来自根运动源\"><a href=\"#5-6-3-2-来自根运动源\" class=\"headerlink\" title=\"5.6.3.2 来自根运动源\"></a>5.6.3.2 来自根运动源</h6><p>说明：</p>\n<ul>\n<li>有时需要手动控制角色的位置来处理特殊情况</li>\n<li>举例而言，可能需要创造一种特殊技能，使角色跳到空中特定的高度，然后落到移动目标上</li>\n</ul>\n<p>原理：</p>\n<ul>\n<li>在standalone游戏中，可以用 <code>SetLocation</code> 和 <code>SetRotation</code> 手动控制角色，但在网络游戏中，上述复制进程无法捕捉此运动，因此服务器将把客户端的最终位置视为错误并发出矫正</li>\n<li>同时，来自动画蒙太奇的根运动仅遵循动画中预计算的运动</li>\n<li>这意味着根运动通常无法从游戏世界获取实时信息，比如其他角色的位置，而且也不能使用游戏变量进行轻松微调</li>\n</ul>\n<p>注：</p>\n<ul>\n<li><p><strong>根运动源</strong> 为程序员提供了一种手动控制角色根运动的方法</p>\n</li>\n<li><p>因此可以通过编程来控制角色的移动，同时还可以利用上述系统在联网期间处理根运动</p>\n</li>\n<li><p>根运动源应应用于所属客户端上的自主代理</p>\n</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li><p>必须创建新的FRootMotionSource结构</p>\n</li>\n<li><p>不同类型的移动对应不同的FRootMotionSource变体</p>\n</li>\n<li><p>举例而言，FRootMotionSource_MoveToForce用于从开始位置到目标位置的直线移动，而FRootMotionSource_JumpForce遵循的是弹跳式弧线移动</p>\n</li>\n<li><p>创建适当的根运动源后，可使用所需源位置、目标位置和移动行为相关参数将其属性初始化</p>\n</li>\n<li><p>函数 <code>UCharacterMovementComponent::ApplyRootMotionSource</code> 将把根运动源应用于角色，并返回一个可供之后引用的柄</p>\n</li>\n<li><p>根运动源本身不处理移动，而是由角色移动组件执行与所提供 <code>FRootMotionSource</code> 中参数一致的移动，以代替动画</p>\n</li>\n<li><p>最终这将添加到 <code>FSavedMove_Character</code> 结构中的 <code>SavedRootMotion</code>，并在复制周期中采集，前提是 <code>FRootMotionSource</code> 应用于自主代理</p>\n</li>\n<li><p>完成移动后，必须调用 <code>UCharacterMovementComponent::RemoveRootMotionSource</code>，使用从 <code>ApplyRootMotionSource</code> 返回的柄将其移除</p>\n</li>\n</ul>\n<p>Gameplay Ability System插件包含几个利用根运动源的技能任务，使技能可以执行复杂的程序化移动序列</p>\n<ul>\n<li>基础范例请参见 <code>AbilityTask_ApplyRootMotionMoveToForce</code></li>\n</ul>\n<h3 id=\"6-OnlineBeacon\"><a href=\"#6-OnlineBeacon\" class=\"headerlink\" title=\"6. OnlineBeacon\"></a>6. OnlineBeacon</h3><p>介绍：</p>\n<ul>\n<li><strong>Online Beacons</strong> 是一个特殊类型的 <strong>Actor</strong>，可提供一种简易的方式与服务器联络并进行交互（通过 RPC），而无需让普通游戏连接来执行此任务</li>\n<li>可以使用内置类，因为在一些情况下它们将被延展为自定义类，执行项目特定的交互、逻辑和信息请求</li>\n</ul>\n<h4 id=\"6-1-OnlineBeacon-基类\"><a href=\"#6-1-OnlineBeacon-基类\" class=\"headerlink\" title=\"6.1 OnlineBeacon 基类\"></a>6.1 OnlineBeacon 基类</h4><p>说明：</p>\n<ul>\n<li>Beacon 类执行的常规操作是请求服务质量信息</li>\n<li>在客户端需要加入的游戏中预留空位</li>\n<li>接收游戏中玩家名列表、</li>\n<li>获取正在进行的游戏中的得分和运行时间，等等</li>\n</ul>\n<h5 id=\"6-1-1-AOnlineBeacon\"><a href=\"#6-1-1-AOnlineBeacon\" class=\"headerlink\" title=\"6.1.1 AOnlineBeacon\"></a>6.1.1 AOnlineBeacon</h5><p>说明：</p>\n<ul>\n<li>这是 <code>AOnlineBeaconClient</code> 和 <code>AOnlineBeaconHost</code> 的基类</li>\n<li>它直接派生自 <code>AActor</code></li>\n</ul>\n<h5 id=\"6-1-2-AOnlineBeaconHost\"><a href=\"#6-1-2-AOnlineBeaconHost\" class=\"headerlink\" title=\"6.1.2 AOnlineBeaconHost\"></a>6.1.2 AOnlineBeaconHost</h5><p>说明：</p>\n<ul>\n<li>此类使用其自身的 <code>UNetDriver</code> 获得来自远程客户端电脑的传入 Online Beacon 连接</li>\n<li>接收到连接时，它将在注册 <code>AOnlineBeaconHostObject</code> 实例列表中进行查找，找到与传入客户端匹配的实例并转交连接</li>\n<li>此类通常不需要被派生，因其只管理客户端和注册 <code>AOnlineBeaconHostObject</code> 之间的初始连接</li>\n</ul>\n<h5 id=\"6-1-3-AOnlineBeaconClient\"><a href=\"#6-1-3-AOnlineBeaconClient\" class=\"headerlink\" title=\"6.1.3 AOnlineBeaconClient\"></a>6.1.3 AOnlineBeaconClient</h5><p>说明：</p>\n<ul>\n<li>此类的子项连接到主机并执行实际的 RPC</li>\n<li>它们其中一个将在客户端电脑上生成，一个由正确的 <code>AOnlineBeaconHostObject</code>（注册到服务器的 <code>AOnlineBeaconHost</code>）在服务器上生成</li>\n<li><code>GetBeaconType</code> 函数的输出（即为类名称）将用于对比此类的实例和正确主机对象类的注册实例</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>这和普通的 Actor 生成方式（服务器生成 Actor 然后复制到客户端）不同</li>\n<li>然而，客户端和服务器对象副本之间的连接建立后，对象复制将正常进行，任意一方均可向对方执行 RPC，而对象的服务器版本可对属性复制发送命令</li>\n<li>该基类实现 <code>OnConnected</code> 和 <code>OnFailure</code> 函数</li>\n<li>这两个函数可由子类覆盖，在连接时执行 RPC，或处理失败连接</li>\n<li>此类是 Online Beacon 系统的主力，将执行 Beacon 所需的客户端端的工作</li>\n<li>在成功连接事件中，服务器上将生成和源实例同步的另一个实例，此例也可执行服务器端的工作，通过客户端和服务器 RPC（或服务器到客户端的复制属性）进行协调和交流</li>\n</ul>\n<h5 id=\"6-1-4-AOnlineBeaconHostObject\"><a href=\"#6-1-4-AOnlineBeaconHostObject\" class=\"headerlink\" title=\"6.1.4 AOnlineBeaconHostObject\"></a>6.1.4 AOnlineBeaconHostObject</h5><p>说明：</p>\n<ul>\n<li>此类也应被覆盖，使其和覆盖的 <code>AOnlineBeaconClient</code> 类配对</li>\n<li>将客户端 <code>GetBeaconType</code> 的返回值和保存在 <code>BeaconTypeName</code> 成员变量中的值进行匹配即可完成配对</li>\n<li>服务器的 <code>AOnlineBeaconHost</code> 检测到传入 <code>AOnlineBeaconClient</code> 的配对 <code>AOnlineBeaconHostObject</code> 时，它将指示 <code>AOnlineBeaconHostObject</code> 通过虚拟 <code>SpawnBeaconActor</code> 函数生成 <code>AOnlineBeaconClient</code> 的本地副本</li>\n<li>此函数默认使用 <code>ClientBeaconActorClass</code> 成员变量确定要生成的 actor 类，此类应被设为配对的 <code>AOnlineBeaconClient</code> 类</li>\n<li>它还将在生成对象的服务器副本上调用 <code>SetBeaconOwner</code>，以便客户端对象的服务器端实例与主机对象进行交流</li>\n<li>此设置多数建立在基类中，无需被覆盖</li>\n</ul>\n<h4 id=\"6-2-OnlineBeacon-范例\"><a href=\"#6-2-OnlineBeacon-范例\" class=\"headerlink\" title=\"6.2 OnlineBeacon 范例\"></a>6.2 OnlineBeacon 范例</h4><p>说明：</p>\n<ul>\n<li>引擎中已自带大量预建 Beacon 类配对</li>\n<li>也可自行构建，Test Beacon 就是一个简单的好例子</li>\n<li><code>ATestBeaconClient</code> 派生自 <code>AOnlineBeaconClient</code>，<code>ATestBeaconHost</code> 派生自 <code>AOnlineBeaconHostObject</code></li>\n</ul>\n<p>使用：Test Beacon 就是简单地在客户端和服务器之间来回执行重复的函数调用</p>\n<ol>\n<li>在 <code>ATestBeaconHost</code> 的构建函数中，<code>ClientBeaconActorClass</code> 设为 <code>ATestBeaconClient</code> 的类、<code>BeaconTypeName</code> 设为 <code>ClientBeaconActorClass</code> 的命名（调用 <code>GetName</code> 函数获得），这样可确保 <code>AOnlineBeaconHost</code> 将两个 Test Beacon 类正确配对</li>\n<li>客户端的 <code>ATestBeaconClient</code> 成功连上服务器时，服务器的 <code>AOnlineBeaconHost</code> 实例将指引注册 <code>ATestBeaconHost</code> 生成其自身的 <code>ATestBeaconClient</code>，并在服务器上将其和 <code>ATestBeaconClient</code> 关联， 这很重要，因为它使客户端和服务器 RPC 在两个 <code>ATestBeaconClient</code> 实例之间传递</li>\n<li>服务器的 <code>ATestBeaconHost</code> 将在它的 <code>ATestBeaconClient</code> 实例上调用 <code>OnClientConnected</code>（客户端 RPC）， 因为此函数为客户端 RPC，调用函数的命令将被传至客户端电脑，而不会在服务器上调用函数</li>\n<li>RPC 将在客户端的 <code>ATestBeaconClient</code> 实例上运行虚拟 <code>OnConnected</code> 函数，此函数已被覆盖，以便调用 <code>ClientPing</code></li>\n<li><code>ClientPing</code> 将输出一些文本到调试日志，然后调用服务器 RPC <code>ServerPong</code>，它将在网络连接中传递，并在服务器的 <code>ATestBeaconClient</code> 实例上执行</li>\n<li><code>ServerPong</code> 将输出调试文本并调用 <code>ClientPing</code>，再触发对客户端联网 RPC 调用</li>\n<li>此过程将无限继续，这通常并非理想状态，尤其是这些 RPC 并未执行具体任务，它可用于记录相同 RPC 在两次分步运行之间的时间，以追踪服务器的 ping 时，因为可能存在延迟，所以这个 ping 检查不会按电脑和网络的最佳频率进行，或者客户端&#x2F;服务器可能直接在数次 ping 后直接停止返回 ping，其他的使用范例可能涉及到唯一的 RPC 回叫到客户端，而不是继续循环，如连续询问一连串的问题 <code>该服务器的游戏使用的是哪张地图？</code>或 <code> 这是一个夺旗服务器吗？</code>，这些问题的内容视特定游戏或项目的相关信息而定</li>\n</ol>\n<h3 id=\"7-测试多人游戏\"><a href=\"#7-测试多人游戏\" class=\"headerlink\" title=\"7. 测试多人游戏\"></a>7. 测试多人游戏</h3><p>介绍：</p>\n<ul>\n<li>更改编辑器的某些设置</li>\n<li>测试不同的多人场景</li>\n</ul>\n<h4 id=\"7-1-设置玩家数量\"><a href=\"#7-1-设置玩家数量\" class=\"headerlink\" title=\"7.1 设置玩家数量\"></a>7.1 设置玩家数量</h4><p><strong>增加玩家数量</strong></p>\n<ul>\n<li><p>单击 <strong>Play</strong> 按钮旁的下箭头，然后输入 <strong>Number of Players</strong> 的值</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/TestMultiplayer/NumberOfPlayers.jpg\" alt=\"NumberOfPlayers.png\"></p>\n</li>\n<li><p>默认情况下，服务器将使用 <strong>Selected Viewport</strong> 作为游戏窗口，并为添加的每位玩家创建新窗口</p>\n</li>\n</ul>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/TestMultiplayer/PIE.jpg\" alt=\"PIE.png\"></p>\n<h4 id=\"7-2-调整游戏窗口\"><a href=\"#7-2-调整游戏窗口\" class=\"headerlink\" title=\"7.2 调整游戏窗口\"></a>7.2 调整游戏窗口</h4><p><strong>为服务器调整窗口</strong></p>\n<ul>\n<li><p>单击 <strong>Play</strong> 按钮旁的下箭头，然后选择 <strong>New Editor Window</strong></p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/TestMultiplayer/NewEditorWindow.jpg\" alt=\"NewEditorWindow.png\"></p>\n</li>\n<li><p>虽然模拟客户端拥有自己的窗口，但此设置还会模拟服务器创建独立窗口</p>\n</li>\n</ul>\n<h4 id=\"7-3-高级设置\"><a href=\"#7-3-高级设置\" class=\"headerlink\" title=\"7.3 高级设置\"></a>7.3 高级设置</h4><p><strong>调整窗口大小</strong></p>\n<ol>\n<li><p>单击 <strong>Play</strong> 按钮旁的下箭头，然后选择 <strong>Advanced Settings</strong></p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/TestMultiplayer/AdvancedSettings.jpg\" alt=\"AdvancedSettings.png\"></p>\n</li>\n<li><p>在 <strong>Play in New Window</strong> 部分下设置所需的窗口大小</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/TestMultiplayer/WindowSize.jpg\" alt=\"WindowSize.png\"></p>\n<ul>\n<li><strong>Play in New Window</strong> 大小选项允许您设置所创建的窗口的大小和默认位置</li>\n<li>可以从若干预设窗口大小中选择或手动输入窗口大小（此例中，我们指定为 640x480)</li>\n<li>可以将所创建的窗口设置为 <strong>Left</strong> 和 <strong>Top</strong> 位置或单击 <strong>Always center window to screen</strong> 的复选框</li>\n</ul>\n</li>\n<li><p>输入窗口大小后，当您在编辑器中玩游戏时，每个新窗口的大小相同。</p>\n</li>\n</ol>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/TestMultiplayer/MultipleWindows.jpg\" alt=\"MultipleWindows.png\"></p>\n<ul>\n<li>当在编辑器中使用每个游戏会话的新窗口玩游戏时，将注意到每个窗口顶部将显示玩家是服务器玩家还是客户端玩家</li>\n<li>同时，在 <strong>Play</strong> 模式下，移动窗口时，系统将为下次在编辑器会话中 <strong>Play</strong> 记住其位置（因此，无需一直移动窗口，这样使得更简单）</li>\n</ul>\n<h4 id=\"7-4-多人选项\"><a href=\"#7-4-多人选项\" class=\"headerlink\" title=\"7.4 多人选项\"></a>7.4 多人选项</h4><p><strong>Advanced Settings</strong> 中还包括用于设置附加多人选项的部分：</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/TestMultiplayer/MultiplayerOptions.jpg\" alt=\"MultiplayerOptions.png\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>Number of Players</strong></td>\n<td align=\"left\">此选项定义游戏启动时其中将生成的玩家数量<br />编辑器和监听服务器均视为玩家，而专用服务器则不会<br />客户端组成剩余玩家</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Server Game Options</strong></td>\n<td align=\"left\">您可在此指定将作为 URL 参数传输到服务器的附加选项</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Run Dedicated Server</strong></td>\n<td align=\"left\">如果选中，则将启动独立的专用服务器<br />否则，第一个玩家将充当所有其他玩家均可连接的监听服务器</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Route 1st Gamepad to 2nd Client</strong></td>\n<td align=\"left\">在单个进程中运行多个玩家窗口时，此选项将决定游戏手柄输入的路由方式<br />如果未选中（默认），第一个游戏手柄将连接到第一个窗口，第二个连接到第二个窗口，以此类推<br />如果选中，则第一个游戏手柄将连接第二个窗口<br />然后即可通过键盘&#x2F;鼠标控制第一个窗口，如果两人在同一台计算机上进行测试则十分便利</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Use Single Process</strong></td>\n<td align=\"left\">此选项将在虚幻引擎 4 的单个实例中生成多个玩家窗口<br />其加载速度更快，但也有存在更多问题的可能性。未选中此选项时，附加选项将可用</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Create Audio Device for Every Player</strong></td>\n<td align=\"left\">启用此选项将允许从每位玩家的角度渲染精确音频，但将占用更多 CPU 资源</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Play In Editor Description</strong></td>\n<td align=\"left\">此选项根据当前应用的多人设置说明玩游戏时将发生的事情</td>\n</tr>\n</tbody></table>\n<ul>\n<li>当选中 <strong>Use Single Process</strong> 时，虚幻引擎 4 的单个实例中将生成多个窗口</li>\n<li>当未选中此选项时，将为分配的每位玩家启动多个 UE4 的实例，而且附加选项将可用：</li>\n</ul>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/TestMultiplayer/NoSingleProcess.jpg\" alt=\"NoSingleProcess.png\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>Editor Multiplayer Mode</strong></td>\n<td align=\"left\">此选项是用于 Play In Editor（<strong>Play Offline</strong>、<strong>Play As Listen Server</strong> 或 <strong>Play As Client</strong>）的 NetMode</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Command Line Arguments</strong></td>\n<td align=\"left\">您可在此分配将传输到独立游戏实例的附加命令行选项</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Multiplayer Window Size (in pixels)</strong></td>\n<td align=\"left\">定义生成附加独立游戏实例时所采用的宽度&#x2F;高度</td>\n</tr>\n</tbody></table>\n<h4 id=\"7-5-监听服务器与专用服务器\"><a href=\"#7-5-监听服务器与专用服务器\" class=\"headerlink\" title=\"7.5 监听服务器与专用服务器\"></a>7.5 监听服务器与专用服务器</h4><p>介绍：启动多人游戏时，游戏托管方式有两种</p>\n<ol>\n<li>通过使用 <strong>Listen Server</strong>（默认设置），这表示拥有权限的机器也可以运行客户端，并可在为其他玩家托管时正常玩游戏</li>\n<li>通过使用 <strong>Dedicated Server</strong>，顾名思义，专用服务器仅专用于托管游戏，而没有本地玩家在此机器上玩游戏，因为连接的每位玩家均是客户端玩家</li>\n</ol>\n<ul>\n<li>通常情况下，相比作为监听服务器运行，作为专用服务器运行性能因为没有图像或输入而更优化</li>\n<li>默认情况下，在编辑器或独立游戏中玩游戏时，服务器类型设置为监听服务器</li>\n</ul>\n<p>使用：<strong>运行专用服务器</strong></p>\n<ul>\n<li><p>单击 <strong>Play</strong> 按钮旁的下箭头，然后选中 <strong>Run Dedicated Server</strong> 复选框</p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/TestMultiplayer/DedicatedServer.jpg\" alt=\"DedicatedServer.png\"></p>\n</li>\n</ul>\n<h3 id=\"8-蓝图中的多人功能\"><a href=\"#8-蓝图中的多人功能\" class=\"headerlink\" title=\"8. 蓝图中的多人功能\"></a>8. 蓝图中的多人功能</h3><h4 id=\"8-1-Gameplay框架评估\"><a href=\"#8-1-Gameplay框架评估\" class=\"headerlink\" title=\"8.1 Gameplay框架评估\"></a>8.1 Gameplay框架评估</h4><p>说明：要向游戏添加多人功能，必须理解引擎提供的主要Gameplay类的角色，以及它们彼此的协作关系，尤其是它们在多人情境下如何工作：</p>\n<ul>\n<li>GameInstance</li>\n<li>GameMode</li>\n<li>GameState</li>\n<li>Pawn（以及从Pawn继承而来的Character）</li>\n<li>PlayerController</li>\n<li>PlayerState</li>\n</ul>\n<p>使用：参阅<a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Framework\">Gameplay框架</a>文档以了解更多信息，但在设计多人游戏模式时，至少需要记住以下提示：</p>\n<ul>\n<li><code>GameInstance</code><ul>\n<li>在引擎会话的持续时间内一直存在，意味着在引擎启动时创建，并在引擎关闭后才会销毁或更换</li>\n<li>服务器和每个客户端上都存在一个独立的GameInstance，这些实例彼此不通信</li>\n<li>由于GameInstance存在于游戏会话之外，并且是在关卡加载期间唯一存在的游戏结构体，因此非常适合于保存特定类型的持久数据，如终生玩家统计信息（如获胜总次数）、帐户信息（如特殊物品的锁定&#x2F;解锁状态），甚至在像《虚幻竞技场》等竞技游戏中，用来保存用来切换的地图列表</li>\n</ul>\n</li>\n<li><code>GameMode</code><ul>\n<li>对象仅存在于服务器上</li>\n<li>它通常存储客户端不需要明确知道的游戏信息</li>\n<li>例如，如果游戏有”仅火箭发射装置”等特殊规则，客户端或许不需要知道这条规则，但在地图上随机产生武器时，服务器需要知道仅从”火箭发射装置”类别中选取</li>\n</ul>\n</li>\n<li><code>GameState</code><ul>\n<li>存在于服务器和客户端上，因此服务器可以在GameState上使用复制变量让所有客户端保持最新的游戏数据</li>\n<li>与所有玩家和旁观者有关、而不是与任何一个特定玩家有关的信息最适合于GameState复制</li>\n<li>例如，棒球游戏可以通过GameState复制每个团队的分数和当前局次</li>\n</ul>\n</li>\n<li><code>PlayerController</code><ul>\n<li>每一台客户端上的每一个玩家存在一个<code>PlayerController</code></li>\n<li>它们在服务器和关联的客户机之间进行复制，但不会复制到其他客户端，因此在服务器上每个玩家都有PlayerController，但本地客户端只有本地玩家的PlayerController</li>\n<li>客户端保持连接时存在PlayerController，PlayerController与Pawn关联，但不会像Pawn一样被销毁和重新产生</li>\n<li>它们非常适用于在客户端和服务器之间传达信息，而不必将该信息复制到其他客户端</li>\n<li>例如，服务器告知客户端对其迷你地图进行ping，以响应只有该玩家能检测到的游戏事件</li>\n</ul>\n</li>\n<li><code>PlayerState</code><ul>\n<li>服务器和客户端上存在与游戏相连的每个玩家的<code>PlayerState</code></li>\n<li>这个类可以用于所有客户端感兴趣的复制属性，而不仅仅是所属客户端，如单个玩家在自由竞赛游戏中的当前分数</li>\n<li>与PlayerController类似，它们与单个Pawn关联，但不会像Pawn那样被销毁和重新产生</li>\n</ul>\n</li>\n<li><code>Pawn（包括Character）</code><ul>\n<li>也存在于服务器和所有客户端上，可以包含复制变量和事件</li>\n<li>决定对特定变量或事件使用PlayerController、PlayerState还是Pawn取决于具体情况，但务必要记住的是，只要所属玩家保持与游戏相连，且游戏没有加载新关卡，则PlayerController和PlayerState就保持不变，而<code>Pawn</code>则不然</li>\n<li>例如，如果Pawn在游戏期间死亡，它通常会被销毁并替换为一个新Pawn，而PlayerController和PlayerState将持续存在，并在新Pawn产生后与新Pawn关联</li>\n<li>因此，Pawn的生命值将存储在Pawn自身上，因为该信息特定于该Pawn的实际实例，应在该Pawn替换为新Pawn时重置</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"8-2-Actor复制\"><a href=\"#8-2-Actor复制\" class=\"headerlink\" title=\"8.2 Actor复制\"></a>8.2 Actor复制</h4><p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Blueprints/replicates.jpg\" alt=\"replicates.png\"></p>\n<ul>\n<li>UE4中的联网技术的核心是Actor复制</li>\n<li>“复制”标志设置为true的Actor将自动从服务器同步到与该服务器相连的客户端</li>\n<li>必须理解的一点是，Actor仅从服务器复制到客户端，而不能从客户端复制到服务器</li>\n<li>当然，客户端仍需要能够向服务器发送数据，它们通过复制的”在服务上运行”事件来实现</li>\n</ul>\n<p>请参阅概<a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/Actors/ReplicatingActors\">在蓝图中同步 Actor</a>指南以了解具体示例的逐步演示，以及<a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/Actors\">Actor 的复制</a>文档</p>\n<h5 id=\"8-2-1-权限\"><a href=\"#8-2-1-权限\" class=\"headerlink\" title=\"8.2.1 权限\"></a>8.2.1 权限</h5><ul>\n<li>对于场景中的每个Actor，会将其中一个连接的玩家视为拥有对该Actor的权限</li>\n<li>对于服务器上存在的每个Actor，服务器拥有对该Actor的权限，包括所有复制的Actor</li>\n<li>因此，<strong>拥有权限</strong> 函数在客户端上运行，而目标是复制到客户端的Actor时，将返回false</li>\n<li>你还可以使用 <strong>切换拥有权限</strong> 便捷宏，作为针对复制Actor中不同服务器和客户端行为进行分支的快捷方法</li>\n</ul>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Blueprints/switch_has_authority.jpg\" alt=\"switch_has_authority.png\"></p>\n<h5 id=\"8-2-2-变量\"><a href=\"#8-2-2-变量\" class=\"headerlink\" title=\"8.2.2 变量\"></a>8.2.2 变量</h5><ul>\n<li>在Actor上的变量的细节面板中，有一个 <strong>复制（Replication）</strong> 下拉列表，让你可以控制如何复制变量</li>\n</ul>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Blueprints/variable_replication.jpg\" alt=\"variable_replication.png\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>无（None）</strong></td>\n<td align=\"left\">这是新变量的默认值，表示不通过网络向客户端发送值</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>复制（Replicated）</strong></td>\n<td align=\"left\">服务器复制该Actor时，它会将该变量发送到客户端。接收客户端上的变量值将自动更新，因此下一次访问该客户端时，它会反映服务器上的值<br />当然，在真实网络上游戏时，更新会有所延迟，具体取决于网络的延迟时间<br />请记住，复制的变量仅沿一个方向传递，从服务器到客户端！要从客户端向服务器发送数据，请参见”事件”部分</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>复制通知（RepNotify）</strong></td>\n<td align=\"left\">变量将按照”复制”（Replicated）选项进行复制，此外，还将在蓝图中创建<code>OnRep_</code>函数<br />当该变量的值发生变化时，引擎会自动在客户端和服务器上调用该函数<br />你可以根据游戏需要随意实现该函数<br /> <img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Blueprints/onrep.jpg\" alt=\"onrep.png\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>引擎内置类中的许多变量已经启用了复制，因此许多功能在多人情境下会自动工作</li>\n</ul>\n<p>请参阅概<a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/Actors/ReplicatingVariables\">在蓝图中同步变量</a>指南以了解具体变量复制示例的逐步演示，以及<a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/Actors/Properties\">属性复制</a>文档</p>\n<h5 id=\"8-2-3-产生和销毁\"><a href=\"#8-2-3-产生和销毁\" class=\"headerlink\" title=\"8.2.3 产生和销毁\"></a>8.2.3 产生和销毁</h5><p>介绍：</p>\n<ul>\n<li>在服务器上产生复制的Actor时，这个信息会传达给客户端，他们也会自动产生该Actor的副本</li>\n<li>但总体而言，由于不会从客户端复制到服务器，因此如果在客户端上产生了复制的Actor，则该Actor只会存在于产生这个Actor的客户端上</li>\n</ul>\n<p>影响：</p>\n<ul>\n<li>服务器和任何其他客户端都不会收到该Actor的副本</li>\n<li>但产生客户端拥有对该Actor的权限</li>\n<li>这对于某些Actor还是十分有用的，比如对Gameplay没有实际影响的装饰Actor，但对于会影响Gameplay并应当复制的Actor，最好确保在服务器上产生这类Actor</li>\n</ul>\n<p>销毁复制的Actor也属于类似情况：</p>\n<ul>\n<li>如果服务器销毁一个复制的Actor，则所有客户端也会销毁相应的副本</li>\n<li>客户端可以随意销毁他们拥有权限的Actor，即，客户端自己产生的Actor，因为这些Actor不会复制到其他玩家，也不会影响其他玩家</li>\n<li>如果客户端尝试销毁没有权限的Actor，这个销毁请求会被忽略</li>\n<li>关键在于，产生Actor亦是如此：如果你需要销毁复制的Actor，则需要在服务器上销毁</li>\n</ul>\n<h4 id=\"8-3-事件复制\"><a href=\"#8-3-事件复制\" class=\"headerlink\" title=\"8.3 事件复制\"></a>8.3 事件复制</h4><p>介绍：</p>\n<ul>\n<li>在蓝图中，除了复制Actor及其变量，还可以跨客户端和服务器运行事件</li>\n</ul>\n<p>请参阅<a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/Actors/ReplicatingFunctions\">在蓝图中使用远程调用函数</a>指南以了解具体示例的逐步演示，以及<a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/Actors/RPCs\">RPC</a>文档</p>\n<p>注：</p>\n<ul>\n<li>可能还会看到RPC（远程过程调用）一词</li>\n<li>如果看到，只需注意蓝图中的复制事件基本上编译到引擎中的RPC，这是C++中的常用说法</li>\n</ul>\n<h5 id=\"8-3-1-所有权\"><a href=\"#8-3-1-所有权\" class=\"headerlink\" title=\"8.3.1 所有权\"></a>8.3.1 所有权</h5><p>介绍：</p>\n<ul>\n<li><p>在使用多人时需要理解的一个重要概念是（尤其是在使用复制事件时），哪个连接<a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/Actors/OwningConnections\">被视为特定Actor或组件的所有者</a></p>\n</li>\n<li><p>就我们的目的而言，需要知道”在服务器上运行”事件只会从客户端拥有的Actor（或其组件）调用</p>\n</li>\n<li><p>通常，这表示只能从以下Actor或其中某个Actor的组件发送”在服务器上运行”事件：</p>\n<ul>\n<li><p>客户端本身的PlayerController</p>\n</li>\n<li><p>客户端PlayerController支配的Pawn</p>\n</li>\n<li><p>客户端的PlayerState</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>同样，对于发送”在所属客户端上运行”事件的服务器，这些事件也应当在上述某个Actor上调用</li>\n<li>否则，服务器不知道要将事件发送到哪个客户端，这样就只会在服务器上运行</li>\n</ul>\n<h5 id=\"8-3-2-事件\"><a href=\"#8-3-2-事件\" class=\"headerlink\" title=\"8.3.2 事件\"></a>8.3.2 事件</h5><ul>\n<li>在自定义事件的细节面板中，你可以设置如何复制事件</li>\n</ul>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Blueprints/event_replication.jpg\" alt=\"event_replication.png\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>不复制（Not Replicated）</strong></td>\n<td align=\"left\">这是默认值，表示该事件不进行复制<br />如果在客户端上调用，它仅在该客户端上运行，如果在服务器上调用，则仅在服务器上运行</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>组播（Multicast）</strong></td>\n<td align=\"left\">如果在服务器上调用组播事件，则该事件将复制到所有连接的客户端，无论拥有目标对象的是哪个连接<br />如果客户端调用组播事件，该事件会被视为未复制，并仅在调用该事件的客户端上运行</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>在服务器上运行（Run on Server）</strong></td>\n<td align=\"left\">如果从服务器调用该事件，则仅在该服务器上运行<br />如果从客户端调用，并且目标归该客户端所有，则事件将复制到服务器并在服务器上运行<br />“在服务器上运行”事件是客户端向服务器发送数据的主要方法</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>在所属客户端上运行（Run on Owning Client）</strong></td>\n<td align=\"left\">如果从服务器调用，则该事件将在拥有目标Actor的客户端上运行<br />由于服务器可以拥有Actor本身，因此”在所属客户端上运行”事件实际上可以在服务器上运行，而无论名称为何<br />如果从客户端调用，该事件会被视为未复制，并仅在调用该事件的客户端上运行</td>\n</tr>\n</tbody></table>\n<p>以下各表描述了不同复制模式根据调用方式对事件运行位置的影响</p>\n<ul>\n<li>如果事件从服务器调用，假设左列是目标，则运行位置将是…</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">未复制</th>\n<th align=\"left\">组播</th>\n<th align=\"left\">在服务器上运行</th>\n<th align=\"left\">在所属客户端上运行</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>客户端拥有目标</strong></td>\n<td align=\"left\">服务器</td>\n<td align=\"left\">服务器和所有客户端</td>\n<td align=\"left\">服务器</td>\n<td align=\"left\">目标的所属客户端</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>服务器拥有目标</strong></td>\n<td align=\"left\">服务器</td>\n<td align=\"left\">服务器和所有客户端</td>\n<td align=\"left\">服务器</td>\n<td align=\"left\">服务器</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>无主目标</strong></td>\n<td align=\"left\">服务器</td>\n<td align=\"left\">服务器和所有客户端</td>\n<td align=\"left\">服务器</td>\n<td align=\"left\">服务器</td>\n</tr>\n</tbody></table>\n<ul>\n<li>如果事件从客户端调用，假设左列是目标，则运行位置将是…</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">未复制</th>\n<th align=\"left\">组播</th>\n<th align=\"left\">在服务器上运行</th>\n<th align=\"left\">在所属客户端上运行</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>目标归调用客户端所有</strong></td>\n<td align=\"left\">调用客户端</td>\n<td align=\"left\">调用客户端</td>\n<td align=\"left\">服务器</td>\n<td align=\"left\">调用客户端</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>目标归其他客户端所有</strong></td>\n<td align=\"left\">调用客户端</td>\n<td align=\"left\">调用客户端</td>\n<td align=\"left\">丢弃</td>\n<td align=\"left\">调用客户端</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>服务器拥有目标</strong></td>\n<td align=\"left\">调用客户端</td>\n<td align=\"left\">调用客户端</td>\n<td align=\"left\">丢弃</td>\n<td align=\"left\">调用客户端</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>无主目标</strong></td>\n<td align=\"left\">调用客户端</td>\n<td align=\"left\">调用客户端</td>\n<td align=\"left\">丢弃</td>\n<td align=\"left\">调用客户端</td>\n</tr>\n</tbody></table>\n<ul>\n<li>从上表可见，任何从一个客户端调用并且没有设为”在服务器上运行”的事件都被视为没有复制</li>\n</ul>\n<p>注：</p>\n<ul>\n<li><p>从客户端向服务器发送复制的事件是唯一一种从客户端向服务器传达信息的方法，因为一般的Actor复制设计为仅从服务器到客户端</p>\n</li>\n<li><p>此外，还需注意组播事件只能从服务器发送</p>\n</li>\n<li><p>虚幻采用客户端-服务器模型，因此客户端不会直接连接任何其他客户端，它们只是连接到服务器</p>\n</li>\n<li><p>因此，客户端无法直接向其他客户端发送组播事件，只能与服务器通信</p>\n</li>\n<li><p>但你可以使用两个复制事件来模拟这种行为：一个”在服务器上运行”事件和一个”组播”事件</p>\n</li>\n<li><p>“在服务器上运行”事件实现可以在需要时执行验证，然后调用组播事件</p>\n</li>\n<li><p>“组播”事件实现将执行你想要对所有连接玩家运行的逻辑</p>\n</li>\n<li><p>下图代表了不执行任何验证的示例：</p>\n</li>\n</ul>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/Blueprints/forward_multicast.jpg\" alt=\"forward_multicast.png\"></p>\n<h6 id=\"8-3-2-1-“进行中加入”注意事项\"><a href=\"#8-3-2-1-“进行中加入”注意事项\" class=\"headerlink\" title=\"8.3.2.1 “进行中加入”注意事项\"></a>8.3.2.1 “进行中加入”注意事项</h6><p>说明：</p>\n<ul>\n<li>在使用复制事件以传达游戏状态更改时需要记住的一点是它们如何与支持”进行中加入”的游戏交互</li>\n<li>如果玩家在游戏进行期间加入游戏，则加入前发生的任何复制事件都不会对新玩家执行</li>\n<li>重点是，如果你希望游戏正确地支持”进行中加入”，通常最好通过复制的变量同步重要的Gameplay数据</li>\n<li>经常用的一种模式是客户端在场景中执行一些操作，通过”在服务器上运行”事件将操作通知给服务器，然后在该事件的实现中，服务器根据该操作更新一些复制的变量</li>\n<li>然后没有执行该操作的其他客户端仍会通过复制的变量看到操作结果</li>\n<li>此外，任何在操作发生后在进行期间加入的客户端仍会看到场景的正确状态，因为它们从服务器获得了最新的复制变量值</li>\n<li>如果服务器仅发送事件，则进行中加入的玩家不会知道之前执行的操作</li>\n</ul>\n<h6 id=\"8-3-2-2-可靠性\"><a href=\"#8-3-2-2-可靠性\" class=\"headerlink\" title=\"8.3.2.2 可靠性\"></a>8.3.2.2 可靠性</h6><p>介绍：</p>\n<ul>\n<li>对于任何复制的事件，你可以选择是 <strong>可靠</strong> 还是 <strong>不可靠</strong></li>\n</ul>\n<p>可靠事件：</p>\n<ul>\n<li>可靠事件保证可到达目标（假设遵守上述所有权规则），但为了兑现这个承诺，它们会使用更多带宽，还可能会存在延迟</li>\n<li>尽可能频繁地尝试避免发送可靠事件，例如每个tick事件，因为引擎的内部可靠事件缓冲区可能会溢出，如果溢出，则关联的玩家会断开连接</li>\n</ul>\n<p>不可靠事件：</p>\n<ul>\n<li>不可靠事件顾名思义，它们不能到达目标，比如网络上丢包，或者引擎确定有许多更高优先级的流量需要发送</li>\n<li>因此，不可靠事件使用的带宽低于可靠事件，你可以更频繁地安全调用此类事件</li>\n</ul>\n<h3 id=\"9-Replication-Graph\"><a href=\"#9-Replication-Graph\" class=\"headerlink\" title=\"9. Replication Graph\"></a>9. Replication Graph</h3><p>介绍：</p>\n<ul>\n<li>概述Replication Graph功能</li>\n<li>Replication Graph节点</li>\n</ul>\n<p>说明：</p>\n<ul>\n<li><strong>Replication Graph</strong> 插件是一个用于多人游戏的网络复制系统，它的设计可以很好地适应大量玩家和复制Actor</li>\n<li>例如，Epic自己的<a href=\"https://www.epicgames.com/fortnite\">Fortnite Battle Royale</a>从一开始就支持每场比赛100名玩家，包含大约50,000个复制的Actor</li>\n<li>标准的网络复制策略（要求每个复制的Actor决定是否应该向每个连接的客户端发送更新）在这种情况下表现很差，并且会限制服务器的CPU</li>\n<li>像将Actor划分为交错的组，或者只是降低更新频率，这样的解决方案可能会缓解这个问题，但降低更新频率也会降低客户端体验</li>\n<li>Replication Graph消除了Actor单独评估每个连接的客户端的需要，同时在不牺牲客户端体验的情况下，解决了CPU性能问题</li>\n</ul>\n<h4 id=\"9-1-结构\"><a href=\"#9-1-结构\" class=\"headerlink\" title=\"9.1 结构\"></a>9.1 结构</h4><p>介绍：</p>\n<ul>\n<li>Replication Graph包含一系列 <strong>Replication Graph节点</strong>，它们负责按需创建要复制到每个客户端的Actor列表</li>\n<li>由于此系统是由持久对象构建的，而不是仅仅由复制的Actor自己处理函数调用，因此数据可以跨多个帧存储并在客户端连接之间共享</li>\n<li>这种持久、共享的数据减少了Replication Graph系统为每个客户端生成复制列表所需的时间</li>\n</ul>\n<p>说明：</p>\n<ul>\n<li>Replication Graph节点（我们简称为”节点”）执行以下实际工作：确定哪些Actor可能需要更新、将它们分组、存储要发送到客户端的预计算列表等</li>\n<li>它们的最终任务是，尽可能快地为每个客户端连接按需提供Actor”复制列表”，以便服务器在每个Actor、每个客户端上花费尽可能少的CPU周期</li>\n<li>每个节点都可以以一种独特的方式运行，鼓励开发者根据需要为自己的游戏编写自定义节点</li>\n<li>节点可能与游戏无关，也可能利用特定于游戏的信息</li>\n<li>根据Actor在游戏中的角色将它们放到不同的节点中，可以让你更好地控制它们复制的方式和时间</li>\n<li>构建新节点，并根据Actor在游戏中的行为方式使用Replication Graph将Actor分配到最佳节点，这将极大地减少服务器CPU为准备网络复制列表所花费的时间</li>\n</ul>\n<h4 id=\"9-2-启用此系统\"><a href=\"#9-2-启用此系统\" class=\"headerlink\" title=\"9.2 启用此系统\"></a>9.2 启用此系统</h4><p>你可以通过以下两种方式之一，配置你的项目使用自定义 <strong>Replication Driver</strong>（Replication Graph的父类）：</p>\n<ul>\n<li>在”DefaultEngine.ini”文件中指定Replication Driver类</li>\n<li>将返回Replication Driver类实例的函数绑定到Replication Driver的默认创建委托</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>ShooterGame项目是如何设置和实现Replication Graph的一个很好的示例</li>\n<li>但是，请注意Replication Graph在控制台版本中是禁用的，因为它目前不适用于分屏游戏</li>\n</ul>\n<h5 id=\"9-2-1-配置-ini-文件\"><a href=\"#9-2-1-配置-ini-文件\" class=\"headerlink\" title=\"9.2.1 配置(.ini)文件\"></a>9.2.1 配置(.ini)文件</h5><p>使用：</p>\n<ul>\n<li><p>要配置引擎的默认Replication Driver</p>\n<ol>\n<li><p>打开项目的”DefaultEngine.ini”文件</p>\n</li>\n<li><p>找到（或添加）<code>[/Script/OnlineSubsystemUtils.IpNetDriver]</code>部分，并设置（或添加）”ReplicationDriverClassName”条目，以便它指示希望使用的Replication Driver（或Replication Graph）类的名称</p>\n</li>\n<li><p>这应该大致如下所示，用实际项目的名称替换”ProjectName”，用自定义类名称替换”ClassName”：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">[&#x2F;Script&#x2F;OnlineSubsystemUtils.IpNetDriver]\nReplicationDriverClassName&#x3D;&quot;&#x2F;Script&#x2F;ProjectName.ClassName&quot;</code></pre></li>\n</ol>\n</li>\n</ul>\n<h5 id=\"9-2-2-在代码中绑定\"><a href=\"#9-2-2-在代码中绑定\" class=\"headerlink\" title=\"9.2.2 在代码中绑定\"></a>9.2.2 在代码中绑定</h5><p>使用：</p>\n<ul>\n<li><p>如果你的项目有多个游戏模式或地图，而这些模式或地图的网络要求有很大的不同，那么绑定到委托将使你能够在代码中为当前游戏模式或地图创建适当的Replication Driver</p>\n</li>\n<li><p>要使用此方法，将一个函数绑定到名为<code>CreateReplicationDriverDelegate</code>的<code>UReplicationDriver</code>函数</p>\n</li>\n<li><p>绑定函数必须返回所需Replication Driver类的一个有效实例，就像下面的lambda函数示例所做的：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">UReplicationDriver::CreateReplicationDriverDelegate().BindLambda([](UNetDriver* ForNetDriver, const FURL&amp; URL, UWorld* World) -&gt; UReplicationDriver*\n&#123;\n\treturn NewObject&lt;UMyReplicationDriverClass&gt;(GetTransientPackage());\n&#125;);</code></pre></li>\n</ul>\n<h4 id=\"9-3-高级示例\"><a href=\"#9-3-高级示例\" class=\"headerlink\" title=\"9.3 高级示例\"></a>9.3 高级示例</h4><p>说明：</p>\n<ul>\n<li><p>对于具有大量连接客户端甚至更多同步Actor的游戏而言，根据不同节点的类型和状态分配Actor的Replication Graph可以节省大量CPU时间</p>\n</li>\n<li><p>这使得构建传统复制方法无法实现的游戏成为可能</p>\n</li>\n<li><p>在概念层面上，这种规模的游戏可以构建具有以下功能的Replication Graph和Replication Graph节点，以处理数量庞大的复制Actor和连接客户端：</p>\n<ul>\n<li><p><strong>根据位置将Actor分组</strong></p>\n<ul>\n<li>场景可以划分为游戏的网格空间（在大逃杀、MOBA或MMORPG流派游戏中），预定义房间或区域（对于地牢爬行游戏或走廊风格的第一人称或第三人称射击游戏），或任何适合你游戏空间的方法</li>\n<li>将Actor添加到每个网格单元或房间中，以便可以从其中潜在地看到或听到Actor，这将加快客户端的更新速度，因为节点可以简单地为客户端摄像机所在的任何网格单元或房间内，向客户端提供持久性Actor列表</li>\n</ul>\n</li>\n<li><p><strong>确定”休眠”放置的Actor，并将它们放在单独的列表中</strong></p>\n<ul>\n<li>虽然一些Actor，比如那些表示玩家或由AI控制角色的Actor，可能需要频繁的更新，但也有许多Actor可能是预先放置在关卡中的，在玩家与它们交互之前，它们是不会自己移动或改变状态的</li>\n<li>这些Actor可能会维持很长时间（可能是整个游戏会话），而无需发送网络更新</li>\n<li>例如，在Fortnite Battle Royale中，玩家和发射物可能会不断地更新，直到从游戏中移除为止</li>\n<li>另一方面，树可能会休眠很长时间，无需对任何客户端进行更新</li>\n<li>当树被损坏时，任何能够看到树的客户端都会需要接收关于此树的更新</li>\n<li>最后，当树被销毁时，任何接收描述树被销毁更新的客户端都不需要接收关于此树的任何进一步更新</li>\n</ul>\n</li>\n<li><p><strong>如果你游戏中的角色</strong> <strong>能够拾取并携带物品，随物品的携带者一起更新这些物品</strong></p>\n<ul>\n<li>当一个玩家取出一个物品或者武器并携带它，或者穿一件衣服或盔甲时，将表示该物品的Actor（假设这是一个单独的Actor，而不仅仅是一个组件）添加到一个特殊组，该组始终在拥有玩家更新时进行更新，否则绝不进行更新</li>\n</ul>\n</li>\n<li><p><strong>制定所有客户端始终已知的特殊Actor的列表</strong></p>\n<ul>\n<li>特殊Actor始终通过与每个玩家相关，并且可以放在一个简单的节点中来跟踪这些Actor，这样就可以将它们排除在其他列表之外，它们可能会占用CPU周期来进行不必要的计算</li>\n</ul>\n</li>\n<li><p><strong>制定始终（或从不）与特定客户端相关的特殊Actor的列表</strong></p>\n<ul>\n<li>可以为单个玩家或玩家团队创建一个类似的始终相关的列表节点</li>\n<li>这对于类似以下情况特别有用：确保玩家的队友始终更新，或者通过特殊的游戏内检测能力”暴露”对手，使对手对玩家的整个团队都是可见。如果”暴露”到期，可以将这些Actor添加回它们的默认节点</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>构建一个Replication Graph，并根据对Actor在游戏中角色的了解，明智地将Actor分配到不同的节点，这可以充分利用服务器的CPU时间</li>\n<li>最终的结果是为游戏提供稳定的服务器性能，否则游戏将无法在当前硬件上运行</li>\n<li>Replication Graph插件包含几个Replication Graph节点类，你可以在大型在线游戏中使用它们</li>\n<li>此外，鼓励开发者基于对特定游戏内部工作原理的了解来构建自定义节点类</li>\n</ul>\n<h3 id=\"10-多人游戏中的关卡切换\"><a href=\"#10-多人游戏中的关卡切换\" class=\"headerlink\" title=\"10. 多人游戏中的关卡切换\"></a>10. 多人游戏中的关卡切换</h3><h4 id=\"10-1-无缝与非无缝切换\"><a href=\"#10-1-无缝与非无缝切换\" class=\"headerlink\" title=\"10.1 无缝与非无缝切换\"></a>10.1 无缝与非无缝切换</h4><p>介绍：</p>\n<ul>\n<li>UE4 中主要有两种转移方式：<ul>\n<li>无缝和非无缝方式</li>\n<li>两者的主要区别在于，无缝转移是一种非阻塞（non-blocking）操作，而非无缝转移则是一种阻塞（blocking）操作</li>\n</ul>\n</li>\n<li>当客户端执行非无缝转移时，客户端将与服务器断开连接，然后重新连接到同一服务器，而服务器将准备新的地图以供加载</li>\n</ul>\n<p>建议：</p>\n<ul>\n<li>UE4 多人模式游戏尽量采用无缝转移</li>\n<li>这样做通常可以提供更流畅的体验，同时避免重新连接过程中可能出现的问题</li>\n</ul>\n<p>有三种情形中必然产生非无缝转移：</p>\n<ul>\n<li>初次加载地图时</li>\n<li>初次作为客户端连接服务器时</li>\n<li>想要终止一个多人模式游戏并启动新游戏时</li>\n</ul>\n<p>有三个用来驱动转移的主要函数：<code>UEngine::Browse</code>、<code>UWorld::ServerTravel</code> 和 <code>APlayerController::ClientTravel</code></p>\n<p>在确定使用哪个函数时，您可能会感到有些困惑，所以请遵循下面的准则：</p>\n<p>详细：</p>\n<p><code>UEngine::Browse</code></p>\n<ul>\n<li>就像是加载新地图时的硬重置</li>\n<li>将始终导致非无缝切换</li>\n<li>将导致服务器在切换到目标地图前与当前客户端断开连接</li>\n<li>客户端将与当前服务器断开连接</li>\n<li>专用服务器无法切换至其他服务器，因此地图必须存储在本地（不能是 URL）</li>\n</ul>\n<p><code>UWorld::ServerTravel</code></p>\n<ul>\n<li>仅适用于服务器</li>\n<li>会将服务器跳转到新的世界&#x2F;场景</li>\n<li>所有连接的客户端都会跟随</li>\n<li>这就是多人游戏在地图之间转移时所用的方法，而服务器将负责调用此函数</li>\n<li>服务器将为所有已连接的客户端玩家调用 <code>APlayerController::ClientTravel</code></li>\n</ul>\n<p><code>APlayerController::ClientTravel</code></p>\n<ul>\n<li>如果从客户端调用，则转移到新的服务器</li>\n<li>如果从服务器调用，则要求特定客户端转移到新地图（但仍然连接到当前服务器）</li>\n</ul>\n<h4 id=\"10-2-启用无缝切换\"><a href=\"#10-2-启用无缝切换\" class=\"headerlink\" title=\"10.2 启用无缝切换\"></a>10.2 启用无缝切换</h4><p>前提：启用无缝切换，您需要设置一个过渡地图</p>\n<ul>\n<li>需要通过 <code>UGameMapsSettings::TransitionMap</code> 属性进行配置</li>\n<li>该属性默认为空，如果您的游戏保持这一默认状态，就会为过渡地图创建一个空地图</li>\n</ul>\n<p>原理：</p>\n<ul>\n<li>因为必须始终有一个被加载的世界（用于存放地图），所以在加载新地图之前，我们不能释放原有的地图</li>\n<li>由于地图可能会非常大，因此让新旧地图同时存放在存储器内绝对是个坏主意，这时就需要过渡地图来帮忙了</li>\n</ul>\n<p>好处：由于过渡地图非常小，因此在”中转”当前地图和最终地图时不会造成太大的资源消耗</p>\n<p>注意：设置好过渡地图后，您需要将 <code>AGameModeBase::bUseSeamlessTravel</code> 设置为 true，这样就可以实现无缝切换了</p>\n<h4 id=\"10-3-无缝切换流程\"><a href=\"#10-3-无缝切换流程\" class=\"headerlink\" title=\"10.3 无缝切换流程\"></a>10.3 无缝切换流程</h4><p>下面是执行无缝切换时的一般流程：</p>\n<ol>\n<li>标记出要在过渡关卡中存留的 actor（更多信息请见下面）</li>\n<li>转移到过渡关卡</li>\n<li>标记出要在最终关卡中存留的 actor（更多信息请见下面）</li>\n<li>转移到最终关卡</li>\n</ol>\n<h4 id=\"10-4-无缝切换中的存留-Actor\"><a href=\"#10-4-无缝切换中的存留-Actor\" class=\"headerlink\" title=\"10.4 无缝切换中的存留 Actor\"></a>10.4 无缝切换中的存留 Actor</h4><p>介绍：</p>\n<ul>\n<li><p>在使用无缝切换时，可以将（存留） actor 从当前关卡带到新的关卡</p>\n</li>\n<li><p>这适用于一些特定的 actor，如道具栏物品和玩家等</p>\n</li>\n</ul>\n<p>默认情况下，这些 actor 将自动存留：</p>\n<ul>\n<li><code>GameMode</code> actor（仅限服务器）<ul>\n<li>通过 <code>AGameModeBase::GetSeamlessTravelActorList</code> 额外添加的任何 actor</li>\n</ul>\n</li>\n<li>拥有一个有效的 <code>PlayerState</code> （仅限服务器）的所有控制器</li>\n<li>所有 <code>PlayerControllers</code> （仅限服务器）</li>\n<li>所有本地 <code>PlayerControllers</code> （服务器和客户端）<ul>\n<li>通过 <code>APlayerController::GetSeamlessTravelActorList</code> （在本地<code>PlayerControllers</code>上调用）额外添加的任何 actor</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"11-网络性能分析工具\"><a href=\"#11-网络性能分析工具\" class=\"headerlink\" title=\"11. 网络性能分析工具\"></a>11. 网络性能分析工具</h3><p>介绍：</p>\n<ul>\n<li>Network Profiler 是一款独立工具，可用于显示网络流量和性能信息，上述信息可在游戏运行时由引擎捕捉</li>\n<li>它是一种极其有效的方式，可识别多人游戏中占用极高带宽的区域，因为您可以查看各个 actor、PRC 和属性在总带宽中的占比</li>\n</ul>\n<h4 id=\"11-1-录制分析会话\"><a href=\"#11-1-录制分析会话\" class=\"headerlink\" title=\"11.1 录制分析会话\"></a>11.1 录制分析会话</h4><p>前提：</p>\n<ul>\n<li><p>在使用 network profiler 之前，您必须录制相同的数据才能进行分析</p>\n</li>\n<li><p>为此，您需要使用启用了进程状态跟踪功能的引擎，通常这说明是个调试 build、用于非调试配置或编辑器 build（更具体地来说，对引擎进行编译时，STATS 宏已定义为非零值）</p>\n</li>\n<li><p>还可以在引擎启动的时候增加 “networkprofiler&#x3D;true” 命令行参数，以便于引擎已启动就能够开始记录，也可以用以下这些命令行指令在运行时控制是否要记录网络数据：</p>\n<ul>\n<li><p>netprofile：切换录制的开启和关闭</p>\n</li>\n<li><p>netprofile enable：如果尚未录制，则开始录制</p>\n</li>\n<li><p>netprofile disable：如果当前在录制，则停止录制</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>数据将被保存至 <code>&lt;project directory&gt;/Saved/Profiling/&lt;project name&gt;-&lt;timestamp&gt;.nprof</code></li>\n<li>如果您在相同文件夹中看到一个名为 NetworkProfiling.tmp 的文件，这只是引擎在收集数据时使用的临时文件</li>\n<li>当前分析会话停止时，该文件将根据以上方案进行重命名，然后即可在独立工具中打开它</li>\n</ul>\n<h4 id=\"11-2-查看分析会话\"><a href=\"#11-2-查看分析会话\" class=\"headerlink\" title=\"11.2 查看分析会话\"></a>11.2 查看分析会话</h4><p><strong><code>Chart, Filters, Details选项卡</code></strong></p>\n<ul>\n<li>默认条件下，选定的是 “Chart, Filters, Details（图表、筛选器和详细信息）” 选项卡</li>\n<li>下文将对此选项卡的不同区域进行介绍</li>\n</ul>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/NetworkProfiler/image_1.jpg\" alt=\"image alt text\"></p>\n<ol>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/NetworkProfiler/#%E5%9B%BE%E8%A1%A8%E8%A7%86%E5%9B%BE\">图表视图</a></li>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/NetworkProfiler/#%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%88%97%E8%A1%A8\">统计数据列表</a></li>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/NetworkProfiler/#%E6%B1%87%E6%80%BB%E8%A7%86%E5%9B%BE\">汇总视图</a></li>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/NetworkProfiler/#%E5%B8%A7%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF\">帧详细信息</a></li>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/NetworkProfiler/#%E7%AD%9B%E9%80%89%E5%99%A8\">筛选器</a></li>\n<li><a href=\"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/NetworkProfiler/#%E6%80%A7%E8%83%BD%E8%A7%86%E5%9B%BE\">性能视图</a></li>\n</ol>\n<p><strong><code>图表视图</code></strong></p>\n<ul>\n<li>这是主图表视图。它类似于其他分析应用程序中的图表，可显示随时间推移已启用统计数据的图表</li>\n<li>单击特定帧可使用该帧相关数据填充其他视图，也可在图表上点击并拖动以放大相应区域，并查看该时间范围内的汇总情况。</li>\n</ul>\n<p><strong><code>统计数据列表</code></strong></p>\n<ul>\n<li>该列表中包含了 network profiler 所跟踪的所有统计数据</li>\n<li>切换复选框将显示或隐藏图表中的特定统计数据。对于大多数统计数据，您可选择原始计数、每秒计数、字节数或每秒字节数</li>\n</ul>\n<p><strong><code>汇总视图</code></strong></p>\n<ul>\n<li>该视图中显示图表中所选时间范围内的数据汇总</li>\n<li>其中显示了原始总数以及每秒信息</li>\n<li>注意，”Outgoing bandwidth（输出带宽）” 将大于 “Game socket send size（游戏套接字发送大小）”，因为 “Outgoing bandwidth（输出带宽）” 也包括了 IP 和 UDP 标头大小的近似值</li>\n</ul>\n<p><strong><code>帧详细信息</code></strong></p>\n<ul>\n<li>该视图对当前选定帧所发送的数据进行了分类统计</li>\n<li>可以查看发送了哪些 actor、属性和远程函数，以及各项分别占到多少字节</li>\n<li>注意，数据组中包括了 actor 和 PRC，因此 “SEND BUNCH” 部分中的 “NumBytes” 字段中包含了 “SEND RPC” 和 “REPLICATE ACTOR” 部分的字节</li>\n<li>最后，”SOCKET SEND TO” 条目将精确显示引擎发送到输出套接字的字节数</li>\n<li>注意，此处不包含标准 UDP 数据包资源消耗</li>\n</ul>\n<p><strong><code>筛选器</code></strong></p>\n<ul>\n<li>可为 actor、属性和 RPC 输入筛选器，在单击 “Apply Filters（应用筛选器）” 按钮后，图表将更新为只显示包含筛选器字段中输入文本的相关 actor、属性和 RPC</li>\n<li>在应用了筛选器之后，选择图表中的单个帧或一系列帧也将相应地筛选汇总和帧详细信息视图中的数据</li>\n</ul>\n<p><strong><code>性能视图</code></strong></p>\n<ul>\n<li>选择了图表中的单个帧时，该视图将显示该帧内复制的 actor 类型列表，并按照 CPU 复制它们所需的时间排序</li>\n<li>如果某个 actor 具有相关的复制属性，则展开该 actor 的树形视图将显示各属性</li>\n<li>在 actor 选项卡中，第一栏数值表示 CPU 复制该 actor 所花费的时间（以毫秒计）</li>\n<li>第二栏是用于表示数据包中 actor 的字节数，第三栏是当前帧中复制的指定类型的 actor 数</li>\n<li>在属性行中，第一列是用于属性的字节数，第二列表示为 actor 复制了多少具有指定名称的属性</li>\n</ul>\n<p><strong><code>&quot;Actors&quot; 选项卡、&quot;Properties（属性）&quot; 选项卡和 &quot;RPCs&quot; 选项卡</code></strong></p>\n<p><img src=\"https://docs.unrealengine.com/4.27/Images/InteractiveExperiences/Networking/NetworkProfiler/image_2.jpg\" alt=\"image alt text\"></p>\n<ul>\n<li>每个选项卡都显示了整个分析会话中各复制数据的汇总情况</li>\n<li>注意，这些选项卡中显示的数据不受 “Chart, Filters, Details” 选项卡的图表中选定的当前帧或时间范围的影响</li>\n<li>选项卡上分别显示了 actor、属性或 PRC 的列表</li>\n<li>“Total Size（总体大小）” 和 “Average Size（平均大小）” 列显示了特定项需要多少带宽，”Count（计数）” 列表示在分析会话期间复制了多少次特定项。单击各列的表头，可在升序或降序之间切换</li>\n</ul>\n<h4 id=\"11-3-服务器和客户端\"><a href=\"#11-3-服务器和客户端\" class=\"headerlink\" title=\"11.3 服务器和客户端\"></a>11.3 服务器和客户端</h4><ul>\n<li>从客户端和服务器都可录制分析数据</li>\n<li>但是，请注意，由于只有服务器复制 actor 及其属性，因此在查看客户端上录制的分析数据时，只能看到从该客户端发送的 RPC 的详细数据</li>\n</ul>\n<h3 id=\"12-性能与带宽提示\"><a href=\"#12-性能与带宽提示\" class=\"headerlink\" title=\"12. 性能与带宽提示\"></a>12. 性能与带宽提示</h3><p>介绍：</p>\n<ul>\n<li><p>复制 actor 是一件耗费时间的工作</p>\n</li>\n<li><p>引擎会尽量让这个过程变得更有效率，但您也可以做一些额外的工作来简化这个过程</p>\n</li>\n</ul>\n<p>使用：在收集 actor 用于复制时，服务器将检查一些事项，如相关性、更新频度、休眠情况等。您可以调整这些检查项以改善性能</p>\n<p>要最大限度提升这一过程的效率，最好是遵循以下优先顺序：</p>\n<ul>\n<li>关闭复制（<code>AActor::SetReplicates( false )</code>）<ul>\n<li>当 actor 未进行复制时，它最初不会出现在列表中，我们可以充分利用这一点，确保那些无需复制的 actor 会有相应标记</li>\n</ul>\n</li>\n<li>减少 NetUpdateFrequency 值<ul>\n<li>actor 的更新次数越少，更新所用的时间就越短</li>\n<li>最好是尽量压低这个数值。该数值代表了这个 actor 每秒复制到客户端的频度</li>\n</ul>\n</li>\n<li>休眠情况</li>\n<li>相关性</li>\n<li>NetClientTicksPerSecond</li>\n</ul>\n<p>注：</p>\n<ul>\n<li><p>如果属性并非是绝对必需，则不要将其标记为复制</p>\n</li>\n<li><p>如果可以，最好能尝试从现有的已复制属性中派生状态</p>\n</li>\n<li><p>尝试利用已有的量化函数，如 <code>FVector_NetQuantize</code></p>\n</li>\n<li><p>这样能大大减少向客户端复制此状态时所需的大小，如果使用得当，就不会导致任何明显的偏差</p>\n</li>\n<li><p><code>FName</code> 一般不会被压缩，所以在使用它们作为 RPC 的参数时，请记住它们通常会向字符串发送所有调用</p>\n</li>\n<li><p>这会产生很大的资源消耗</p>\n</li>\n</ul>\n","text":"UE4 联网和多人游戏复制Replication：在客户端服务器间同步数据和调用程序的过程 1. 网络概述1.1 尽早规划多人游戏 若项目可能需要多人游戏功能，则从项目开始阶段起，构建所有gameplay时都应将多人游戏功能考虑在内，便于进行调试和维护，且支持单人 若是单人游戏改...","link":"","photos":[],"count_time":{"symbolsCount":"56k","symbolsTime":"51 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/tags/UnrealEngine.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UE4-%E8%81%94%E7%BD%91%E5%92%8C%E5%A4%9A%E4%BA%BA%E6%B8%B8%E6%88%8F\"><span class=\"toc-text\">UE4 联网和多人游戏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. 网络概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%B0%BD%E6%97%A9%E8%A7%84%E5%88%92%E5%A4%9A%E4%BA%BA%E6%B8%B8%E6%88%8F\"><span class=\"toc-text\">1.1 尽早规划多人游戏</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">1.2 客户端-服务器模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-1-%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B8%B8%E6%88%8F%E8%8C%83%E4%BE%8B\"><span class=\"toc-text\">1.2.1 客户端-服务器游戏范例</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E5%9F%BA%E6%9C%AC%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.3 基本网络概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-1-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.3.1 网络模式和服务器类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-2-Actor%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">1.3.2 Actor复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-3-2-1-%E5%B8%B8%E8%A7%81%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">1.3.2.1 常见复制功能</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-3-2-2-%E7%BD%91%E7%BB%9C%E8%A7%92%E8%89%B2%E5%92%8C%E6%8E%88%E6%9D%83\"><span class=\"toc-text\">1.3.2.2 网络角色和授权</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-3-2-3-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8B%A5%E6%9C%89%E6%9D%83\"><span class=\"toc-text\">1.3.2.3 客户端拥有权</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-3-2-4-%E7%9B%B8%E5%85%B3%E6%80%A7%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">1.3.2.4 相关性和优先级</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-3-%E5%8F%98%E9%87%8F%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">1.3.3 变量复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-3-3-1-RepNotify\"><span class=\"toc-text\">1.3.3.1 RepNotify</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-4-%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8-RPC\"><span class=\"toc-text\">1.3.4 远程过程调用(RPC)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-3-4-1-%E5%8F%AF%E9%9D%A0%E6%80%A7\"><span class=\"toc-text\">1.3.4.1 可靠性</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-3-4-2-%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">1.3.4.2 验证</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%8F%90%E7%A4%BA%E5%92%8C%E6%B7%B1%E5%85%A5%E9%98%85%E8%AF%BB\"><span class=\"toc-text\">2. 提示和深入阅读</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%9F%BA%E6%9C%AC%E5%A4%8D%E5%88%B6Actor%E6%B8%85%E5%8D%95\"><span class=\"toc-text\">2.1 基本复制Actor清单</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E7%BD%91%E7%BB%9C%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">2.2 网络提示</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Actor-%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">3. Actor 复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E7%BB%84%E4%BB%B6%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">3.1 组件复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-1-%E7%BB%84%E4%BB%B6%E5%A4%8D%E5%88%B6%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">3.1.1 组件复制介绍</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-2-%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.1.2 使用方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-3-%E6%97%B6%E9%97%B4%E8%BD%B4\"><span class=\"toc-text\">3.1.3 时间轴</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-4-%E5%B8%A6%E5%AE%BD%E5%BC%80%E9%94%80\"><span class=\"toc-text\">3.1.4 带宽开销</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-5-%E4%B8%80%E8%88%AC%E6%80%A7%E5%AD%90%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">3.1.5 一般性子对象复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-1-5-1-%E4%BD%BF%E7%94%A8%E6%83%85%E5%BD%A2\"><span class=\"toc-text\">3.1.5.1 使用情形</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-1-5-2-%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">3.1.5.2 优化</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-Actor%E5%8F%8A%E5%85%B6%E6%89%80%E5%B1%9E%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">3.2 Actor及其所属连接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-1-%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">3.2.1 连接</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-2-%E7%A1%AE%E5%AE%9A%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">3.2.2 确定连接</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-3-%E8%BF%9E%E6%8E%A5%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">3.2.3 连接的作用</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-Actor%E7%9B%B8%E5%85%B3%E6%80%A7%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">3.3 Actor相关性与优先级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-1-%E7%9B%B8%E5%85%B3%E6%80%A7\"><span class=\"toc-text\">3.3.1 相关性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-2-%E4%BC%98%E5%85%88%E7%BA%A7%E8%AE%BE%E5%AE%9A\"><span class=\"toc-text\">3.3.2 优先级设定</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-Actor%E5%A4%8D%E5%88%B6%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%BF%B0\"><span class=\"toc-text\">3.4 Actor复制流程详述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-4-1-%E5%A4%8D%E5%88%B6%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">3.4.1 复制流程</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-4-2-Actor%E5%A4%8D%E5%88%B6%E5%88%B0%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">3.4.2 Actor复制到连接</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-Role%E5%92%8CRemoteRole\"><span class=\"toc-text\">3.5 Role和RemoteRole</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-5-1-Role-x2F-RemoteRole%E5%AF%B9%E8%B0%83\"><span class=\"toc-text\">3.5.1 Role&#x2F;RemoteRole对调</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-5-2-%E5%A4%8D%E5%88%B6%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">3.5.2 复制模式</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-RPC\"><span class=\"toc-text\">3.6 RPC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-1-%E4%BD%BF%E7%94%A8RPC\"><span class=\"toc-text\">3.6.1 使用RPC</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-2-%E5%BF%AB%E9%80%9F%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">3.6.2 快速提示</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-3-%E8%A6%81%E6%B1%82%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">3.6.3 要求和注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-6-3-1-%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B0%83%E7%94%A8%E7%9A%84RPC\"><span class=\"toc-text\">3.6.3.1 从服务器调用的RPC</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-6-3-2-%E4%BB%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E7%94%A8%E7%9A%84RPC\"><span class=\"toc-text\">3.6.3.2 从客户端调用的RPC</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-4-%E5%8F%AF%E9%9D%A0%E6%80%A7\"><span class=\"toc-text\">3.6.4 可靠性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-5-%E8%93%9D%E5%9B%BE\"><span class=\"toc-text\">3.6.5 蓝图</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-6-%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">3.6.6 验证</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-%E5%B1%9E%E6%80%A7%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">3.7 属性复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-1-%E8%AE%BE%E7%BD%AE%E8%A6%81%E5%A4%8D%E5%88%B6%E7%9A%84%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">3.7.1 设置要复制的属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-2-%E7%BD%91%E7%BB%9C%E6%9B%B4%E6%96%B0%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">3.7.2 网络更新优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-7-2-1-%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E5%9E%8B%E7%BD%91%E7%BB%9C%E6%9B%B4%E6%96%B0%E9%A2%91%E7%8E%87\"><span class=\"toc-text\">3.7.2.1 数据驱动型网络更新频率</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-7-2-2-%E8%87%AA%E9%80%82%E5%BA%94%E5%9E%8B%E7%BD%91%E7%BB%9C%E6%9B%B4%E6%96%B0%E9%A2%91%E7%8E%87\"><span class=\"toc-text\">3.7.2.2 自适应型网络更新频率</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-7-2-3-%E6%9B%B4%E6%96%B0%E9%A2%91%E7%8E%87%E9%99%8D%E4%BD%8E%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.7.2.3 更新频率降低算法</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-7-2-4-%E6%9B%B4%E6%96%B0%E9%A2%91%E7%8E%87%E5%A2%9E%E5%8A%A0%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.7.2.4 更新频率增加算法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-8-%E6%9D%A1%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">3.8 条件属性复制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-9-%E5%A4%8D%E5%88%B6%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">3.9 复制对象引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-1-%E6%8B%A5%E6%9C%89%E5%8F%AF%E9%9D%A0%E5%91%BD%E5%90%8D%E7%9A%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.9.1 拥有可靠命名的对象</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-10-%E8%93%9D%E5%9B%BE%E4%BD%BF%E7%94%A8RPC\"><span class=\"toc-text\">3.10 蓝图使用RPC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-10-1-Multicast%E5%B9%BF%E6%92%AD\"><span class=\"toc-text\">3.10.1 Multicast广播</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-10-2-RunOnServer\"><span class=\"toc-text\">3.10.2 RunOnServer</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-10-3-RunOnOwningClient\"><span class=\"toc-text\">3.10.3 RunOnOwningClient</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">4. 客户端-服务器模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">4.1 启动服务器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B8%B8%E6%88%8F%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">4.2 服务器游戏流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">4.3 连接过程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E8%A7%92%E8%89%B2%E7%A7%BB%E5%8A%A8%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">5. 角色移动组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-%E8%A7%92%E8%89%B2%E7%A7%BB%E5%8A%A8%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">5.1 角色移动基础</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-PerformMovement\"><span class=\"toc-text\">5.2 PerformMovement</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-%E7%A7%BB%E5%8A%A8%E7%89%A9%E7%90%86%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">5.3 移动物理效果</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-4-%E7%A7%BB%E5%8A%A8%E5%A4%8D%E5%88%B6%E6%91%98%E8%A6%81\"><span class=\"toc-text\">5.4 移动复制摘要</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-5-%E5%A4%8D%E5%88%B6%E8%A7%92%E8%89%B2%E7%A7%BB%E5%8A%A8%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">5.5 复制角色移动详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-5-1-%E6%89%80%E5%B1%9E%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\">5.5.1 所属客户端上的本地移动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-1-1-%E7%BC%96%E8%AF%91%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A2%84%E6%B5%8B%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">5.5.1.1 编译客户端预测数据</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-1-2-%E5%A4%8D%E5%88%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9F%AB%E6%AD%A3\"><span class=\"toc-text\">5.5.1.2 复制服务器矫正</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-1-3-%E6%89%A7%E8%A1%8C%E5%92%8C%E8%AE%B0%E5%BD%95%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\">5.5.1.3 执行和记录移动</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-1-4-%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8F%90%E4%BA%A4%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\">5.5.1.4 向服务器提交移动</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-5-2-%E8%AE%A1%E7%AE%97%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\">5.5.2 计算服务器上的移动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-2-1-%E7%BC%96%E8%AF%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A2%84%E6%B5%8B%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">5.5.2.1 编译服务器预测数据</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-2-2-%E9%AA%8C%E8%AF%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%B6%E9%97%B4%E6%88%B3\"><span class=\"toc-text\">5.5.2.2 验证客户端时间戳</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-2-3-%E8%AE%A1%E7%AE%97%E5%B7%AE%E9%87%8F%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">5.5.2.3 计算差量时间</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-2-4-%E8%AE%A1%E7%AE%97%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\">5.5.2.4 计算移动</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-5-3-%E5%A4%84%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF%E5%92%8C%E7%9F%AB%E6%AD%A3\"><span class=\"toc-text\">5.5.3 处理客户端错误和矫正</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-3-1-%E7%A1%AE%E5%AE%9A%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E8%B0%83%E6%95%B4\"><span class=\"toc-text\">5.5.3.1 确定是否需要调整</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-3-2-%E5%8F%91%E9%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E6%95%B4%E6%88%96%E7%A1%AE%E8%AE%A4%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\">5.5.3.2 发送客户端调整或确认移动</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-3-3-%E8%87%AA%E4%B8%BB%E4%BB%A3%E7%90%86%E6%8E%A5%E6%94%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E6%95%B4\"><span class=\"toc-text\">5.5.3.3 自主代理接收客户端调整</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-5-4-%E5%B0%86%E7%A7%BB%E5%8A%A8%E5%A4%8D%E5%88%B6%E5%88%B0%E6%A8%A1%E6%8B%9F%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">5.5.4 将移动复制到模拟代理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-4-1-%E5%AD%98%E5%82%A8%E5%A4%8D%E5%88%B6%E7%9A%84%E7%A7%BB%E5%8A%A8%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">5.5.4.1 存储复制的移动信息</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-4-2-%E5%9C%A8%E6%A8%A1%E6%8B%9F%E4%BB%A3%E7%90%86%E4%B8%8Atick%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\">5.5.4.2 在模拟代理上tick移动</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-4-3-%E6%89%A7%E8%A1%8C%E6%A8%A1%E6%8B%9F%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\">5.5.4.3 执行模拟移动</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-5-4-4-%E7%BD%91%E7%BB%9C%E5%B9%B3%E6%BB%91\"><span class=\"toc-text\">5.5.4.4 网络平滑</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-6-%E7%89%B9%E6%AE%8A%E7%A7%BB%E5%8A%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">5.6 特殊移动情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-6-1-%E5%A4%9A%E4%BA%BA%E6%B8%B8%E6%88%8F%E4%B8%AD%E4%BC%A0%E9%80%81%E8%A7%92%E8%89%B2\"><span class=\"toc-text\">5.6.1 多人游戏中传送角色</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-6-2-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%A7%BB%E5%8A%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">5.6.2 自定义移动模式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-6-3-%E9%80%9A%E6%A0%B9%E8%BF%90%E5%8A%A8%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">5.6.3 通根运动复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-6-3-1-%E6%9D%A5%E8%87%AA%E5%8A%A8%E7%94%BB%E8%92%99%E5%A4%AA%E5%A5%87\"><span class=\"toc-text\">5.6.3.1 来自动画蒙太奇</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-6-3-2-%E6%9D%A5%E8%87%AA%E6%A0%B9%E8%BF%90%E5%8A%A8%E6%BA%90\"><span class=\"toc-text\">5.6.3.2 来自根运动源</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-OnlineBeacon\"><span class=\"toc-text\">6. OnlineBeacon</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-OnlineBeacon-%E5%9F%BA%E7%B1%BB\"><span class=\"toc-text\">6.1 OnlineBeacon 基类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-1-1-AOnlineBeacon\"><span class=\"toc-text\">6.1.1 AOnlineBeacon</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-1-2-AOnlineBeaconHost\"><span class=\"toc-text\">6.1.2 AOnlineBeaconHost</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-1-3-AOnlineBeaconClient\"><span class=\"toc-text\">6.1.3 AOnlineBeaconClient</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-1-4-AOnlineBeaconHostObject\"><span class=\"toc-text\">6.1.4 AOnlineBeaconHostObject</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-OnlineBeacon-%E8%8C%83%E4%BE%8B\"><span class=\"toc-text\">6.2 OnlineBeacon 范例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%B5%8B%E8%AF%95%E5%A4%9A%E4%BA%BA%E6%B8%B8%E6%88%8F\"><span class=\"toc-text\">7. 测试多人游戏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-%E8%AE%BE%E7%BD%AE%E7%8E%A9%E5%AE%B6%E6%95%B0%E9%87%8F\"><span class=\"toc-text\">7.1 设置玩家数量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-%E8%B0%83%E6%95%B4%E6%B8%B8%E6%88%8F%E7%AA%97%E5%8F%A3\"><span class=\"toc-text\">7.2 调整游戏窗口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-%E9%AB%98%E7%BA%A7%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">7.3 高级设置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-%E5%A4%9A%E4%BA%BA%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">7.4 多人选项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-5-%E7%9B%91%E5%90%AC%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E4%B8%93%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">7.5 监听服务器与专用服务器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E8%93%9D%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%BA%BA%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">8. 蓝图中的多人功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-Gameplay%E6%A1%86%E6%9E%B6%E8%AF%84%E4%BC%B0\"><span class=\"toc-text\">8.1 Gameplay框架评估</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-Actor%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">8.2 Actor复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-2-1-%E6%9D%83%E9%99%90\"><span class=\"toc-text\">8.2.1 权限</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-2-2-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">8.2.2 变量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-2-3-%E4%BA%A7%E7%94%9F%E5%92%8C%E9%94%80%E6%AF%81\"><span class=\"toc-text\">8.2.3 产生和销毁</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-%E4%BA%8B%E4%BB%B6%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">8.3 事件复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-3-1-%E6%89%80%E6%9C%89%E6%9D%83\"><span class=\"toc-text\">8.3.1 所有权</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-3-2-%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">8.3.2 事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#8-3-2-1-%E2%80%9C%E8%BF%9B%E8%A1%8C%E4%B8%AD%E5%8A%A0%E5%85%A5%E2%80%9D%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">8.3.2.1 “进行中加入”注意事项</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#8-3-2-2-%E5%8F%AF%E9%9D%A0%E6%80%A7\"><span class=\"toc-text\">8.3.2.2 可靠性</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-Replication-Graph\"><span class=\"toc-text\">9. Replication Graph</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-1-%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">9.1 结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-2-%E5%90%AF%E7%94%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">9.2 启用此系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#9-2-1-%E9%85%8D%E7%BD%AE-ini-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">9.2.1 配置(.ini)文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#9-2-2-%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">9.2.2 在代码中绑定</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-3-%E9%AB%98%E7%BA%A7%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">9.3 高级示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E5%A4%9A%E4%BA%BA%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E5%85%B3%E5%8D%A1%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">10. 多人游戏中的关卡切换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-1-%E6%97%A0%E7%BC%9D%E4%B8%8E%E9%9D%9E%E6%97%A0%E7%BC%9D%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">10.1 无缝与非无缝切换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-2-%E5%90%AF%E7%94%A8%E6%97%A0%E7%BC%9D%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">10.2 启用无缝切换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-3-%E6%97%A0%E7%BC%9D%E5%88%87%E6%8D%A2%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">10.3 无缝切换流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-4-%E6%97%A0%E7%BC%9D%E5%88%87%E6%8D%A2%E4%B8%AD%E7%9A%84%E5%AD%98%E7%95%99-Actor\"><span class=\"toc-text\">10.4 无缝切换中的存留 Actor</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">11. 网络性能分析工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-1-%E5%BD%95%E5%88%B6%E5%88%86%E6%9E%90%E4%BC%9A%E8%AF%9D\"><span class=\"toc-text\">11.1 录制分析会话</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-2-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%9E%90%E4%BC%9A%E8%AF%9D\"><span class=\"toc-text\">11.2 查看分析会话</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">11.3 服务器和客户端</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E6%80%A7%E8%83%BD%E4%B8%8E%E5%B8%A6%E5%AE%BD%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">12. 性能与带宽提示</span></a></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"UE4 委托","uid":"97e60817d770107d3926456a0105594d","slug":"7_UE4委托_06","date":"2022-10-06T07:28:25.965Z","updated":"2022-10-07T13:00:24.827Z","comments":true,"path":"api/articles/7_UE4委托_06.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (22).webp","text":"UE4 委托1. 委托定义介绍：在C++对象上引用和执行成员函数的数据类型 定义： 是一种泛型但类型安全的方式，可在C++对象上调用成员函数 可使用委托动态绑定到任意对象的成员函数，之后在该对象上调用函数，即使调用程序不知对象类型也可进行操作 复制委托对象很安全。你也可以利用值传...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"UE4 功能整理","uid":"8d0c33a1aee99d366309310c2d2adece","slug":"7_UE4功能整理_09","date":"2022-10-06T07:28:25.960Z","updated":"2022-10-07T13:00:39.669Z","comments":true,"path":"api/articles/7_UE4功能整理_09.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (25).webp","text":"UE4 功能整理1. SpawnActor情景： 我有一个Cpp类 这个Cpp类要生成一个其他Cpp或蓝图类 可以使用TSubclassOf&lt;&gt; 示例： 定义 private: UPROPERTY(EditDefaultsOnly, BlueprintReadWrit...","link":"","photos":[],"count_time":{"symbolsCount":"71k","symbolsTime":"1:04"},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":9,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}