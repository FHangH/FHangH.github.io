{"title":"C++_核心编程","uid":"e94a77a3753f22f554c8c36e4173e356","slug":"1_03_C++_核心编程","date":"2022-10-06T07:28:25.912Z","updated":"2023-01-10T01:10:19.450Z","comments":true,"path":"api/articles/1_03_C++_核心编程.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (3).webp","content":"<h1 id=\"C-核心编程\"><a href=\"#C-核心编程\" class=\"headerlink\" title=\"C++_核心编程\"></a>C++_核心编程</h1><p>[toc]</p>\n<h3 id=\"1-内存分区模型\"><a href=\"#1-内存分区模型\" class=\"headerlink\" title=\"1. 内存分区模型\"></a>1. 内存分区模型</h3><p>C++程序在执行时，内存大方向划分为4个区域</p>\n<ul>\n<li>代码区：存放函数的二进制代码，由操作系统进行管理的</li>\n<li>全局区：存放全局变量和静态变量以及常量</li>\n<li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</li>\n<li>堆区：由程序员分配和释放，若不释放，程序执行结束后会系统回收</li>\n</ul>\n<p>内存分区的意义：</p>\n<ul>\n<li>不同区域存放的数据，赋予不同的生命周期</li>\n</ul>\n<h4 id=\"1-1-程序运行前\"><a href=\"#1-1-程序运行前\" class=\"headerlink\" title=\"1.1 程序运行前\"></a>1.1 程序运行前</h4><p>程序编译后，生成可执行的 .exe 文件 未执行前，分成两个区域</p>\n<p>代码区：</p>\n<ul>\n<li>存放CPU执行的机器指令</li>\n<li>代码区是共享的，目的是对于频繁的执行程序，只需在内存中存放一份即可</li>\n<li>代码区是只读的，目的是防止程序意外的修改了它的指令</li>\n</ul>\n<p>全局区：</p>\n<ul>\n<li>全局变量和静态变量存放其中</li>\n<li>全局区还包括了常量区，字符串常量和其他常量也存放其中</li>\n<li>该区域的数据在程序结束后由操作系统释放</li>\n</ul>\n<p>分类：</p>\n<ul>\n<li>全局区：全局变量，静态变量，常量</li>\n<li>常量区：const修饰的全局变量，字符串常量</li>\n<li>局部区：局部变量，const修饰的局部变量和常量</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Global variable outside Function</span></span><br><span class=\"line\"><span class=\"type\">int</span> g_a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> g_b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Global constant variable outside Function</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> g_c_a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> g_c_b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Local variable inside Function</span></span><br><span class=\"line\">    <span class=\"type\">int</span> l_a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> l_b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Static variable</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> s_a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> s_b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Constant Local variable inside Function</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> l_c_a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> l_c_b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Debug local variable</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Local Area_Local variable l_a: &quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;l_a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Local Area_Local variable l_b: &quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;l_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Debug constant local variable</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Local Area_Constant local variable l_c_a:&quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;l_c_a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Local Area_Constant local variable l_c_b:&quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;l_c_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Debug global variable</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Global Area_Global variable g_a: &quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;g_a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Global Area_Global variable g_b: &quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;g_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Debug static variable</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Global Area_Static variable s_a: &quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;s_a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Global Area_Static variable s_b: &quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;s_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Debug string constant</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Global Area_String constant str_c_a:&quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;<span class=\"string\">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Debug global constant variable</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Global Area_global constant variable g_c_a:&quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;g_c_a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Global Area_global constant variable g_c_b:&quot;</span> &lt;&lt; (<span class=\"type\">int</span>) &amp;g_c_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"1-2-程序运行后\"><a href=\"#1-2-程序运行后\" class=\"headerlink\" title=\"1.2 程序运行后\"></a>1.2 程序运行后</h4><ul>\n<li><p>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</p>\n</li>\n<li><p>注意：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个返回值int类型的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> *<span class=\"title\">demoFunc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个局部变量，存在栈区中</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回一个局部变量的地址</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//接受局部变量传来的地址</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *p_a = <span class=\"built_in\">demoFunc</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; *p_a &lt;&lt; endl; <span class=\"comment\">//第一次能正常的解析地址对应的值，函数执行结束，系统回收了数据</span></span><br><span class=\"line\">    cout &lt;&lt; *p_a &lt;&lt; endl; <span class=\"comment\">//第二次，无法正常解析到对应的值，因为函数执行一次结束后，没有返回值了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>堆区：由程序员释放，若不释放，程序结束时由操作系统回收</p>\n</li>\n<li><p>方式：C++通过 new 在堆区中开辟内存</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> *<span class=\"title\">demoFunc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过指针地址存放 new 关键字对int类型的值在堆中开辟的内存所在的地址</span></span><br><span class=\"line\">    <span class=\"comment\">//这个 int的值存放在堆中，改函数执行结束后，依然存在</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *p_a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p_a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p_a = <span class=\"built_in\">demoFunc</span>();</span><br><span class=\"line\">    cout &lt;&lt; *p_a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; *p_a &lt;&lt; endl; <span class=\"comment\">//函数执行结束后，指针指向的指针内存空间依然存在，所以可以正常得到内存中的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>1.3 new操作符</p>\n<ul>\n<li>C++ 通过 new 在堆区开辟数据</li>\n<li>堆区的数据，由程序员手动开辟，手动释放，利用 delet 操作符</li>\n<li>语法：<code>new 数据类型（）；</code></li>\n<li>利用new创建的数据，会返回该数据对应的类型的指针地址</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个返回int类型的地址函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> *<span class=\"title\">newKeyDemo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//new操作符开辟的数据会返回一个指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *p_a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">//返回指针</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p_a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printDemo1Info</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个指针接受返回值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *Info1 = <span class=\"built_in\">newKeyDemo</span>();</span><br><span class=\"line\">    cout &lt;&lt; *Info1 &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//delete 操作符会释放 new在堆中的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> Info1;</span><br><span class=\"line\">    cout &lt;&lt; *Info1 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//利用new操作符创建数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printDemo2Info</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p_arr = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p_arr[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; p_arr[j] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] p_arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printDemo1Info</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printDemo2Info</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2. 引用\"></a>2. 引用</h3><h4 id=\"2-1-引用的基本使用\"><a href=\"#2-1-引用的基本使用\" class=\"headerlink\" title=\"2.1 引用的基本使用\"></a>2.1 引用的基本使用</h4><ul>\n<li><p>作用：给变量起别名</p>\n</li>\n<li><p>语法：<code>数据类型 &amp;别名 = 原名；</code></p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-2-引用注意事项\"><a href=\"#2-2-引用注意事项\" class=\"headerlink\" title=\"2.2 引用注意事项\"></a>2.2 引用注意事项</h4><ul>\n<li><p>引用必须初始化</p>\n</li>\n<li><p>引用在初始化后不可以改变</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">//int &amp;b; 引用必须初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;b = a;</span><br><span class=\"line\">    <span class=\"comment\">//int &amp;b = c; 引用初始化后不可更改</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-3-引用做函数参数\"><a href=\"#2-3-引用做函数参数\" class=\"headerlink\" title=\"2.3 引用做函数参数\"></a>2.3 引用做函数参数</h4><ul>\n<li><p>作用：函数传参时，可以利用引用的技术让形参修饰实参</p>\n</li>\n<li><p>优点：可以简化指针修改实参</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap01</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap02</span><span class=\"params\">(<span class=\"type\">int</span> *p_a, <span class=\"type\">int</span> *p_b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = *p_a;</span><br><span class=\"line\">    *p_a = *p_b;</span><br><span class=\"line\">    *p_b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap03</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a, <span class=\"type\">int</span> &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    swap01(a, b); 值传递，形参不修饰实参</span></span><br><span class=\"line\"><span class=\"comment\">//    swap02(&amp;a, &amp;b); 地址传递，形参修饰实参</span></span><br><span class=\"line\">    <span class=\"built_in\">swap03</span>(a, b); <span class=\"comment\">// 引用传递，形参修饰实参</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-4-引用做函数的返回值\"><a href=\"#2-4-引用做函数的返回值\" class=\"headerlink\" title=\"2.4 引用做函数的返回值\"></a>2.4 引用做函数的返回值</h4><ul>\n<li><p>作用：引用可以作为函数的返回值</p>\n</li>\n<li><p>注意：不要返回局部变量引用</p>\n</li>\n<li><p>用法：函数调用作为左值</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//函数体内定义的局部变量，函数执行完后，系统自动回收</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> b = <span class=\"number\">20</span>; <span class=\"comment\">//static 修饰的静态变量，存储在全局区，整个程序执行完后，系统自动回收</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;ref_a = <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;ref_b = <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;ref_a = &quot;</span> &lt;&lt; ref_a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;ref_a = &quot;</span> &lt;&lt; ref_a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;ref_b = &quot;</span> &lt;&lt; ref_b &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;ref_b = &quot;</span> &lt;&lt; ref_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>() = <span class=\"number\">1000</span>; <span class=\"comment\">//函数的调用是引用，可以作为左值</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;ref_b = &quot;</span> &lt;&lt; ref_b &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;ref_b = &quot;</span> &lt;&lt; ref_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-5-引用的本质\"><a href=\"#2-5-引用的本质\" class=\"headerlink\" title=\"2.5 引用的本质\"></a>2.5 引用的本质</h4><ul>\n<li><p>本质：在C++内部实现一个指针常量</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">// 转换为 int *const ref_b = &amp;a</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">(<span class=\"type\">int</span> &amp;ref_b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ref_b = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 自动转换为 int *const ref_a = &amp;a; &lt;&lt; = &gt;&gt; 指针常量；因为指针的指向（地址）不可改变，所以引用的初始化后不可更改</span></span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;ref_a = a;</span><br><span class=\"line\">    <span class=\"comment\">// ref是引用，自动转换成 *ref = 20；</span></span><br><span class=\"line\">    ref_a = <span class=\"number\">20</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;ref_a = &quot;</span> &lt;&lt; ref_a &lt;&lt; endl;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>(ref_a);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论：引用本质是指针，使用方便</p>\n</li>\n</ul>\n<h4 id=\"2-6-常量引用\"><a href=\"#2-6-常量引用\" class=\"headerlink\" title=\"2.6 常量引用\"></a>2.6 常量引用</h4><ul>\n<li><p>作用：常量引用一般用来修饰形参，防止误操作</p>\n</li>\n<li><p>使用：在函数形参列表中，可以加 const 修饰形参，防止形参被实参修改</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printInfo</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;ref_b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//常量引用的值不可以修改</span></span><br><span class=\"line\">    <span class=\"comment\">//ref_b = 1000;</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;ref_b = &quot;</span> &lt;&lt; ref_b &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 编辑器 转换为 int temp = 10;   const int &amp;a = temp;</span></span><br><span class=\"line\">    <span class=\"comment\">//const int &amp;ref_a = 10;</span></span><br><span class=\"line\">    <span class=\"comment\">// ref_a 用 const 修饰后值不能被修改</span></span><br><span class=\"line\">    <span class=\"comment\">//ref_a = 20;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printInfo</span>(a);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-7-引用补充\"><a href=\"#2-7-引用补充\" class=\"headerlink\" title=\"2.7 引用补充\"></a>2.7 引用补充</h4><ul>\n<li><p>一个引用占用一个指针的大小</p>\n</li>\n<li><p>证明引用本质是指针</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 指针转汇编</span><br><span class=\"line\">// int *p = &amp;age;</span><br><span class=\"line\">lea eax, [age]</span><br><span class=\"line\">mov dword ptr [p], eax</span><br><span class=\"line\"></span><br><span class=\"line\">// *p = 30;</span><br><span class=\"line\">mov eax, dword ptr [p]</span><br><span class=\"line\">mov dword ptr [eax], 1Eh</span><br><span class=\"line\"></span><br><span class=\"line\">// 引用转汇编</span><br><span class=\"line\">// int &amp;ref = age;</span><br><span class=\"line\">lea eax, [age]</span><br><span class=\"line\">mov dword ptr [p], eax</span><br><span class=\"line\"></span><br><span class=\"line\">// ref = 30;</span><br><span class=\"line\">mov eax, dword ptr [p]</span><br><span class=\"line\">mov dword ptr [eax], 1Eh</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>数组引用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> array[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组名 array 是数组的首元素地址，=&gt; (i)</span></span><br><span class=\"line\"><span class=\"comment\">// 两种写法</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> (&amp;ref1)[<span class=\"number\">3</span>] = array;</span><br><span class=\"line\"><span class=\"type\">int</span> *<span class=\"type\">const</span> &amp;ref2 = array;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n<li><p>不存在的引用</p>\n<ul>\n<li>引用的引用</li>\n<li>指向引用的指针</li>\n<li>引用数组</li>\n</ul>\n</li>\n<li><p>常引用</p>\n<ul>\n<li><code>const</code> 必须写在 <code>&amp;</code> 左边，才算是<code>常引用</code></li>\n</ul>\n</li>\n<li><p>常引用的特点</p>\n<ul>\n<li><p>可以指向临时数据：<code>常量</code>、<code>表达</code>、<code>函数返回值</code>等</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认情况下，&amp;ref 只能将变量赋值给它</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> &amp;ref = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常量</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> &amp;ref = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表达式</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> &amp;ref = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">10</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> &amp;ref = <span class=\"built_in\">func</span>();</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>可以指向不同类型的数据</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> &amp;ref = a;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>作为函数参数时(规则适用于 <code>const指针</code>)</p>\n<ul>\n<li><p>可以接受 <code>const</code> 和 <code>非const</code> 实参(<code>非const</code> 引用，只能接受 <code>非const</code> 实参)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// const实参</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 非const实参</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(a, b);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>可以跟 <code>非const</code> 引用<code>构成重载</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sum_1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sum_2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a, <span class=\"type\">int</span> &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// const实参</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 调用 sum_1</span></span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 非const实参</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 调用 sum_2</span></span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(a, b);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>当<code>常量引用</code>指向<code>不同类型</code>的数据时，会<code>产生临时变量</code>，即引用指向的并不是初始化时的那个变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> &amp;rAge = age;</span><br><span class=\"line\">age = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;rAge: &quot;</span> &lt;&lt; rAge &lt;&lt; endl;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;age: &quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果&gt;&gt;</span></span><br><span class=\"line\">rAge: <span class=\"number\">10</span></span><br><span class=\"line\">age: <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用反汇编分析：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看反汇编</span><br><span class=\"line\">mov dword ptr[age], 0Ah</span><br><span class=\"line\"></span><br><span class=\"line\">// 常量引用指向不同类型数据，会产生如下两句；指向同类型不会</span><br><span class=\"line\">mov eax, dword ptr[age]</span><br><span class=\"line\">mov dword ptr[temp], eax</span><br><span class=\"line\"></span><br><span class=\"line\">lea ecx, [temp]</span><br><span class=\"line\">mov dword ptr[rAge], ecx</span><br><span class=\"line\">mov dword prt[age], 1Eh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实际代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> &amp;rAge = age;</span><br><span class=\"line\">age = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> temp = age;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> &amp;rAge = temp;</span><br><span class=\"line\">age = <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-函数进阶\"><a href=\"#3-函数进阶\" class=\"headerlink\" title=\"3. 函数进阶\"></a>3. 函数进阶</h3><h4 id=\"3-1-函数默认参数\"><a href=\"#3-1-函数默认参数\" class=\"headerlink\" title=\"3.1 函数默认参数\"></a>3.1 函数默认参数</h4><ul>\n<li><p>在C++中，函数的形参列表中的形参可以有默认值</p>\n</li>\n<li><p>语法：<code>返回值类型 函数名 （参数 = 默认值）&#123;&#125;</code></p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无默认值参数，通过调用函数传入参数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func01</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有默认值参数，可以通过调用函数传入参数值，也可以不传参数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func02</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">10</span>, <span class=\"type\">int</span> b = <span class=\"number\">20</span>, <span class=\"type\">int</span> c = <span class=\"number\">30</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当函数定义中，有默认参数值的一项形参，其之后的其他形参也要有形参</span></span><br><span class=\"line\"><span class=\"comment\">//int func03(int a = 10, int b, int c)</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    return a + b + c;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数在声明时，形参有默认值，定义时，形参不得定义默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func04</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">10</span>, <span class=\"type\">int</span> b = <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//int func04(int a = 20, int b = 10)</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    return a + b;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Func01: &quot;</span> &lt;&lt; <span class=\"built_in\">func01</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Func02: &quot;</span> &lt;&lt; <span class=\"built_in\">func02</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-1-1-函数默认参数补充\"><a href=\"#3-1-1-函数默认参数补充\" class=\"headerlink\" title=\"3.1.1 函数默认参数补充\"></a>3.1.1 函数默认参数补充</h5><ul>\n<li><p>默认参数可以是全局变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">20</span>, b = a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sum</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>默认参数可以是函数名(函数所在内存的地址：指针变量)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;test(int) - &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> v1, <span class=\"type\">void</span>(*ptr_Test)(<span class=\"type\">int</span>) = test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">ptr_Test</span>(v1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(<span class=\"number\">20</span>, test);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>void(*ptr_Test)(int) = test;</code></p>\n<p><code>ptr_Test(10);</code></p>\n</li>\n<li><p>默认参数，需要<code>保证从右到左</code>依次赋予默认参数，<code>不能出现右边形参没有默认值</code>的情况</p>\n</li>\n<li><p>原理：<code>C++编译转汇编</code>时，调用有默认参数的函数时，先进行<code>push参数</code>，再<code>调用函数</code>，其中<code>优先push最右边的参数值</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b = <span class=\"number\">2</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push <span class=\"number\">2</span></span><br><span class=\"line\">push <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> sum()</span><br><span class=\"line\">add esp, <span class=\"number\">8</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-2-函数占位参数\"><a href=\"#3-2-函数占位参数\" class=\"headerlink\" title=\"3.2 函数占位参数\"></a>3.2 函数占位参数</h4><ul>\n<li><p>C++函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>\n</li>\n<li><p>占位参数可以有默认值</p>\n</li>\n<li><p>语法：<code>返回值类型 函数名 （数据类型）&#123;&#125;；</code></p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 占位参数可以有默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> = <span class=\"number\">10</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Func1 Test&quot;</span> &lt;&lt; endl; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有默认值可以不传实参，否则占位参数也要传实参</span></span><br><span class=\"line\">    <span class=\"built_in\">func1</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-3-函数重载\"><a href=\"#3-3-函数重载\" class=\"headerlink\" title=\"3.3 函数重载\"></a>3.3 函数重载</h4><h5 id=\"3-3-1-函数重载概述\"><a href=\"#3-3-1-函数重载概述\" class=\"headerlink\" title=\"3.3.1 函数重载概述\"></a>3.3.1 函数重载概述</h5><ul>\n<li><p>作用：函数名可以重复，提高复用性</p>\n</li>\n<li><p>条件：</p>\n<ol>\n<li>同一作用域下</li>\n<li>函数名相同</li>\n<li>函数参数类型不同 或 个数不同 或 顺序不同</li>\n</ol>\n</li>\n<li><p>注意：函数的返回值不可以作为函数重载的条件</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func(int a)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func(int a, int b)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">double</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func(int a, double b)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值不可以作为函数重载的条件</span></span><br><span class=\"line\"><span class=\"comment\">//int func()</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    cout &lt;&lt; &quot;func()&quot; &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(<span class=\"number\">10</span>, <span class=\"number\">20.20</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-3-2-函数重载注意事项\"><a href=\"#3-3-2-函数重载注意事项\" class=\"headerlink\" title=\"3.3.2 函数重载注意事项\"></a>3.3.2 函数重载注意事项</h5><ul>\n<li><p>引用作为重载条件</p>\n</li>\n<li><p>函数重载碰到函数默认参数</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func(int &amp;a)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func(const int &amp;a)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a, <span class=\"type\">int</span> &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func(int &amp;a, int &amp;b)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func2(int a)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b = <span class=\"number\">10</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;func(int a, int b = 10)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(a);</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// func2 函数有重载，且其中一个参数有默认值</span></span><br><span class=\"line\">    <span class=\"comment\">//func2(a);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h6 id=\"3-3-2-1-函数重载补充内容\"><a href=\"#3-3-2-1-函数重载补充内容\" class=\"headerlink\" title=\"3.3.2.1 函数重载补充内容\"></a>3.3.2.1 函数重载补充内容</h6><ul>\n<li><p>函数重载后，<code>并非</code>是所有的重载函数，共同有一个<code>相同的函数名</code>，仅参数不同</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>以上三个函数<code>func</code>是重载函数，在<code>编辑器</code>和我们<code>人类的视角</code>中是有着<code>相同</code>的函数<code>名称func</code>；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call func_1()</span><br><span class=\"line\"></span><br><span class=\"line\">call func_2()</span><br><span class=\"line\"></span><br><span class=\"line\">call func_3()</span><br></pre></td></tr></table></figure>\n\n<p>以上是当<code>编译时</code>，<code>C++转汇编</code>时，汇编中的情况，同时这些重载函数的<code>内存地址</code>自然也是<code>不一样</code>的；</p>\n<p>但在<code>编译器</code>中，<code>不同版本</code>或<code>类型的</code>编译器，在编译时会这些重载函数进行<code>重新进行命名</code>；</p>\n</li>\n</ul>\n<h4 id=\"3-4-内联函数\"><a href=\"#3-4-内联函数\" class=\"headerlink\" title=\"3.4 内联函数\"></a>3.4 内联函数</h4><ul>\n<li><p>功能描述：编译器会将内联函数的调用，直接展开成函数体</p>\n</li>\n<li><p>使用<code>inline</code>修饰函数的声明或实现，可以使其变成内联函数(建议声明和实现都使用<code>inline</code>修饰)</p>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"built_in\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sum(1, 2)  =&gt; a + b;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>内联函数</p>\n<ul>\n<li>缺点：会增加代码的体积</li>\n<li>优点：函数调用，需要开辟栈空间，内联函数不需要，节省资源</li>\n</ul>\n</li>\n<li><p>使用场景：</p>\n<ul>\n<li>函数的体积不大(不超过10行)</li>\n<li>不会被频繁调用</li>\n</ul>\n</li>\n<li><p>补充知识：</p>\n<ul>\n<li>不是所有函数被<code>inline</code>修饰后，编译器都会将其变成内联函数：递归函数</li>\n</ul>\n</li>\n<li><p>通过反汇编查看内联函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"built_in\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// int c = sum(1, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 普通函数--反汇编</span><br><span class=\"line\">push 0A</span><br><span class=\"line\">push 0B</span><br><span class=\"line\">call sum()</span><br><span class=\"line\">add esp, 8</span><br><span class=\"line\">mov dword ptr[c], eax</span><br><span class=\"line\"></span><br><span class=\"line\">// 内联函数--反汇编</span><br><span class=\"line\">mov eax, 0A</span><br><span class=\"line\">add eax, 0B</span><br><span class=\"line\">mov dword ptr[c],</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-类和对象\"><a href=\"#4-类和对象\" class=\"headerlink\" title=\"4. 类和对象\"></a>4. 类和对象</h3><ul>\n<li>C++面向对象的三大特性：封装，继承，多态</li>\n</ul>\n<h4 id=\"4-1-封装\"><a href=\"#4-1-封装\" class=\"headerlink\" title=\"4.1 封装\"></a>4.1 封装</h4><h5 id=\"4-1-1-封装的意义\"><a href=\"#4-1-1-封装的意义\" class=\"headerlink\" title=\"4.1.1 封装的意义\"></a>4.1.1 封装的意义</h5><ul>\n<li><p>意义一：</p>\n<ol>\n<li>将属性和行为作为一个整体，表现生活中的事物</li>\n<li>将属性和行为加以权限控制</li>\n<li>在设计类时，属性和行为写在一起，表现事物</li>\n</ol>\n</li>\n<li><p>语法：<code>class 类名 &#123; 访问权限：属性 / 行为 &#125;；</code></p>\n</li>\n<li><p>示例1：设计一个圆，求圆的周长</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类名 （圆）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 权限（公开）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> Pi = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> cir_R;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算圆周长的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">calculatePerimeter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"number\">2</span> * Pi * cir_R;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过Circle类创建一个实例（对象） c1</span></span><br><span class=\"line\">    Circle c1;</span><br><span class=\"line\">    <span class=\"comment\">// 通过对象，对类中的属性 cir_R 进行赋值 </span></span><br><span class=\"line\">    c1.cir_R = <span class=\"number\">10.0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> value = c1.<span class=\"built_in\">calculatePerimeter</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Circle perimeter : &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例2：设计一个学生类，属性有姓名和学号，对属性进行赋值，并显示属性信息（两种写法）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string stu_Name;</span><br><span class=\"line\">    <span class=\"type\">int</span> stu_ID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printStudentInfo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Student Info : &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; stu_Name &lt;&lt; <span class=\"string\">&quot;  ID: &quot;</span> &lt;&lt; stu_ID &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Student s1;</span><br><span class=\"line\">    s1.stu_ID = <span class=\"number\">123456</span>;</span><br><span class=\"line\">    s1.stu_Name = <span class=\"string\">&quot;FH&quot;</span>;</span><br><span class=\"line\">    s1.<span class=\"built_in\">printStudentInfo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string stu_Name;</span><br><span class=\"line\">    <span class=\"type\">int</span> stu_ID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setName</span><span class=\"params\">(string name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        stu_Name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setID</span><span class=\"params\">(<span class=\"type\">int</span> id)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        stu_ID = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printStudentInfo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Student Info : &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; stu_Name &lt;&lt; <span class=\"string\">&quot;  ID: &quot;</span> &lt;&lt; stu_ID &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Student s1;</span><br><span class=\"line\">    s1.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;FH&quot;</span>);</span><br><span class=\"line\">    s1.<span class=\"built_in\">setID</span>(<span class=\"number\">123456</span>);</span><br><span class=\"line\">    s1.<span class=\"built_in\">printStudentInfo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Student s2;</span><br><span class=\"line\">    s2.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;CYL&quot;</span>);</span><br><span class=\"line\">    s2.<span class=\"built_in\">setID</span>(<span class=\"number\">666666</span>);</span><br><span class=\"line\">    s2.<span class=\"built_in\">printStudentInfo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>意义二：不属性和行为放在不同的权限下，加以控制</p>\n</li>\n<li><p>访问权限三种：</p>\n<table>\n<thead>\n<tr>\n<th>public 公开</th>\n<th>成员类内可访问，类外可访问</th>\n<th>子类可访问</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>protected 保护</td>\n<td>成员类内可访问，类外不可访问</td>\n<td>子类可访问保护内容</td>\n</tr>\n<tr>\n<td>private 私有</td>\n<td>成员类内可访问，类外不可访问</td>\n<td>子类不可访问私有内容</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    string car;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> password;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        name = <span class=\"string\">&quot;FH&quot;</span>;</span><br><span class=\"line\">        car = <span class=\"string\">&quot;XXX&quot;</span>;</span><br><span class=\"line\">        password = <span class=\"number\">123456</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Person p1;</span><br><span class=\"line\">    p1.name = <span class=\"string\">&quot;CYL&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//p1.car = &quot;YYY&quot;; // 保护权限内容，类外不可访问和修改</span></span><br><span class=\"line\">    <span class=\"comment\">//p1.password = 999999; // 私有权限内容，类外不可访问和修改</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-1-2-struct和class区别\"><a href=\"#4-1-2-struct和class区别\" class=\"headerlink\" title=\"4.1.2 struct和class区别\"></a>4.1.2 struct和class区别</h5><ul>\n<li><p>区别：struct 默认权限为公开；class默认权限为私有</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">C2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    C1 c1;</span><br><span class=\"line\">    C2 c2;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//c1.a = 10; // class默认私有，无法访问</span></span><br><span class=\"line\">    c2.a = <span class=\"number\">10</span>; <span class=\"comment\">// struct默认公开，可以访问</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-1-3-成员属性私有化\"><a href=\"#4-1-3-成员属性私有化\" class=\"headerlink\" title=\"4.1.3 成员属性私有化\"></a>4.1.3 成员属性私有化</h5><ul>\n<li><p>优点：</p>\n<ol>\n<li>将所有成员属性设置为私有，可以自己控制读写权限</li>\n<li>对于写权限，可以检测数据的有效性</li>\n</ol>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setName</span><span class=\"params\">(string name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        p_Name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p_Name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        p_Age = <span class=\"number\">24</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p_Age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setID</span><span class=\"params\">(<span class=\"type\">int</span> id)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        p_ID = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string p_Name; <span class=\"comment\">// 可读可写</span></span><br><span class=\"line\">    <span class=\"type\">int</span> p_Age; <span class=\"comment\">// 可读</span></span><br><span class=\"line\">    <span class=\"type\">int</span> p_ID; <span class=\"comment\">// 可写</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Person p;</span><br><span class=\"line\">    p.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;FH&quot;</span>);</span><br><span class=\"line\">    p.<span class=\"built_in\">setID</span>(<span class=\"number\">123455</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; p.<span class=\"built_in\">getName</span>() &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt; p.<span class=\"built_in\">getAge</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-1-4-案例：设计立方体\"><a href=\"#4-1-4-案例：设计立方体\" class=\"headerlink\" title=\"4.1.4 案例：设计立方体\"></a>4.1.4 案例：设计立方体</h5><ul>\n<li><p>要求：设计立法体类（cube），求面积和体积，分别用全局函数和成员函数判断两个立方体是否相等</p>\n</li>\n<li><p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cube</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">float</span> c_Length = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">    <span class=\"type\">float</span> c_Width = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">    <span class=\"type\">float</span> c_Height = <span class=\"number\">1.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setLength</span><span class=\"params\">(<span class=\"type\">float</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        c_Length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c_Length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setWidth</span><span class=\"params\">(<span class=\"type\">float</span> width)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        c_Width = width;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">getWidth</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c_Width;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"type\">float</span> height)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        c_Height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c_Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">calculateArea</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span> * c_Length * c_Width + <span class=\"number\">2</span> * c_Length * c_Height + <span class=\"number\">2</span> * c_Width * c_Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">calculateVolume</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c_Height * c_Width * c_Length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 成员函数判断两个立方体是否相等</span></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">calculateSameFromClass</span><span class=\"params\">(Cube &amp;c)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.<span class=\"built_in\">getLength</span>() == c_Length &amp;&amp; c.<span class=\"built_in\">getWidth</span>() == c_Width &amp;&amp; c.<span class=\"built_in\">getHeight</span>() == c_Height)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Class_Same!!!&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Class_No Same!!!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局函数判断两个立方体是否相等</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">calculateSameFromGlobal</span><span class=\"params\">(Cube &amp;c1, Cube &amp;c2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c1.<span class=\"built_in\">getHeight</span>() == c2.<span class=\"built_in\">getHeight</span>() &amp;&amp; c1.<span class=\"built_in\">getWidth</span>() == c2.<span class=\"built_in\">getWidth</span>() &amp;&amp; c1.<span class=\"built_in\">getLength</span>() == c2.<span class=\"built_in\">getLength</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Global_Same!!!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Global_No Same!!!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Cube c1;</span><br><span class=\"line\">    Cube c2;</span><br><span class=\"line\">    Cube c3;</span><br><span class=\"line\"></span><br><span class=\"line\">    c1.<span class=\"built_in\">setHeight</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\">    c1.<span class=\"built_in\">setLength</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\">    c1.<span class=\"built_in\">setWidth</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    c2.<span class=\"built_in\">setHeight</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\">    c2.<span class=\"built_in\">setLength</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\">    c2.<span class=\"built_in\">setWidth</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    c3.<span class=\"built_in\">setHeight</span>(<span class=\"number\">20.0</span>);</span><br><span class=\"line\">    c3.<span class=\"built_in\">setLength</span>(<span class=\"number\">20.0</span>);</span><br><span class=\"line\">    c3.<span class=\"built_in\">setWidth</span>(<span class=\"number\">20.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存储立方体的面积以及体积返回的值</span></span><br><span class=\"line\">    <span class=\"type\">float</span> cube_Area = c1.<span class=\"built_in\">calculateArea</span>();</span><br><span class=\"line\">    <span class=\"type\">float</span> cube_Volume = c1.<span class=\"built_in\">calculateVolume</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存储两种函数等到的判断返回结果</span></span><br><span class=\"line\">    string global_Same = <span class=\"built_in\">calculateSameFromGlobal</span>(c1, c2);</span><br><span class=\"line\">    string class_Same = c1.<span class=\"built_in\">calculateSameFromClass</span>(c3);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Cube Area: &quot;</span> &lt;&lt; cube_Area &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Cube Volume: &quot;</span> &lt;&lt; cube_Volume &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Global_Same: &quot;</span> &lt;&lt; global_Same &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Class_Same: &quot;</span> &lt;&lt; class_Same &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-1-5-案例：点圆的关系\"><a href=\"#4-1-5-案例：点圆的关系\" class=\"headerlink\" title=\"4.1.5 案例：点圆的关系\"></a>4.1.5 案例：点圆的关系</h5><ul>\n<li><p>要求：设计圆类（Circle）设计点类（Point），计算点和圆的包含关系（圆外）（圆上）（圆内）（圆心）</p>\n</li>\n<li><p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 点类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 点X坐标</span></span><br><span class=\"line\">    <span class=\"type\">double</span> p_X;</span><br><span class=\"line\">    <span class=\"comment\">// 点Y坐标</span></span><br><span class=\"line\">    <span class=\"type\">double</span> p_Y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_X</span><span class=\"params\">(<span class=\"type\">double</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        p_X = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">get_X</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p_X;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_Y</span><span class=\"params\">(<span class=\"type\">double</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        p_Y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">get_Y</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p_Y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 圆类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 圆的半径</span></span><br><span class=\"line\">    <span class=\"type\">double</span> c_Radius;</span><br><span class=\"line\">    <span class=\"comment\">// 圆心的坐标</span></span><br><span class=\"line\">    Point c_Center;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setRadius</span><span class=\"params\">(<span class=\"type\">double</span> radius)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        c_Radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c_Radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setCenter</span><span class=\"params\">(Point &amp;center)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        c_Center = center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Point <span class=\"title\">getCenter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c_Center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算圆与点之间的关系</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">calculateCircleAndPoint</span><span class=\"params\">(Circle &amp;c, Point &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 圆心点X - 点X</span></span><br><span class=\"line\">    <span class=\"type\">double</span> ppDistanceX = c.<span class=\"built_in\">getCenter</span>().<span class=\"built_in\">get_X</span>() - p.<span class=\"built_in\">get_X</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 圆心点Y - 点Y</span></span><br><span class=\"line\">    <span class=\"type\">double</span> ppDistanceY = c.<span class=\"built_in\">getCenter</span>().<span class=\"built_in\">get_Y</span>() - p.<span class=\"built_in\">get_X</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 圆的半径</span></span><br><span class=\"line\">    <span class=\"type\">double</span> rDistanceR = c.<span class=\"built_in\">getRadius</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分别计算：圆心X到点X的平方值，圆心Y到点Y的平方值，圆半径的平方值</span></span><br><span class=\"line\">    <span class=\"type\">double</span> powX = <span class=\"built_in\">pow</span>(ppDistanceX, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">double</span> powY = <span class=\"built_in\">pow</span>(ppDistanceY, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">double</span> powR = <span class=\"built_in\">pow</span>(rDistanceR, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等到判断关系值 （x - x1）^2 + (y - y1)^2 = r^2</span></span><br><span class=\"line\">    <span class=\"type\">double</span> ppDistance = powX + powY;</span><br><span class=\"line\">    <span class=\"type\">double</span> rDistance = powR;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ppDistance == rDistance)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Point On The Circle&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ppDistance &lt; rDistance)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Point Within The Circle&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ppDistance &gt; rDistance)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Point Outside The Circle&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化一个圆</span></span><br><span class=\"line\">    Circle c&#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化一个圆心的坐标 和 点的坐标</span></span><br><span class=\"line\">    Point p_center&#123;&#125;;</span><br><span class=\"line\">    Point p&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    p_center.<span class=\"built_in\">set_X</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\">    p_center.<span class=\"built_in\">set_Y</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    p.<span class=\"built_in\">set_X</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\">    p.<span class=\"built_in\">set_Y</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\">    c.<span class=\"built_in\">setRadius</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\">    c.<span class=\"built_in\">setCenter</span>(p_center);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">calculateCircleAndPoint</span>(c, p);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"4-2-对象初始化和清理\"><a href=\"#4-2-对象初始化和清理\" class=\"headerlink\" title=\"4.2 对象初始化和清理\"></a>4.2 对象初始化和清理</h4><ul>\n<li>C++中每个对象都有初始设置以及对象销毁前的清理数据的设置</li>\n</ul>\n<h5 id=\"4-2-1-构造函数和析构函数\"><a href=\"#4-2-1-构造函数和析构函数\" class=\"headerlink\" title=\"4.2.1 构造函数和析构函数\"></a>4.2.1 构造函数和析构函数</h5><p>问题：</p>\n<ul>\n<li>对象的初始化和清理是两个很重要的安全问题</li>\n<li>一个对象或者变量没有初始化状态，使用的后果是未知的</li>\n<li>使用完一个对象或变量，没有及时清理，也会造成安全问题</li>\n</ul>\n<p>解决：</p>\n<ul>\n<li>C++利用构造函数和析构函数解决问题，这两个函数被编译器自动调用，完成对象的初始化和清理工作</li>\n<li>对象的初始化和清理工作是编译器强制要求的，如果不提供构造函数和析构函数，编译器会提供编译器提供的构造函数和析构函数是空实现</li>\n</ul>\n<p>含义：</p>\n<ul>\n<li>构造函数：主要为创建对象时为对象的成员属性赋值，构造函数由编译器自动调用</li>\n<li>析构函数：主要为对象销毁前系统自动调用，执行清理工作</li>\n</ul>\n<p>构造函数语法：<code>类名（）&#123;&#125;;</code></p>\n<ol>\n<li>构造函数，没有返回值和void</li>\n<li>函数名称和类名相同</li>\n<li>构造函数可以有参数，所以可以重载</li>\n<li>程序在调用对象时，会自动调用构造函数，且只调用一次</li>\n</ol>\n<p>析构函数语法：<code>~ 类名（）&#123;&#125;;</code></p>\n<ol>\n<li>析构函数，没有返回值和void</li>\n<li>函数名称和类名不相同，在前面加 ~</li>\n<li>构造函数部可以有参数，所以不可以重载</li>\n<li>程序在调用对象时，会自动调用析构函数，且只调用一次</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Test</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Test构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Test</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Test析构函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Test t1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>(); <span class=\"comment\">// 函数执行时调用构造函数，结束时调用析构函数</span></span><br><span class=\"line\">    Test t2; <span class=\"comment\">// 函数执行时调用构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>); <span class=\"comment\">// 程序在此处暂停，析构函数为被调用，按任意键后执行析构函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"4-2-2-构造函数分类及调用\"><a href=\"#4-2-2-构造函数分类及调用\" class=\"headerlink\" title=\"4.2.2 构造函数分类及调用\"></a>4.2.2 构造函数分类及调用</h5><ul>\n<li><p>分类：</p>\n<ol>\n<li>按参数分为：有参构造，无参构造</li>\n<li>按类型分为：普通构造，拷贝构造</li>\n</ol>\n</li>\n<li><p>调用：</p>\n<ol>\n<li>括号法</li>\n<li>显示法</li>\n<li>隐式转换法</li>\n</ol>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 创建构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person无参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        age = a;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person &amp;p) <span class=\"comment\">// 将对象的属性拷贝进来</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        age = p.age;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person无参析构函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 括号法调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意：无参构造函数不用括号：Person p1(); 编译器会作为 void func(); 声明来处理，调用空实现的构造函数</span></span><br><span class=\"line\">    Person p1; <span class=\"comment\">// 无参构造函数</span></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>; <span class=\"comment\">// 有参构造函数</span></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(p2)</span></span>; <span class=\"comment\">// 拷贝构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p2 age: &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p3 age: &quot;</span> &lt;&lt; p3.age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 显示法调用</span></span><br><span class=\"line\">    Person p4;</span><br><span class=\"line\">    Person p5 = <span class=\"built_in\">Person</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">    Person p6 = <span class=\"built_in\">Person</span>(p5);</span><br><span class=\"line\">    <span class=\"comment\">// 注意 Person(20) 单独写出来为匿名对象，程序中无法使用，执行完会被系统立即回收</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意 不用拷贝函数初始化匿名对象，Person(p6) 编译器等价于 Person p6 , 而 Person p6 已经作为对象被实例化了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 隐式转换法调用</span></span><br><span class=\"line\">    Person p7 = <span class=\"number\">10</span>; <span class=\"comment\">// 等价于 Person p7 = Person(10);</span></span><br><span class=\"line\">    Person p8 = p7;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-2-3-拷贝构造函数调用时机\"><a href=\"#4-2-3-拷贝构造函数调用时机\" class=\"headerlink\" title=\"4.2.3 拷贝构造函数调用时机\"></a>4.2.3 拷贝构造函数调用时机</h5><ul>\n<li><p>C++中拷贝构造函数调用时机三种情况\t</p>\n<ol>\n<li>使用一个已经创建的对象来初始化一个新对象</li>\n<li>值传递的方式给函数参数传值</li>\n<li>以值方式返回局部对象</li>\n</ol>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> p_age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person无参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p_age = a;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person &amp;person)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p_age = person.p_age;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person无参析构函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 使用一个已经创建的对象来初始化一个新对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>; <span class=\"comment\">// 有参构造</span></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>; <span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p2 age: &quot;</span> &lt;&lt; p2.p_age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 值传递的方式给函数参数传值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test2</span><span class=\"params\">(Person person)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Person p3; <span class=\"comment\">// 默认构造</span></span><br><span class=\"line\">    <span class=\"built_in\">test2</span>(p3); <span class=\"comment\">// 拷贝构造 - 此处 p3 为p3对象的副本（拷贝）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 以值方式返回局部对象</span></span><br><span class=\"line\"><span class=\"function\">Person <span class=\"title\">test3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Person p4; <span class=\"comment\">// 默认构造</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p4 address: &quot;</span> &lt;&lt; (<span class=\"type\">int</span> *) &amp;p4 &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p4; <span class=\"comment\">// 此处 p4 为p4对象的副本（拷贝）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Person p5 = <span class=\"built_in\">test3</span>(); <span class=\"comment\">// 拷贝构造 - 得到 p4 的对象副本</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p5 address: &quot;</span> &lt;&lt; (<span class=\"type\">int</span> *) &amp;p5 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//demo1();</span></span><br><span class=\"line\">    <span class=\"comment\">//demo2();</span></span><br><span class=\"line\">    <span class=\"built_in\">demo3</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-2-4-构造函数调用规则\"><a href=\"#4-2-4-构造函数调用规则\" class=\"headerlink\" title=\"4.2.4 构造函数调用规则\"></a>4.2.4 构造函数调用规则</h5><ul>\n<li><p>默认情况下，C++编译器至少给一个类添三个函数</p>\n<ol>\n<li>默认构造函数（无参，函数体为空）</li>\n<li>默认析构函数（无参，函数体为空）</li>\n<li>默认拷贝构造函数 对类实例化的对象的属性值拷贝</li>\n</ol>\n</li>\n<li><p>调用规则：</p>\n<ol>\n<li>如果自定义有参构造函数，编译器不提供默构造函数，但提供默认拷贝构造函数</li>\n<li>如果自定义拷贝构造函数，编译器不提供其他构造函数</li>\n</ol>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> p_age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person无参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p_age = a;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person &amp;person)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p_age = person.p_age;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person无参析构函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 如果自定义有参构造函数，编译器不提供默构造函数，但提供默认拷贝构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"comment\">// 默认构造函数不会被调用</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 如果自定义拷贝构造函数，编译器不提供其他构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> <span class=\"comment\">// 自定义拷贝构造函数后，其他构造函数需自己添加</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> Person p3;</span><br><span class=\"line\"> <span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(p3)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-2-5-深拷贝和浅拷贝\"><a href=\"#4-2-5-深拷贝和浅拷贝\" class=\"headerlink\" title=\"4.2.5 深拷贝和浅拷贝\"></a>4.2.5 深拷贝和浅拷贝</h5><ul>\n<li><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>\n</li>\n<li><p>浅拷贝：简单的赋值拷贝（编译器默认提供的拷贝构造函数就是浅拷贝）</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> p_age;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p_height;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person无参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> height)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        p_age = a;</span><br><span class=\"line\">        p_height = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过深拷贝的方法解决浅拷贝带来的问题 深拷贝定义后，编译器默认执行该构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person &amp;person)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        p_age = person.p_age;</span><br><span class=\"line\">        p_height = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(*person.p_height); <span class=\"comment\">// 自定义的赋值方式，堆中开辟空间</span></span><br><span class=\"line\">        <span class=\"comment\">//p_height = person.p_height; // 编译器默认的赋值方式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浅拷贝时，p2 内的 p_height 被释放，p1 无可释放，程序执行非法操作（报错）</span></span><br><span class=\"line\"><span class=\"comment\">// 深拷贝时，p2 内的 p_height 是单独的堆区空间被释放，不影响 p1 的 p_height 内存释放（正确）</span></span><br><span class=\"line\">    ~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Person析构函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p_height != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> p_height;</span><br><span class=\"line\">            p_height = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demoTest</span><span class=\"params\">()</span> <span class=\"comment\">// 栈区内存释放的顺序是先进后出，所以析构函数 释放内存是从 p2 开始</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">170</span>)</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p1 age: &quot;</span> &lt;&lt; p1.p_age &lt;&lt; <span class=\"string\">&quot; p1 height: &quot;</span> &lt;&lt; *p1.p_height &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>; <span class=\"comment\">// 编译器提供的浅构造函数，解析的是p1指针指向的内存空间</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p2 age: &quot;</span> &lt;&lt; p2.p_age &lt;&lt; <span class=\"string\">&quot; p2 height: &quot;</span> &lt;&lt; *p2.p_height &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demoTest</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-2-6-初始化列表\"><a href=\"#4-2-6-初始化列表\" class=\"headerlink\" title=\"4.2.6 初始化列表\"></a>4.2.6 初始化列表</h5><ul>\n<li><p>作用：C++提供初始化列表，用来初始化属性</p>\n</li>\n<li><p>语法：<code>构造函数（）：属性1（值1），属性2（值2）... &#123;&#125;</code></p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> p_a;</span><br><span class=\"line\">    <span class=\"type\">int</span> p_b;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过有参构造函数初始化属性值</span></span><br><span class=\"line\"><span class=\"comment\">//    Person(int a, int b)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        p_a = a;</span></span><br><span class=\"line\"><span class=\"comment\">//        p_b = b;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过初始化列表来初始化属性值</span></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) : <span class=\"built_in\">p_a</span>(a), <span class=\"built_in\">p_b</span>(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p1 a: &quot;</span> &lt;&lt; p1.p_a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p1 b: &quot;</span> &lt;&lt; p1.p_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-2-7-类对象作为类成员\"><a href=\"#4-2-7-类对象作为类成员\" class=\"headerlink\" title=\"4.2.7 类对象作为类成员\"></a>4.2.7 类对象作为类成员</h5><ul>\n<li><p>C++类中的成员可以说另一个类的对象，称为：对象成员</p>\n</li>\n<li><p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>B类中有对象作为成员，A为对象成员</p>\n</li>\n<li><p>程序执行时，先构造A，再构造B</p>\n</li>\n<li><p>程序结束时，先析构B，再析构A</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string p_Name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Phone</span>(string name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Phone 构造函数调用 (先构造)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        p_Name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Phone</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Phone 析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Human</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string h_Name;</span><br><span class=\"line\">    Phone h_Phone;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Human</span>(string name, string phone) : <span class=\"built_in\">h_Name</span>(name), <span class=\"built_in\">h_Phone</span>(phone)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Human 构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Human</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Human 析构函数调用 (先析构)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h</span><span class=\"params\">(<span class=\"string\">&quot;FH&quot;</span>, <span class=\"string\">&quot;Apple&quot;</span>)</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; h.h_Name &lt;&lt; <span class=\"string\">&quot; Phone: &quot;</span> &lt;&lt; h.h_Phone.p_Name &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-2-8-静态成员\"><a href=\"#4-2-8-静态成员\" class=\"headerlink\" title=\"4.2.8 静态成员\"></a>4.2.8 静态成员</h5><ul>\n<li><p>定义：在成员变量和成员函数前加关键字static，称为静态成员</p>\n</li>\n<li><p>分类：</p>\n<ol>\n<li>静态成员变量<ul>\n<li>所有对象共享一份数据</li>\n<li>在编译阶段分配内存</li>\n<li>类内声明，类外初始化</li>\n</ul>\n</li>\n<li>静态成员函数<ul>\n<li>所有对象共享一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> p_num; <span class=\"comment\">// 静态成员变量 类内声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"comment\">// 静态成员函数</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        p_num = <span class=\"number\">100</span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;num: &quot;</span> &lt;&lt; p_num &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">// 静态成员变量的访问权限可以为私密 类外无法访问</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;private func2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> Person::p_num = <span class=\"number\">0</span>; <span class=\"comment\">// 静态成员变量 类外初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过对象访问</span></span><br><span class=\"line\">    Person p;</span><br><span class=\"line\">    p.<span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过类名访问 （静态成员函数可以直接通过类的作用域直接调用）</span></span><br><span class=\"line\">    Person::<span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"4-3-对象模型和this指针\"><a href=\"#4-3-对象模型和this指针\" class=\"headerlink\" title=\"4.3 对象模型和this指针\"></a>4.3 对象模型和this指针</h4><h5 id=\"4-3-1-成员变量和成员函数分开存储\"><a href=\"#4-3-1-成员变量和成员函数分开存储\" class=\"headerlink\" title=\"4.3.1 成员变量和成员函数分开存储\"></a>4.3.1 成员变量和成员函数分开存储</h5><ul>\n<li><p>C++中，类内的成员变量和成员函数分开存储</p>\n</li>\n<li><p>只有非静态成员变量才属于类的对象上</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 空对象 默认 占内存空间 1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">0</span>; <span class=\"comment\">// 非空对象 占内存空间 依据成员变量</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">demo3</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> s_num; <span class=\"comment\">// 静态成员变量 不在类的对象上</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 成员函数 不在类的对象上 (无论是否静态)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> demo3::s_num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Size of demo1: &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(demo1) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Size of demo2: &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(demo2) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Size of demo3: &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(demo3) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Test1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">Test2</span>();</span><br><span class=\"line\">    <span class=\"built_in\">Test3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-3-2-this指针概念\"><a href=\"#4-3-2-this指针概念\" class=\"headerlink\" title=\"4.3.2 this指针概念\"></a>4.3.2 this指针概念</h5><ul>\n<li><p>作用：this指针指向被调用的成员函数所属对象</p>\n</li>\n<li><p>this指针是隐含每个非静态成员函数的一种指针</p>\n</li>\n<li><p>this指针不需定义，直接使用</p>\n</li>\n<li><p>用途：</p>\n<ol>\n<li>当形参和成员变量同名时，可用this指针来区分</li>\n<li>在类的非静态成员函数返回对象本身，可使用 return *this；</li>\n</ol>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// this可以区分相同名称的变量</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回的是Person对象的引用</span></span><br><span class=\"line\">    <span class=\"function\">Person &amp;<span class=\"title\">addPersonAge</span><span class=\"params\">(Person &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age += p.age;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; <span class=\"comment\">// 返回对象为 *this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p1 Age: &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 链式编程思想</span></span><br><span class=\"line\">    <span class=\"comment\">// p3.addPersonAge(p2) 的执行结果是返回 对象的本身，所以可以链式调用成员函数</span></span><br><span class=\"line\">    p3.<span class=\"built_in\">addPersonAge</span>(p2).<span class=\"built_in\">addPersonAge</span>(p2).<span class=\"built_in\">addPersonAge</span>(p2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p3 Age: &quot;</span> &lt;&lt; p3.age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">func1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-3-3-空指针访问成员函数\"><a href=\"#4-3-3-空指针访问成员函数\" class=\"headerlink\" title=\"4.3.3 空指针访问成员函数\"></a>4.3.3 空指针访问成员函数</h5><ul>\n<li><p>C++中空指针可以调用成员函数，但要注意是否用到this</p>\n</li>\n<li><p>如果用到this，需要加上判断，保证代码的安全</p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;func1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为保证安全性，防止传入的空指针调用成员变量导致崩溃</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 此处的this 《==》 this.age this是空的，无实际对象，无法调用</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;func2 &quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个对象的地址为空</span></span><br><span class=\"line\">    Demo *d = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    d-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">    d-&gt;<span class=\"built_in\">func2</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-3-4-const修饰成员函数\"><a href=\"#4-3-4-const修饰成员函数\" class=\"headerlink\" title=\"4.3.4 const修饰成员函数\"></a>4.3.4 const修饰成员函数</h5><ul>\n<li><p>常函数：</p>\n<ol>\n<li>成员函数后加const，该函数称为常函数</li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加关键字mutable，在常函数中依然可以修改</li>\n</ol>\n</li>\n<li><p>常对象</p>\n<ol>\n<li>声明对象前加const，则称为常对象</li>\n<li>常对象只能调用常函数</li>\n</ol>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"comment\">// mutable 修饰的成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// this指针是指针常量，指针的指向不可修改</span></span><br><span class=\"line\">    <span class=\"comment\">// const Person *const this；</span></span><br><span class=\"line\">    <span class=\"comment\">// 常量函数的const 修饰的this指针 让this指针指向的值也不可修改</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printAge</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// this-&gt;age = 10;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 常函数可以修改 mutable的值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;id = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printID</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 常对象</span></span><br><span class=\"line\">    <span class=\"type\">const</span> Person p&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    p.<span class=\"built_in\">printAge</span>();</span><br><span class=\"line\">    <span class=\"comment\">//p.printID(); // 常对象只能调用 常函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//p.age = 100; // 常对象内的成员变量属性值不能修改</span></span><br><span class=\"line\">    p.id = <span class=\"number\">100</span>; <span class=\"comment\">// 常对象内的mutable成员变量属性值能修改</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"4-4-友元\"><a href=\"#4-4-友元\" class=\"headerlink\" title=\"4.4 友元\"></a>4.4 友元</h4><ul>\n<li>作用：目的是让一个函数或者类访问另一个类中的私有成员</li>\n<li>关键字：friend</li>\n<li>实现：<ol>\n<li>全局函数做友元</li>\n<li>类做友元</li>\n<li>成员函数做友元</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"4-4-1-全局函数做友元\"><a href=\"#4-4-1-全局函数做友元\" class=\"headerlink\" title=\"4.4.1 全局函数做友元\"></a>4.4.1 全局函数做友元</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Room</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将一个全局函数 在类中 通过friend关键在修饰 声明后，该全局函数可以访问 类中私有的成员变量属性</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">Func_Friend</span><span class=\"params\">(Room *room)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string privateRoom;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string publicRoom;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Room</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        privateRoom = <span class=\"string\">&quot;privateRoom Access Succeeded&quot;</span>;</span><br><span class=\"line\">        publicRoom = <span class=\"string\">&quot;publicRoom Access Succeeded&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Func_Friend</span><span class=\"params\">(Room *room)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Friend Function Access: &quot;</span> &lt;&lt; room-&gt;publicRoom &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">// 声明友元后，可以正常访问类中的私有成员变量</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Friend Function Access: &quot;</span> &lt;&lt; room-&gt;privateRoom &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Room room;</span><br><span class=\"line\">    <span class=\"built_in\">Func_Friend</span>(&amp;room);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Test</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"4-4-2-类做友元\"><a href=\"#4-4-2-类做友元\" class=\"headerlink\" title=\"4.4.2 类做友元\"></a>4.4.2 类做友元</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先声明一个 Service类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Service</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个 私有 Service类对象的指针</span></span><br><span class=\"line\">    Service *service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 构造函数和成员函数写在类外</span></span><br><span class=\"line\">    <span class=\"built_in\">User</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">access</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Service</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将 User类 声明为 Service类的友元类 使得User类的对象是 Service类得到友元对象，可以访问私有成员变量的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string priContent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string pubContent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数声明在外</span></span><br><span class=\"line\">    <span class=\"built_in\">Service</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过User类的作用域创建一个User类的构造函数，初始化User类中的成员变量的属性值</span></span><br><span class=\"line\">User::<span class=\"built_in\">User</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个Service类的对象指针</span></span><br><span class=\"line\">    service = <span class=\"keyword\">new</span> Service;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过User类的作用域创建一个User类的成员函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">User::access</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;User Access Service: &quot;</span> &lt;&lt; service-&gt;pubContent &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">// 当User类成为Service类的友元后，可以在User的函数内访问 Service类中的私有成员变量属性</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;User Access Service: &quot;</span> &lt;&lt; service-&gt;priContent &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过Service类的作用域创建一个Service类的构造函数</span></span><br><span class=\"line\">Service::<span class=\"built_in\">Service</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;priContent = <span class=\"string\">&quot;priContent&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;pubContent = <span class=\"string\">&quot;pubContent&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    User user;</span><br><span class=\"line\">    user.<span class=\"built_in\">access</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"4-4-3-成员函数做友元\"><a href=\"#4-4-3-成员函数做友元\" class=\"headerlink\" title=\"4.4.3 成员函数做友元\"></a>4.4.3 成员函数做友元</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Service</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Service *service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">User</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">access1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">access2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Service</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过friend关键字 声明User类中的成员函数access2() 是Service类的友元函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">User::access2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string priContent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string pubContent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Service</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User类和Service类的构造函数和成员函数在类外创建，类内声明</span></span><br><span class=\"line\">User::<span class=\"built_in\">User</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    service = <span class=\"keyword\">new</span> Service;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">User::access1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Access pubContent: &quot;</span> &lt;&lt; service-&gt;pubContent &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问Service类中的私有成员变量的属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">User::access2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Access priContent: &quot;</span> &lt;&lt; service-&gt;priContent &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Service::<span class=\"built_in\">Service</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    priContent = <span class=\"string\">&quot;priContent&quot;</span>;</span><br><span class=\"line\">    pubContent = <span class=\"string\">&quot;pubContent&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    User user;</span><br><span class=\"line\">    user.<span class=\"built_in\">access1</span>();</span><br><span class=\"line\">    user.<span class=\"built_in\">access2</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-5-运算符重载\"><a href=\"#4-5-运算符重载\" class=\"headerlink\" title=\"4.5 运算符重载\"></a>4.5 运算符重载</h4><ul>\n<li>概念：对已有的运算符进行重新的定义，赋予另一种功能，以适应不同的数据类型</li>\n</ul>\n<h5 id=\"4-5-1-加号运算符重载\"><a href=\"#4-5-1-加号运算符重载\" class=\"headerlink\" title=\"4.5.1 加号运算符重载\"></a>4.5.1 加号运算符重载</h5><ul>\n<li><p>作用：实现两个自定义数据类型相加的运算</p>\n</li>\n<li><p>编辑器提供了通用名称：operator+</p>\n</li>\n<li><p>内置的不能使用运算符重载，只有自定义类型的可以使用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2020/8/11.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Num</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> num1;</span><br><span class=\"line\">    <span class=\"type\">int</span> num2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 类中 成员函数 实现的 重载运算‘+’</span></span><br><span class=\"line\">    Num <span class=\"keyword\">operator</span>+(Num &amp;n) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Num my_n&#123;&#125;;</span><br><span class=\"line\">        my_n.num1 = <span class=\"keyword\">this</span>-&gt;num1 + n.num1;</span><br><span class=\"line\">        my_n.num2 = <span class=\"keyword\">this</span>-&gt;num2 + n.num2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> my_n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局函数 运算符重载的默认写法</span></span><br><span class=\"line\">Num <span class=\"keyword\">operator</span>+(Num &amp;n1, Num &amp;n2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Num my_n&#123;&#125;;</span><br><span class=\"line\">    my_n.num1 = n1.num1 + n2.num1;</span><br><span class=\"line\">    my_n.num2 = n1.num2 + n2.num2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> my_n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运算符函数 重载</span></span><br><span class=\"line\">Num <span class=\"keyword\">operator</span>+(Num &amp;n, <span class=\"type\">int</span> num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Num my_n&#123;&#125;;</span><br><span class=\"line\">    my_n.num1 = n.num1 + num;</span><br><span class=\"line\">    my_n.num2 = n.num2 + num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> my_n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Num n1&#123;&#125;;</span><br><span class=\"line\">    n1.num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">    n1.num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Num n2&#123;&#125;;</span><br><span class=\"line\">    n2.num1 = <span class=\"number\">5</span>;</span><br><span class=\"line\">    n2.num2 = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Num n3&#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 重载后的简化写法</span></span><br><span class=\"line\">    n3 = n1 + n2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 成员函数 重载的默认写法</span></span><br><span class=\"line\">    <span class=\"comment\">// n3 = n1.operator+(n2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全局函数 重载的默认写法</span></span><br><span class=\"line\">    <span class=\"comment\">// n3 = operator+(n1, n2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Operator: n3 = n1 + n2 = &quot;</span> &lt;&lt; n3.num1 &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Operator: n3 = n1 + n2 = &quot;</span> &lt;&lt; n3.num2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Num n4&#123;&#125;;</span><br><span class=\"line\">    n4.num1 = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载运算符函数的 重载写法 （Num类型 + int类型）</span></span><br><span class=\"line\">    Num n5 = n4 + num2;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Operator: n5 = n4 + num2 = &quot;</span> &lt;&lt; n5.num1 &lt;&lt;endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Operator: n5 = n4 + num2 = &quot;</span> &lt;&lt; n5.num2 &lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-5-2-左移运算符重载\"><a href=\"#4-5-2-左移运算符重载\" class=\"headerlink\" title=\"4.5.2 左移运算符重载\"></a>4.5.2 左移运算符重载</h5><ul>\n<li><p>作用：输出自定义的数据类型</p>\n</li>\n<li><p>左移运算符重载 最好在声明为全局函数</p>\n</li>\n<li><p>配合友元使用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/4/29.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;c, Person &amp;p);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(string name, <span class=\"type\">int</span> age);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Person::<span class=\"built_in\">Person</span>(string newName, <span class=\"type\">int</span> newAge)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    name = newName;</span><br><span class=\"line\">    age = newAge;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;c, Person &amp;p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Person Name: &quot;</span> &lt;&lt; p.name &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Person Age: &quot;</span> &lt;&lt; p.age &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(<span class=\"string\">&quot;FHang&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; p &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-5-3-递增运算符重载\"><a href=\"#4-5-3-递增运算符重载\" class=\"headerlink\" title=\"4.5.3 递增运算符重载\"></a>4.5.3 递增运算符重载</h5><ul>\n<li><p>需要配合 全局左移运算符 重载</p>\n</li>\n<li><p>配合使用 友元</p>\n</li>\n<li><p>前置重载 返回引用</p>\n</li>\n<li><p>后置重载 返回类内值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/6/20.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyInt</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;c, MyInt myInt);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> my_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyInt</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        my_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载 前置 ++ 运算符</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回引用的目的是 仅对当前的对象进行计算，若是返回对象，则一次计算后，生成另一个新对象</span></span><br><span class=\"line\">    MyInt &amp;<span class=\"keyword\">operator</span>++()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        my_num++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载 后置 ++ 运算符</span></span><br><span class=\"line\">    <span class=\"comment\">// MyInt &amp;operator++(int) =&gt; int 是 占位参数，告诉编译器，用于区分，前后置重载</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处 返回值 不返回自身引用，该函数内 自身的引用指向的值 是临时变量，一次操作后，被回收，若是连续多次使用 后置 ++，便是访问NULL，非法操作</span></span><br><span class=\"line\">    MyInt <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MyInt tempInt = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        my_num++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tempInt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局重载 左移运算符</span></span><br><span class=\"line\">ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;c, MyInt myInt)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; myInt.my_num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt;---------demo1-----------&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    MyInt myInt;</span><br><span class=\"line\">    cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt;---------demo2-----------&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    MyInt myInt;</span><br><span class=\"line\">    cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; ++myInt &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; ++(++myInt) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; myInt++ &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-5-4-递减运算符重载\"><a href=\"#4-5-4-递减运算符重载\" class=\"headerlink\" title=\"4.5.4 递减运算符重载\"></a>4.5.4 递减运算符重载</h5><ul>\n<li><p>基本情况 同 递增运算符重载</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/6/20.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyInt</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;c, MyInt myInt);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> my_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyInt</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        my_num = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重置 前置 -- 返回引用</span></span><br><span class=\"line\">    MyInt &amp;<span class=\"keyword\">operator</span>--()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        my_num--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重置 后置 -- 返回值</span></span><br><span class=\"line\">    MyInt <span class=\"keyword\">operator</span>--(<span class=\"type\">int</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MyInt tempInt = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        my_num--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tempInt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局重载 左移运算符</span></span><br><span class=\"line\">ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;c, MyInt myInt)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; myInt.my_num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt;---------demo1-----------&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    MyInt myInt;</span><br><span class=\"line\">    cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt;---------demo2-----------&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    MyInt myInt;</span><br><span class=\"line\">    cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; --myInt &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; --(--myInt) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; myInt-- &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-5-5-赋值运算符重载\"><a href=\"#4-5-5-赋值运算符重载\" class=\"headerlink\" title=\"4.5.5 赋值运算符重载\"></a>4.5.5 赋值运算符重载</h5><ul>\n<li><p>C++ 编译器至少给一个类添加4个函数</p>\n<ol>\n<li>默认构造函数（无参，函数体为空）</li>\n<li>默认析构函数（无参，函数体为空）</li>\n<li>默认拷贝构造函数，对属性值进行值拷贝</li>\n<li>赋值运算符 operator&#x3D;，对属性值进行值拷贝</li>\n</ol>\n</li>\n<li><p>如果类中有属性指向堆区，做赋值操作也会出现深浅拷贝问题</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/6/20.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> *my_Age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"type\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        my_Age = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (my_Age != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> my_Age;</span><br><span class=\"line\">            my_Age = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载 赋值运算符 让每一个对象 都各自对应一块堆区，避免浅拷贝带来的多个对象指向同一堆区，在析构函数的作用下，重复释放堆区</span></span><br><span class=\"line\">    Person &amp;<span class=\"keyword\">operator</span>=(Person &amp;person)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 编译器 默认 浅拷贝</span></span><br><span class=\"line\">        <span class=\"comment\">// my_Age = person.my_Age;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 1. 在 p2 = p1 中，p2在堆区中已有属性值，所以在进行深拷贝之前，先释放 p2 堆区</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (my_Age != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> my_Age;</span><br><span class=\"line\">            my_Age = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 进行 深拷贝</span></span><br><span class=\"line\">        my_Age = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(*person.my_Age);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该 赋值操作 为 浅拷贝</span></span><br><span class=\"line\">    p2 = p1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 浅拷贝时 堆区 my_Age 占有 的内存 被析构函数 重复释放</span></span><br><span class=\"line\">    cout &lt;&lt; *p1.my_Age &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; *p2.my_Age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"number\">36</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    p3 = p2 = p1;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; *p1.my_Age &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; *p2.my_Age &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; *p3.my_Age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// demo1();</span></span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-5-6-关系运算符重载\"><a href=\"#4-5-6-关系运算符重载\" class=\"headerlink\" title=\"4.5.6 关系运算符重载\"></a>4.5.6 关系运算符重载</h5><ul>\n<li><p>让自定义的两个对象类型进行比较操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/6/20.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string my_Name;</span><br><span class=\"line\">    <span class=\"type\">int</span> my_Age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(string name, <span class=\"type\">int</span> age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        my_Name = std::<span class=\"built_in\">move</span>(name);</span><br><span class=\"line\">        my_Age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载 关系运算符 返回值类型可以为：int类型 0/1；或者 bool类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 此次 重载的关系运算符为 ==，其他例如：!=, &lt;, &gt; ...同理</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"keyword\">operator</span>==(Person &amp;person) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;my_Name == person.my_Name &amp;&amp; <span class=\"keyword\">this</span>-&gt;my_Age == person.my_Age)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">&quot;FH&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">&quot;HF&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 此处 的 p1 == p2 是 p1.operator==(p2), 返回一个 bool类型 或者 0/1的int类型，进行if语句判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1 == p2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;P1 = P2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;P1 != P2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 此次 得到的返回值为 int类型的 0/1，所以亦可采用 switch语句来xie</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (p1 == p2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;P1 != P2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;P1 = P2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-5-7-函数调用运算符重载\"><a href=\"#4-5-7-函数调用运算符重载\" class=\"headerlink\" title=\"4.5.7 函数调用运算符重载\"></a>4.5.7 函数调用运算符重载</h5><ul>\n<li><p>函数调用运算符（）也可重载</p>\n</li>\n<li><p>重载后使用的方式，类似函数的调用，被称为 “仿函数”</p>\n</li>\n<li><p>仿函数 的写法灵活，没有固定写法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/6/20.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FPrint</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;text)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; text &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FAdd</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; num1 + num2 &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FPrint fPrint;</span><br><span class=\"line\">    <span class=\"built_in\">fPrint</span>(<span class=\"string\">&quot;Hello World !&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FAdd fAdd;</span><br><span class=\"line\">    <span class=\"built_in\">fAdd</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 匿名函数对象</span></span><br><span class=\"line\">    <span class=\"built_in\">FAdd</span>()(<span class=\"number\">20</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"4-6-继承\"><a href=\"#4-6-继承\" class=\"headerlink\" title=\"4.6 继承\"></a>4.6 继承</h4><h5 id=\"4-6-1-继承的基本使用\"><a href=\"#4-6-1-继承的基本使用\" class=\"headerlink\" title=\"4.6.1 继承的基本使用\"></a>4.6.1 继承的基本使用</h5><ul>\n<li><p>继承的作用：减少编写重复的代码</p>\n</li>\n<li><p>继承的语法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> 子类 : 继承方式 父类 </span><br><span class=\"line\"><span class=\"number\">1.</span> 子类 也叫 派生类 （derived <span class=\"keyword\">class</span>）</span><br><span class=\"line\"><span class=\"number\">2.</span> 父类 也叫 基类 (base <span class=\"keyword\">class</span>)</span><br><span class=\"line\"><span class=\"number\">3.</span> 继承方式：<span class=\"keyword\">public</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>继承的演示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/6/22.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 公共页面 是 其子类页面 公用拥有的属性</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasePage</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pageHeader</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; -首页 公开课 登陆 注册 (公共)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pageLeft</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; -Java C# C/C++ Php Golang (公共)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pageFoot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; -帮助中心 交流合作 友链 (公共)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类页面 继承 公共页面的属性 同时也可自定义 一部分属性内容</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JavaPage</span> : <span class=\"keyword\">public</span> BasePage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">JavaPage</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt;&lt;-- Java Web Page --&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ~<span class=\"built_in\">JavaPage</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pageBody</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; -Java_demo1 Java_demo2 Java_demo3 (Java)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类页面 继承 公共页面的属性 同时也可自定义 一部分属性内容</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CPP</span> : <span class=\"keyword\">public</span> BasePage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CPP</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt;&lt;-- C/C++ Web Page --&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ~<span class=\"built_in\">CPP</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pageBody</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; -C/C++_demo1 C/C++_demo2 C/C++_demo3 (C/C++)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">java_demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    JavaPage javaPage;</span><br><span class=\"line\">    javaPage.<span class=\"built_in\">pageHeader</span>();</span><br><span class=\"line\">    javaPage.<span class=\"built_in\">pageLeft</span>();</span><br><span class=\"line\">    javaPage.<span class=\"built_in\">pageBody</span>();</span><br><span class=\"line\">    javaPage.<span class=\"built_in\">pageFoot</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cpp_demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CPP cpp;</span><br><span class=\"line\">    cpp.<span class=\"built_in\">pageHeader</span>();</span><br><span class=\"line\">    cpp.<span class=\"built_in\">pageLeft</span>();</span><br><span class=\"line\">    cpp.<span class=\"built_in\">pageBody</span>();</span><br><span class=\"line\">    cpp.<span class=\"built_in\">pageFoot</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">java_demo</span>();</span><br><span class=\"line\">    <span class=\"built_in\">cpp_demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-6-2-继承的方式\"><a href=\"#4-6-2-继承的方式\" class=\"headerlink\" title=\"4.6.2 继承的方式\"></a>4.6.2 继承的方式</h5><ul>\n<li><p>继承语法: <code>class 子类 : 继承方式 父类</code></p>\n</li>\n<li><p>继承方式：</p>\n<ol>\n<li>公共继承：public</li>\n<li>保护继承：protected</li>\n<li>私有继承：private</li>\n</ol>\n</li>\n<li><p>继承方式演示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类中的 private 可以被 子类  任何继承方式 继承；但 ！ 子类 无法 访问 和 使用</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Father</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Father</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// public继承方式下：Father类中的 Public 和 Protected 的成员变量，在子类中 无改动；</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">protected</span> Father</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// protected继承方式下：Father类中的 Public 和 Protected 的成员变量，在子类中 全为 protected</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">private</span> Father</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// private继承方式下：Father类中的 Public 和 Protected 的成员变量，在子类中 全为 private</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 总结：</span></span><br><span class=\"line\"><span class=\"comment\">// 父类的 private 可以被 任何 继承方式 继承；但 ！ 子类 无法 访问 和 使用</span></span><br><span class=\"line\"><span class=\"comment\">// 子类通过某个 继承方式 继承 父类 后，父类中的 public，protected 中的成员变量 在子类中 以某种继承方式出现；</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-6-3-继承中的对象模型\"><a href=\"#4-6-3-继承中的对象模型\" class=\"headerlink\" title=\"4.6.3 继承中的对象模型\"></a>4.6.3 继承中的对象模型</h5><h6 id=\"4-6-3-1-验证子类模型\"><a href=\"#4-6-3-1-验证子类模型\" class=\"headerlink\" title=\"4.6.3.1 验证子类模型\"></a>4.6.3.1 验证子类模型</h6><ul>\n<li><p>父类中的所有成员变量(非静态)，无论是什么权限保护的成员，都会被子类继承，但子类无法访问和使用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/6/22.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> base_A;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> base_B;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> base_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived_1</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> derived_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived_1 derived1&#123;&#125;;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sizeof</span>(derived1) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h6 id=\"4-6-3-2-Developer-Powershell-VS\"><a href=\"#4-6-3-2-Developer-Powershell-VS\" class=\"headerlink\" title=\"4.6.3.2 Developer Powershell - VS\"></a>4.6.3.2 Developer Powershell - VS</h6><ul>\n<li><p>Visual Studio 提供的工具</p>\n</li>\n<li><p>使用方式：</p>\n<ol>\n<li>首先找到上面的案例代码的所在文件位置</li>\n<li>打开 Visual Studio 提供的 Developer Powershell</li>\n<li>将工作路径切换到案例代码的所在文件路径</li>\n<li>通过开发命令，查看案例代码中，子类对象的结构</li>\n</ol>\n</li>\n<li><p>使用步骤：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换路径 和 查看路径下 是否存在 案例代码 cpp 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">**********************************************************************</span><br><span class=\"line\">** Visual Studio <span class=\"number\">2019</span> Developer PowerShell v16.<span class=\"number\">9.4</span></span><br><span class=\"line\">** Copyright (c) <span class=\"number\">2021</span> Microsoft Corporation</span><br><span class=\"line\">**********************************************************************</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\Users\\Admin\\source\\repos&gt; D:</span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\DevelopmentTool\\VisualStudio\\IDE&gt; <span class=\"built_in\">cd</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9</span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9&gt; <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    目录: D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\"><span class=\"literal\">----</span>                 <span class=\"literal\">-------------</span>         <span class=\"literal\">------</span> <span class=\"literal\">----</span></span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">22</span>     <span class=\"number\">15</span>:<span class=\"number\">09</span>           <span class=\"number\">1515</span> Inherit_Base.cpp</span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">22</span>     <span class=\"number\">15</span>:<span class=\"number\">42</span>            <span class=\"number\">397</span> Inherit_ObjectModel.cpp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过开发命令，查看案例代码中，子类对象的结构</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9&gt; cl /d1 reportSingleClassLayoutDerived_1 <span class=\"string\">&quot;.\\Inherit_ObjectModel.cpp&quot;</span></span><br><span class=\"line\">用于 x86 的 Microsoft (<span class=\"built_in\">R</span>) C/C++ 优化编译器 <span class=\"number\">19.28</span>.<span class=\"number\">29914</span> 版</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">Inherit_ObjectModel.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived_1</span> <span class=\"title\">size</span>(16): # 此处可以看到 子类<span class=\"title\">Derived_1</span>对象的大小 和 之前的案例代码的打印结果一致</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Base</span>) # 子类<span class=\"title\">Derived_1</span>完全继承父类中所有成员 中的 <span class=\"title\">base_A</span> <span class=\"title\">base_B</span>  <span class=\"title\">base_C</span></span></span><br><span class=\"line\"><span class=\"class\"> 0      | | <span class=\"title\">base_A</span></span></span><br><span class=\"line\"><span class=\"class\"> 4      | | <span class=\"title\">base_B</span></span></span><br><span class=\"line\"><span class=\"class\"> 8      | | <span class=\"title\">base_C</span></span></span><br><span class=\"line\"><span class=\"class\">        | +---</span></span><br><span class=\"line\"><span class=\"class\">12      | <span class=\"title\">derived_A</span> # 同时 子类<span class=\"title\">Derived_1</span> 自身的成员也在 <span class=\"title\">derived_A</span></span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"># 总结：子类 <span class=\"title\">Derived_1</span>中 四个<span class=\"title\">int</span>类型的成员变量，占内存大小为16字节</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用到的指令</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换盘符 到 案例代码 所在 的 盘</span></span><br><span class=\"line\">D:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到具体的路径地址</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看路径下 的 案例代码文件 Inherit_ObjectModel.cpp</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定 报告单个类的布局 ：子类Deriverd_1</span></span><br><span class=\"line\"><span class=\"comment\"># cl /d1 reportSingleClassLayout需要查看的类 &quot;类所在的具体文件&quot;</span></span><br><span class=\"line\">cl /d1 reportSingleClassLayoutDerived_1 <span class=\"string\">&quot;.\\Inherit_ObjectModel.cpp&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-6-4-继承中构造和析构顺序\"><a href=\"#4-6-4-继承中构造和析构顺序\" class=\"headerlink\" title=\"4.6.4 继承中构造和析构顺序\"></a>4.6.4 继承中构造和析构顺序</h5><ul>\n<li><p>子类继承父类之后，当创建子类对象时，也会调用父类的构造和析构函数</p>\n</li>\n<li><p>案例验证，子类和父类的构造和析构函数的调用先后顺序</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/6/22.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base Constructor Transfer&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Base</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base Destructor Transfer&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Derived</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived Constructor Transfer&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Derived</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived Destructor Transfer&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived derived;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 案例结果</span></span><br><span class=\"line\">D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\cmake<span class=\"literal\">-build-debug</span>\\Code9_3.exe</span><br><span class=\"line\">Base Constructor Transfer</span><br><span class=\"line\">Derived Constructor Transfer</span><br><span class=\"line\">Derived Destructor Transfer</span><br><span class=\"line\">Base Destructor Transfer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由 案例结果 可以 看出</p>\n</li>\n<li><p>当创建子类时，子类和父类 的 构造和析构函数的调用 顺序</p>\n<ol>\n<li>子类构造</li>\n<li>父类构造</li>\n<li>父类析构</li>\n<li>子类析构</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"4-6-5-继承同名成员处理方式\"><a href=\"#4-6-5-继承同名成员处理方式\" class=\"headerlink\" title=\"4.6.5 继承同名成员处理方式\"></a>4.6.5 继承同名成员处理方式</h5><ul>\n<li><p>继承时的问题：当子类和父类出现同名成员，如何通过子类对象，访问子类或父类的同名数据</p>\n<ol>\n<li>访问子类同名成员，直接访问</li>\n<li>访问父类同名成员，添加作用域</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/6/22.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Base</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        num = <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FPrint</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base Print&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FPrint</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base Print (int n) : Overload Function&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Derived</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        num = <span class=\"number\">200</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FPrint</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived Print&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived derived;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Derived num = &quot;</span> &lt;&lt; derived.num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Base num = &quot;</span> &lt;&lt; derived.Base::num &lt;&lt; endl;</span><br><span class=\"line\">    derived.<span class=\"built_in\">FPrint</span>();</span><br><span class=\"line\">    derived.Base::<span class=\"built_in\">FPrint</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当父类和子类中，存在同名成员时，会默认隐藏父类的成员，所以可以直接调用子类成员，而父类成员需要 子类调用父类，在父类作用域下 调用</span></span><br><span class=\"line\">    <span class=\"comment\">// derived.FPrint(10);  // 父类被隐藏，所以直接传参也无法找到 重载的函数，因为子类没有 FPrint的重载函数</span></span><br><span class=\"line\">    derived.Base::<span class=\"built_in\">FPrint</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 加上 父类作用域后 可调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方法：</p>\n<ol>\n<li>子类对象可以直接访问到子类同名成员</li>\n<li>子类对象加上作用域可以访问到父类同名成员</li>\n<li>当子类和父类拥有同名的成员函数，子类会隐藏父类同名成员函数，子类加作用域可以访问到父类中同名函数</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"4-6-6-继承同名静态成员处理方式\"><a href=\"#4-6-6-继承同名静态成员处理方式\" class=\"headerlink\" title=\"4.6.6 继承同名静态成员处理方式\"></a>4.6.6 继承同名静态成员处理方式</h5><ul>\n<li><p>问题：继承中，同名的静态成员在子类对象上如何访问</p>\n</li>\n<li><p>静态成员和非静态成员出现同名，处理方式一致</p>\n<ol>\n<li>访问子类同名成员，直接访问</li>\n<li>访问父类同名成员，添加作用域</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 10:23</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 基类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base-Static Func&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Base</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> Base::num = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived-Static Func&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> Derived::num = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同名静态成员属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived derived;</span><br><span class=\"line\">    <span class=\"comment\">// 通过对象访问</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;通过对象访问&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Derived Num = &quot;</span> &lt;&lt; derived.num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Base Num = &quot;</span> &lt;&lt; derived.Base::num &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过类目访问</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;通过类目访问&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Derived Num = &quot;</span> &lt;&lt; Derived::num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Base Num = &quot;</span> &lt;&lt; Base::num &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第一个 :: 表示使用类名访问；第二个 :: 表示父类作用域下</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Base Num = &quot;</span> &lt;&lt; Derived::Base::num &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同名静态成员变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived derived;</span><br><span class=\"line\">    <span class=\"comment\">// 通过对象访问</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;通过对象访问&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    derived.<span class=\"built_in\">func</span>();</span><br><span class=\"line\">    derived.Base::<span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过类目访问</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;通过类目访问&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    Derived::<span class=\"built_in\">func</span>();</span><br><span class=\"line\">    Derived::Base::<span class=\"built_in\">func</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当父类和子类中，存在同名成员变量时，会默认隐藏父类的成员变量，所以可以直接调用子类成员，而父类成员需要 子类调用父类，在父类作用域下 调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：同名静态成员处理方式和非同名静态的处理方式一样</p>\n</li>\n<li><p>区别：同名静态成员处理：</p>\n<ol>\n<li>通过对象调用</li>\n<li>通过类目调用</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"4-6-7-多继承语法\"><a href=\"#4-6-7-多继承语法\" class=\"headerlink\" title=\"4.6.7 多继承语法\"></a>4.6.7 多继承语法</h5><ul>\n<li><p>C++ 允许一个类继承多个类</p>\n</li>\n<li><p>语法：class 子类 : 继承方式 父类1, 继承方式 父类2…</p>\n</li>\n<li><p>多继承可能会引发父类中同名成员出现，需要加作用域区分使用</p>\n</li>\n<li><p>实际开发中，建议不用，不易于维护</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 11:03</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Base1</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        num = <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Base2</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        num = <span class=\"number\">200</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base1, <span class=\"keyword\">public</span> Base2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Derived</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        num = <span class=\"number\">300</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived derived;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Sizeof derived = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(derived) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Derived Num = &quot;</span> &lt;&lt; derived.num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Base1 Num = &quot;</span> &lt;&lt; derived.Base1::num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Base2 Num = &quot;</span> &lt;&lt; derived.Base2::num &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此处也使用了 Developer PowerShell 查看了 Derived 类的结构</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**********************************************************************</span><br><span class=\"line\">** Visual Studio <span class=\"number\">2019</span> Developer PowerShell v16.<span class=\"number\">9.4</span></span><br><span class=\"line\">** Copyright (c) <span class=\"number\">2021</span> Microsoft Corporation</span><br><span class=\"line\">**********************************************************************</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\Users\\Admin\\source\\repos&gt; D:</span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\DevelopmentTool\\VisualStudio\\IDE&gt; <span class=\"built_in\">cd</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo</span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo&gt; <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    目录: D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\"><span class=\"literal\">----</span>                 <span class=\"literal\">-------------</span>         <span class=\"literal\">------</span> <span class=\"literal\">----</span></span><br><span class=\"line\">d<span class=\"literal\">-----</span>          <span class=\"number\">2021</span>/<span class=\"number\">5</span>/<span class=\"number\">4</span>      <span class=\"number\">9</span>:<span class=\"number\">34</span>                .idea</span><br><span class=\"line\">d<span class=\"literal\">-----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">24</span>     <span class=\"number\">11</span>:<span class=\"number\">12</span>                cmake<span class=\"literal\">-build-debug</span></span><br><span class=\"line\">d<span class=\"literal\">-----</span>          <span class=\"number\">2021</span>/<span class=\"number\">5</span>/<span class=\"number\">4</span>      <span class=\"number\">9</span>:<span class=\"number\">34</span>                Code1</span><br><span class=\"line\">d<span class=\"literal\">-----</span>          <span class=\"number\">2021</span>/<span class=\"number\">5</span>/<span class=\"number\">4</span>      <span class=\"number\">9</span>:<span class=\"number\">34</span>                Code2</span><br><span class=\"line\">d<span class=\"literal\">-----</span>          <span class=\"number\">2021</span>/<span class=\"number\">5</span>/<span class=\"number\">4</span>      <span class=\"number\">9</span>:<span class=\"number\">34</span>                Code3</span><br><span class=\"line\">d<span class=\"literal\">-----</span>          <span class=\"number\">2021</span>/<span class=\"number\">5</span>/<span class=\"number\">4</span>      <span class=\"number\">9</span>:<span class=\"number\">34</span>                Code4</span><br><span class=\"line\">d<span class=\"literal\">-----</span>          <span class=\"number\">2021</span>/<span class=\"number\">5</span>/<span class=\"number\">4</span>      <span class=\"number\">9</span>:<span class=\"number\">34</span>                Code4_CirclePoint</span><br><span class=\"line\">d<span class=\"literal\">-----</span>          <span class=\"number\">2021</span>/<span class=\"number\">5</span>/<span class=\"number\">4</span>      <span class=\"number\">9</span>:<span class=\"number\">34</span>                Code5</span><br><span class=\"line\">d<span class=\"literal\">-----</span>          <span class=\"number\">2021</span>/<span class=\"number\">5</span>/<span class=\"number\">4</span>      <span class=\"number\">9</span>:<span class=\"number\">34</span>                Code6</span><br><span class=\"line\">d<span class=\"literal\">-----</span>          <span class=\"number\">2021</span>/<span class=\"number\">5</span>/<span class=\"number\">4</span>      <span class=\"number\">9</span>:<span class=\"number\">34</span>                Code7</span><br><span class=\"line\">d<span class=\"literal\">-----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">20</span>     <span class=\"number\">21</span>:<span class=\"number\">27</span>                Code8</span><br><span class=\"line\">d<span class=\"literal\">-----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">24</span>     <span class=\"number\">11</span>:<span class=\"number\">11</span>                Code9</span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">2</span>/<span class=\"number\">21</span>     <span class=\"number\">19</span>:<span class=\"number\">24</span>            <span class=\"number\">174</span> .gitignore</span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">24</span>     <span class=\"number\">11</span>:<span class=\"number\">12</span>           <span class=\"number\">2930</span> CMakeLists.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo&gt; <span class=\"built_in\">cd</span> Code9</span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9&gt; <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    目录: D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\"><span class=\"literal\">----</span>                 <span class=\"literal\">-------------</span>         <span class=\"literal\">------</span> <span class=\"literal\">----</span></span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">22</span>     <span class=\"number\">15</span>:<span class=\"number\">09</span>           <span class=\"number\">1515</span> Inherit_Base.cpp</span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">22</span>     <span class=\"number\">16</span>:<span class=\"number\">36</span>            <span class=\"number\">590</span> Inherit_ConstructorDestructorTransferOrder.cpp</span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">22</span>     <span class=\"number\">17</span>:<span class=\"number\">32</span>           <span class=\"number\">1216</span> Inherit_DealWithSameName.cpp</span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">24</span>     <span class=\"number\">10</span>:<span class=\"number\">49</span>           <span class=\"number\">1431</span> Inherit_DealWithSameNameObject.cpp</span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">24</span>     <span class=\"number\">11</span>:<span class=\"number\">11</span>            <span class=\"number\">126</span> Inherit_DiamondInheritance.cpp</span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">24</span>     <span class=\"number\">11</span>:<span class=\"number\">10</span>            <span class=\"number\">730</span> Inherit_MoreInherit.cpp</span><br><span class=\"line\"><span class=\"literal\">-a----</span>         <span class=\"number\">2021</span>/<span class=\"number\">6</span>/<span class=\"number\">22</span>     <span class=\"number\">16</span>:<span class=\"number\">01</span>            <span class=\"number\">395</span> Inherit_ObjectModel.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9&gt; cl /d1 reportSingleClassLayoutDerived <span class=\"string\">&quot;.\\Inherit_MoreInherit.cpp&quot;</span></span><br><span class=\"line\">用于 x86 的 Microsoft (<span class=\"built_in\">R</span>) C/C++ 优化编译器 <span class=\"number\">19.28</span>.<span class=\"number\">29914</span> 版</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">Inherit_MoreInherit.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span>   <span class=\"title\">size</span>(12):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Base1</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 0      | | <span class=\"title\">num</span></span></span><br><span class=\"line\"><span class=\"class\">        | +---</span></span><br><span class=\"line\"><span class=\"class\"> 4      | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Base2</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 4      | | <span class=\"title\">num</span></span></span><br><span class=\"line\"><span class=\"class\">        | +---</span></span><br><span class=\"line\"><span class=\"class\"> 8      | <span class=\"title\">num</span></span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-6-8-菱形继承\"><a href=\"#4-6-8-菱形继承\" class=\"headerlink\" title=\"4.6.8 菱形继承\"></a>4.6.8 菱形继承</h5><ul>\n<li><p>概念：</p>\n<ol>\n<li>两个派生类继承同一个基类</li>\n<li>又有某一个类同时继承了两个派生类</li>\n</ol>\n</li>\n<li><p>问题解决：</p>\n<ol>\n<li><p>默认情况下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 11:11</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        age = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tiger</span> : <span class=\"keyword\">public</span> Animal&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lion</span> : <span class=\"keyword\">public</span> Animal&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LionTiger</span> : <span class=\"keyword\">public</span> Tiger, <span class=\"keyword\">public</span> Lion&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LionTiger lionTiger;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 菱形继承，两个父类拥有相同的数据，通过作用域区分，同时造成资源浪费，通过 虚继承 解决问题</span></span><br><span class=\"line\">    lionTiger.Tiger::age = <span class=\"number\">20</span>;</span><br><span class=\"line\">    lionTiger.Lion::age = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Tiger Age = &quot;</span> &lt;&lt; lionTiger.Tiger::age &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Lion Age = &quot;</span> &lt;&lt; lionTiger.Lion::age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\cmake-build-debug\\Code9_7.exe</span><br><span class=\"line\"><span class=\"comment\">// 此时，可看出，LionTiger同时继承了两个成员变量，在作用域下可单独赋值</span></span><br><span class=\"line\">Tiger Age = <span class=\"number\">20</span></span><br><span class=\"line\">Lion Age = <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用 Developer Powershell 工具， 查看 LionTriger 类 的结构</span></span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9&gt; cl /d1 reportSingleClassLayoutLionTiger <span class=\"string\">&quot;.\\Inherit_DiamondInheritance.cpp&quot;</span></span><br><span class=\"line\">用于 x86 的 Microsoft (<span class=\"built_in\">R</span>) C/C++ 优化编译器 <span class=\"number\">19.28</span>.<span class=\"number\">29914</span> 版</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">Inherit_DiamondInheritance.cpp</span><br><span class=\"line\">.\\Inherit_DiamondInheritance.cpp(<span class=\"number\">1</span>): warning C4819: 该文件包含不能在当前代码页(<span class=\"number\">936</span>)中表示的字符。请将该文件保存为 Unicode 格式以 防止数据丢失</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LionTiger</span> <span class=\"title\">size</span>(8): # 可以看到，<span class=\"title\">LionTiger</span> 继承了两个 重复的成员</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Tiger</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 0      | | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Animal</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 0      | | | <span class=\"title\">age</span></span></span><br><span class=\"line\"><span class=\"class\">        | | +---</span></span><br><span class=\"line\"><span class=\"class\">        | +---</span></span><br><span class=\"line\"><span class=\"class\"> 4      | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Lion</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 4      | | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Animal</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 4      | | | <span class=\"title\">age</span></span></span><br><span class=\"line\"><span class=\"class\">        | | +---</span></span><br><span class=\"line\"><span class=\"class\">        | +---</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用虚继承解决问题，关键字：virtual</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 11:11</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        age = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 利用 虚继承 解决菱形继承的问题</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 关键字 virtual ，两个派生类继承同一个父类时，两个派生类 可虚拟共享同一个 父类中继承来的成员，（继承了虚基类 Animal的age 的地址）</span></span><br><span class=\"line\"><span class=\"comment\">// Animal 类，称为 虚基类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tiger</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Animal&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lion</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Animal&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LionTiger</span> : <span class=\"keyword\">public</span> Tiger, <span class=\"keyword\">public</span> Lion&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LionTiger lionTiger;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 菱形继承，两个父类拥有相同的数据，通过作用域区分，同时造成资源浪费，通过 虚继承 解决问题</span></span><br><span class=\"line\">    lionTiger.Tiger::age = <span class=\"number\">20</span>;</span><br><span class=\"line\">    lionTiger.Lion::age = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Tiger Age = &quot;</span> &lt;&lt; lionTiger.Tiger::age &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Lion Age = &quot;</span> &lt;&lt; lionTiger.Lion::age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\cmake-build-debug\\Code9_7.exe</span><br><span class=\"line\"><span class=\"comment\">// 使用 虚继承 后，LionTiger 只继承了一个 成员变量</span></span><br><span class=\"line\">Tiger Age = <span class=\"number\">30</span></span><br><span class=\"line\">Lion Age = <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用 Developer Powershell 工具， 查看 LionTriger 类 的结构 (使用了 虚继承)</span></span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code9&gt; cl /d1 reportSingleClassLayoutLionTiger <span class=\"string\">&quot;.\\Inherit_DiamondInheritance.cpp&quot;</span></span><br><span class=\"line\">用于 x86 的 Microsoft (<span class=\"built_in\">R</span>) C/C++ 优化编译器 <span class=\"number\">19.28</span>.<span class=\"number\">29914</span> 版</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">Inherit_DiamondInheritance.cpp</span><br><span class=\"line\">.\\Inherit_DiamondInheritance.cpp(<span class=\"number\">1</span>): warning C4819: 该文件包含不能在当前代码页(<span class=\"number\">936</span>)中表示的字符。请将该文件保存为 Unicode 格式以 防止数据丢失</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LionTiger</span> <span class=\"title\">size</span>(12):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Tiger</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 0      | |</span> &#123;vbptr&#125; <span class=\"comment\"># 指向 LionTiger::$vbtable@Tiger@: </span></span><br><span class=\"line\">        | +<span class=\"literal\">---</span></span><br><span class=\"line\"> <span class=\"number\">4</span>      | +<span class=\"literal\">---</span> (base <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lion</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 4      | |</span> &#123;vbptr&#125; <span class=\"comment\"># 指向 LionTiger::$vbtable@Lion@:</span></span><br><span class=\"line\">        | +<span class=\"literal\">---</span></span><br><span class=\"line\">        +<span class=\"literal\">---</span></span><br><span class=\"line\">        +<span class=\"literal\">---</span> (virtual base Animal)</span><br><span class=\"line\"> <span class=\"number\">8</span>      | age</span><br><span class=\"line\">        +<span class=\"literal\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\">LionTiger::<span class=\"variable\">$vbtable</span>@Tiger<span class=\"selector-tag\">@</span>: <span class=\"comment\"># 偏移量 8，从类结构布局的开始 +8，刚好指向 virtual base Animal 的 成员变量 age</span></span><br><span class=\"line\"> <span class=\"number\">0</span>      | <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">1</span>      | <span class=\"number\">8</span> (LionTigerd(Tiger+<span class=\"number\">0</span>)Animal)</span><br><span class=\"line\"> </span><br><span class=\"line\">LionTiger::<span class=\"variable\">$vbtable</span>@Lion<span class=\"selector-tag\">@</span>: <span class=\"comment\"># 偏移量 4，从类结构布局的开始 +4，刚好指向 virtual base Animal 的 成员变量 age</span></span><br><span class=\"line\"> <span class=\"number\">0</span>      | <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">1</span>      | <span class=\"number\">4</span> (LionTigerd(Lion+<span class=\"number\">0</span>)Animal)</span><br><span class=\"line\">vbi:       <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">offset</span> <span class=\"title\">o</span>.<span class=\"title\">vbptr</span>  <span class=\"title\">o</span>.<span class=\"title\">vbte</span> <span class=\"title\">fVtorDisp</span></span></span><br><span class=\"line\"><span class=\"class\">          <span class=\"title\">Animal</span>       8       0       4 0</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">#  一些解释，上面的结构</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">vbptr</span> -&gt; <span class=\"title\">v</span>=<span class=\"title\">virtual</span>, <span class=\"title\">b</span>=<span class=\"title\">base</span>, <span class=\"title\">ptr</span>=<span class=\"title\">pointer</span>; <span class=\"title\">vbptr</span> 指向 <span class=\"title\">vbtable</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">vbtable</span> -&gt; <span class=\"title\">v</span>=<span class=\"title\">virtual</span>, <span class=\"title\">b</span>=<span class=\"title\">base</span>, <span class=\"title\">table</span></span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h4 id=\"4-7-多态\"><a href=\"#4-7-多态\" class=\"headerlink\" title=\"4.7 多态\"></a>4.7 多态</h4><h5 id=\"4-7-1-多态的基本概念\"><a href=\"#4-7-1-多态的基本概念\" class=\"headerlink\" title=\"4.7.1 多态的基本概念\"></a>4.7.1 多态的基本概念</h5><p>多态是C++面向对象的三大特性之一</p>\n<ul>\n<li><p>多态分为两类</p>\n<ol>\n<li>静态多态：函数重载 和 运算符重载 属于静态多态，复用函数名</li>\n<li>动态多态：派生类 和 虚函数 实现运行时，为多态</li>\n</ol>\n</li>\n<li><p>静态多态和动态多态的区别</p>\n<ol>\n<li>静态多态的函数地址早绑定 — 编译阶段确定函数地址</li>\n<li>动态多态的函数地址晚绑定 — 运行阶段确定函数地址</li>\n</ol>\n</li>\n<li><p>案例说明</p>\n<ol>\n<li><p>静态多态</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 14:56</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Animal Speaking&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> : <span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Cat Speaking&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该函数的地址是早绑定，编译阶段确定引用的 Animal类的对象地址，后面调用时，传入Cat对象，不改变结果（静态多态）</span></span><br><span class=\"line\"><span class=\"comment\">// 将基类Animal中的 函数 speak() 设为虚函数，运行时才确定地址，后面调用时，传入Cat对象，引用的便是Cat的对象地址（动态多态）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doSpeak</span><span class=\"params\">(Animal &amp;animal)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    animal.<span class=\"built_in\">speak</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Cat cat;</span><br><span class=\"line\">    <span class=\"built_in\">doSpeak</span>(cat);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 运行结果</span></span><br><span class=\"line\">D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\cmake-build-debug\\Code10_1.exe</span><br><span class=\"line\">Animal Speaking</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>动态多态</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 14:56</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 使用关键字 virtual，使得变成虚函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Animal Speaking&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> : <span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Cat Speaking&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> : <span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Dog Speaking&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该函数内传入引用对象调用的speak()函数的地址是早绑定，编译阶段确定引用的 Animal类的对象地址，后面调用时，传入Cat对象，不改变结果（静态多态）</span></span><br><span class=\"line\"><span class=\"comment\">// 将基类Animal中的 函数 speak() 设为虚函数，运行时才确定地址，后面调用时，传入Cat对象，引用的便是Cat的对象地址（动态多态）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doSpeak</span><span class=\"params\">(Animal &amp;animal)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// speak()早绑定时，默认是传入基类Animal的引用对象地址</span></span><br><span class=\"line\">    <span class=\"comment\">// speak()使用virtual后是晚绑定时，传入指定引用对象地址</span></span><br><span class=\"line\">    animal.<span class=\"built_in\">speak</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Cat cat;</span><br><span class=\"line\">    Dog dog;</span><br><span class=\"line\">    <span class=\"built_in\">doSpeak</span>(cat);</span><br><span class=\"line\">    <span class=\"built_in\">doSpeak</span>(dog);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 运行结果</span></span><br><span class=\"line\">D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\cmake-build-debug\\Code10_1.exe</span><br><span class=\"line\">Cat Speaking</span><br><span class=\"line\">Dog Speaking</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>动态多态的满足条件</p>\n<ol>\n<li>有继承关系</li>\n<li>子类重写父类的虚函数</li>\n<li>重写：函数返回值类型，函数名，参数列表，完全一致</li>\n</ol>\n</li>\n<li><p>动态多态的使用：父类的指针或引用，执行子类对象</p>\n</li>\n</ul>\n<h5 id=\"4-7-2-多态深入原理\"><a href=\"#4-7-2-多态深入原理\" class=\"headerlink\" title=\"4.7.2 多态深入原理\"></a>4.7.2 多态深入原理</h5><p>案例代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 14:56</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Animal Speaking&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> : <span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Cat Speaking&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> : <span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Dog Speaking&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doSpeak</span><span class=\"params\">(Animal &amp;animal)</span> <span class=\"comment\">// 此处 =&gt; Animal &amp;animal = cat</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    animal.<span class=\"built_in\">speak</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Cat cat;</span><br><span class=\"line\">    Dog dog;</span><br><span class=\"line\">    <span class=\"built_in\">doSpeak</span>(cat); </span><br><span class=\"line\">    <span class=\"built_in\">doSpeak</span>(dog);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>静态多态</p>\n<ul>\n<li>基类 Animal 中的 speak() 没有 virtual 前是早绑定，函数地址在类外，此时Animal类是空类，大小为1；</li>\n</ul>\n</li>\n<li><p>动态多态</p>\n<ul>\n<li><p>基类 Animal 中的 speak() 有 virtual 是晚绑定，函数地址在类内，此时Animal类不是空类，大小为4；</p>\n</li>\n<li><p>此时 虚函数speak()，在类内中是 vfptr &#x3D; virtualFunctionPointer ( 虚函数(表)指针 )，指向vftable (虚函数表)，函数地址入口是 &amp;Animal::speak;</p>\n</li>\n<li><p>子类Cat继承Animal后，默认情况下，Cat类完全继承了Animal类的属性；</p>\n</li>\n<li><p>但案例代码中，Cat类内实现了speak()的重写，此时函数地址入口是 &amp;Cat::speak;</p>\n</li>\n<li><p>子类中的虚函数表内部会替换成子类的虚函数地址；</p>\n</li>\n<li><p>此时，当父类的指针或引用指向子类对象时，发生多态；</p>\n</li>\n</ul>\n</li>\n<li><p>验证：Developer PowerShell</p>\n<ul>\n<li><p>静态多态</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基类Animal 的函数表</span></span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code10&gt; cl /d1 reportSingleClassLayoutAnimal <span class=\"string\">&quot;.\\Polymorphism_DeepUnderlying.cpp&quot;</span></span><br><span class=\"line\">用于 x86 的 Microsoft (<span class=\"built_in\">R</span>) C/C++ 优化编译器 <span class=\"number\">19.28</span>.<span class=\"number\">29914</span> 版</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">Polymorphism_DeepUnderlying.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>    <span class=\"title\">size</span>(1):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code10&gt; cl /d1 reportSingleClassLayoutCat <span class=\"string\">&quot;.\\Polymorphism_DeepUnderlying.cpp&quot;</span></span><br><span class=\"line\">用于 x86 的 Microsoft (<span class=\"built_in\">R</span>) C/C++ 优化编译器 <span class=\"number\">19.28</span>.<span class=\"number\">29914</span> 版</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">Polymorphism_DeepUnderlying.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">s__CatchableType</span> <span class=\"title\">size</span>(28):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | <span class=\"title\">properties</span></span></span><br><span class=\"line\"><span class=\"class\"> 4      | <span class=\"title\">pType</span></span></span><br><span class=\"line\"><span class=\"class\"> 8      | _<span class=\"title\">PMD</span> <span class=\"title\">thisDisplacement</span></span></span><br><span class=\"line\"><span class=\"class\">20      | <span class=\"title\">sizeOrOffset</span></span></span><br><span class=\"line\"><span class=\"class\">24      | <span class=\"title\">copyFunction</span></span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> _<span class=\"title\">s__CatchableTypeArray</span>    <span class=\"title\">size</span>(4):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | <span class=\"title\">nCatchableTypes</span></span></span><br><span class=\"line\"><span class=\"class\"> 4      | <span class=\"title\">arrayOfCatchableTypes</span></span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Cat</span>       <span class=\"title\">size</span>(1):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Animal</span>) #基类没有实现虚函数，为静态多态时，子类完全继承基类，即使子类重写了<span class=\"title\">speak</span>，也依然是默认的基类对象引用</span></span><br><span class=\"line\"><span class=\"class\">        | +---</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>动态多态</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基类Animal 的函数表</span></span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code10&gt; cl /d1 reportSingleClassLayoutAnimal <span class=\"string\">&quot;.\\Polymorphism_DeepUnderlying.cpp&quot;</span></span><br><span class=\"line\">用于 x86 的 Microsoft (<span class=\"built_in\">R</span>) C/C++ 优化编译器 <span class=\"number\">19.28</span>.<span class=\"number\">29914</span> 版</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">Polymorphism_DeepUnderlying.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>    <span class=\"title\">size</span>(4):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      |</span> &#123;vfptr&#125;</span><br><span class=\"line\">        +<span class=\"literal\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\">Animal::<span class=\"variable\">$vftable</span><span class=\"selector-tag\">@</span>:</span><br><span class=\"line\">        | &amp;Animal_meta</span><br><span class=\"line\">        |  <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0</span>      | &amp;Animal::speak</span><br><span class=\"line\"></span><br><span class=\"line\">Animal::speak this adjustor: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 子类Cat 没有发生重写时的 函数表</span></span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code10&gt; cl /d1 reportSingleClassLayoutCat <span class=\"string\">&quot;.\\Polymorphism_DeepUnderlying.cpp&quot;</span></span><br><span class=\"line\">用于 x86 的 Microsoft (<span class=\"built_in\">R</span>) C/C++ 优化编译器 <span class=\"number\">19.28</span>.<span class=\"number\">29914</span> 版</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">Polymorphism_DeepUnderlying.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">s__CatchableType</span> <span class=\"title\">size</span>(28):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | <span class=\"title\">properties</span></span></span><br><span class=\"line\"><span class=\"class\"> 4      | <span class=\"title\">pType</span></span></span><br><span class=\"line\"><span class=\"class\"> 8      | _<span class=\"title\">PMD</span> <span class=\"title\">thisDisplacement</span></span></span><br><span class=\"line\"><span class=\"class\">20      | <span class=\"title\">sizeOrOffset</span></span></span><br><span class=\"line\"><span class=\"class\">24      | <span class=\"title\">copyFunction</span></span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> _<span class=\"title\">s__CatchableTypeArray</span>    <span class=\"title\">size</span>(4):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | <span class=\"title\">nCatchableTypes</span></span></span><br><span class=\"line\"><span class=\"class\"> 4      | <span class=\"title\">arrayOfCatchableTypes</span></span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Cat</span>       <span class=\"title\">size</span>(4):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Animal</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 0      | |</span> &#123;vfptr&#125;</span><br><span class=\"line\">        | +<span class=\"literal\">---</span></span><br><span class=\"line\">        +<span class=\"literal\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Cat</span>::<span class=\"variable\">$vftable</span><span class=\"selector-tag\">@</span>:</span><br><span class=\"line\">        | &amp;Cat_meta</span><br><span class=\"line\">        |  <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0</span>      | &amp;Animal::speak <span class=\"comment\"># Cat内没有重写 speak 时，Cat类的函数指针指向的函数表是 Animal 的</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 子类Cat 发生重写时的 函数表</span></span><br><span class=\"line\"><span class=\"built_in\">PS</span> D:\\Learn\\Cpp\\<span class=\"number\">3</span>_Cpp_plus_Clion\\CodeDemo\\Code10&gt; cl /d1 reportSingleClassLayoutCat <span class=\"string\">&quot;.\\Polymorphism_DeepUnderlying.cpp&quot;</span></span><br><span class=\"line\">用于 x86 的 Microsoft (<span class=\"built_in\">R</span>) C/C++ 优化编译器 <span class=\"number\">19.28</span>.<span class=\"number\">29914</span> 版</span><br><span class=\"line\">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\">Polymorphism_DeepUnderlying.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">s__CatchableType</span> <span class=\"title\">size</span>(28):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | <span class=\"title\">properties</span></span></span><br><span class=\"line\"><span class=\"class\"> 4      | <span class=\"title\">pType</span></span></span><br><span class=\"line\"><span class=\"class\"> 8      | _<span class=\"title\">PMD</span> <span class=\"title\">thisDisplacement</span></span></span><br><span class=\"line\"><span class=\"class\">20      | <span class=\"title\">sizeOrOffset</span></span></span><br><span class=\"line\"><span class=\"class\">24      | <span class=\"title\">copyFunction</span></span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> _<span class=\"title\">s__CatchableTypeArray</span>    <span class=\"title\">size</span>(4):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | <span class=\"title\">nCatchableTypes</span></span></span><br><span class=\"line\"><span class=\"class\"> 4      | <span class=\"title\">arrayOfCatchableTypes</span></span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Cat</span>       <span class=\"title\">size</span>(4):</span></span><br><span class=\"line\"><span class=\"class\">        +---</span></span><br><span class=\"line\"><span class=\"class\"> 0      | +--- (<span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">Animal</span>)</span></span><br><span class=\"line\"><span class=\"class\"> 0      | |</span> &#123;vfptr&#125;</span><br><span class=\"line\">        | +<span class=\"literal\">---</span></span><br><span class=\"line\">        +<span class=\"literal\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Cat</span>::<span class=\"variable\">$vftable</span><span class=\"selector-tag\">@</span>:</span><br><span class=\"line\">        | &amp;Cat_meta</span><br><span class=\"line\">        |  <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0</span>      | &amp;<span class=\"built_in\">Cat</span>::speak  <span class=\"comment\"># Cat内重写 speak 后，Cat类的函数指针指向的函数表是 Cat 的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Cat</span>::speak this adjustor: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"4-7-3-多态案例-计算器\"><a href=\"#4-7-3-多态案例-计算器\" class=\"headerlink\" title=\"4.7.3 多态案例-计算器\"></a>4.7.3 多态案例-计算器</h5><ul>\n<li><p>案例描述：分别使用普通的方法和多态，设计实现两个操作数进行运算的计算器类</p>\n</li>\n<li><p>多态的优点：</p>\n<ul>\n<li>代码组织结构清晰</li>\n<li>可读性强</li>\n<li>利于前期和后期的扩展和维护</li>\n</ul>\n</li>\n<li><p>示例：普通实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 16:39</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Calculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> num1;</span><br><span class=\"line\">    <span class=\"type\">int</span> num2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">getResult</span><span class=\"params\">(string f_operator)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f_operator == <span class=\"string\">&quot;+&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f_operator == <span class=\"string\">&quot;-&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f_operator == <span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Calculator calculator&#123;&#125;;</span><br><span class=\"line\">    calculator.num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">    calculator.num2 = <span class=\"number\">15</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; calculator.num1 &lt;&lt; <span class=\"string\">&quot; + &quot;</span> &lt;&lt; calculator.num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; calculator.<span class=\"built_in\">getResult</span>(<span class=\"string\">&quot;+&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; calculator.num1 &lt;&lt; <span class=\"string\">&quot; - &quot;</span> &lt;&lt; calculator.num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; calculator.<span class=\"built_in\">getResult</span>(<span class=\"string\">&quot;-&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; calculator.num1 &lt;&lt; <span class=\"string\">&quot; * &quot;</span> &lt;&lt; calculator.num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; calculator.<span class=\"built_in\">getResult</span>(<span class=\"string\">&quot;*&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多态实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 18:46</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AbstractCalculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> num1;</span><br><span class=\"line\">    <span class=\"type\">int</span> num2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">float</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SumCalculator</span> : <span class=\"keyword\">public</span> AbstractCalculator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">float</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">float</span> (num1 + num2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubCalculator</span> : <span class=\"keyword\">public</span> AbstractCalculator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">float</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">float</span> (num1 - num2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MulCalculator</span> : <span class=\"keyword\">public</span> AbstractCalculator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">float</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">float</span> (num1 * num2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 父类指针或引用指向子类执行</span></span><br><span class=\"line\">    AbstractCalculator *abs;</span><br><span class=\"line\">    <span class=\"comment\">// Sum</span></span><br><span class=\"line\">    abs = <span class=\"keyword\">new</span> SumCalculator;</span><br><span class=\"line\">    abs-&gt;num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">    abs-&gt;num2 = <span class=\"number\">15</span>;</span><br><span class=\"line\">    cout &lt;&lt; abs-&gt;num1 &lt;&lt; <span class=\"string\">&quot; + &quot;</span> &lt;&lt; abs-&gt;num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; abs-&gt;<span class=\"built_in\">getResult</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> abs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Sub</span></span><br><span class=\"line\">    abs = <span class=\"keyword\">new</span> SubCalculator;</span><br><span class=\"line\">    abs-&gt;num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">    abs-&gt;num2 = <span class=\"number\">15</span>;</span><br><span class=\"line\">    cout &lt;&lt; abs-&gt;num1 &lt;&lt; <span class=\"string\">&quot; - &quot;</span> &lt;&lt; abs-&gt;num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; abs-&gt;<span class=\"built_in\">getResult</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> abs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Mul</span></span><br><span class=\"line\">    abs = <span class=\"keyword\">new</span> MulCalculator;</span><br><span class=\"line\">    abs-&gt;num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">    abs-&gt;num2 = <span class=\"number\">15</span>;</span><br><span class=\"line\">    cout &lt;&lt; abs-&gt;num1 &lt;&lt; <span class=\"string\">&quot; * &quot;</span> &lt;&lt; abs-&gt;num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; abs-&gt;<span class=\"built_in\">getResult</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> abs;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-7-4-纯虚函数和抽象类\"><a href=\"#4-7-4-纯虚函数和抽象类\" class=\"headerlink\" title=\"4.7.4 纯虚函数和抽象类\"></a>4.7.4 纯虚函数和抽象类</h5><ul>\n<li><p>纯函数和抽象类的定义和语法：</p>\n<ul>\n<li>在多态中，通常父类中虚函数的实现是无意义的，主要是调用子类中重写的内容，因此可将该虚函数称为 纯虚函数</li>\n<li>纯虚函数语法：<code>virtual 返回值类型 函数名 (参数列表) = 0；</code></li>\n<li>当类中存在纯虚函数时，该类亦可称为抽象类；（例如：4.7.3中的AbstractCalculator类）</li>\n</ul>\n</li>\n<li><p>抽象类的特点：</p>\n<ul>\n<li>无法实例化对象</li>\n<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 19:15</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 纯虚函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived Function&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Base *base = <span class=\"keyword\">new</span> Derived;</span><br><span class=\"line\">    base-&gt;<span class=\"built_in\">func</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-7-5-多态案例-制作饮品\"><a href=\"#4-7-5-多态案例-制作饮品\" class=\"headerlink\" title=\"4.7.5 多态案例-制作饮品\"></a>4.7.5 多态案例-制作饮品</h5><ul>\n<li><p>案例描述：煮水 -&gt; 冲泡 -&gt; 倒入杯中 -&gt; 加入辅料</p>\n</li>\n<li><p>实现要求：利用多态，提供抽象制作的饮品基类，提供子类制作咖啡和茶叶</p>\n</li>\n<li><p>案例代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 19:29</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AbstractMakeDrinks</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">boilWater</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">pourIntoCup</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">addAccessories</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">makeDrinks</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">boilWater</span>();</span><br><span class=\"line\">        <span class=\"built_in\">brew</span>();</span><br><span class=\"line\">        <span class=\"built_in\">pourIntoCup</span>();</span><br><span class=\"line\">        <span class=\"built_in\">addAccessories</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">AbstractMakeDrinks</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MakeCoffee</span> : <span class=\"keyword\">public</span> AbstractMakeDrinks</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MakeCoffee</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt; -- Make Coffee --&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">boilWater</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;BoilWater&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Brew Coffee&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">pourIntoCup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Pour Coffee Into The Cup&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">addAccessories</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Add Accessories Like Milk&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MakeTea</span> : <span class=\"keyword\">public</span> AbstractMakeDrinks</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MakeTea</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt; -- Make Tea --&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">boilWater</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;BoilWater&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Brew Tea&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">pourIntoCup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Pour Tea Into The Cup&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">addAccessories</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Add Accessories Like Sugar&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是 指针地址 的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">makeDrinks</span><span class=\"params\">(AbstractMakeDrinks *abstractMakeDrinks)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    abstractMakeDrinks-&gt;<span class=\"built_in\">makeDrinks</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> abstractMakeDrinks;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">makeDrinks_Coffee</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">makeDrinks</span>(<span class=\"keyword\">new</span> MakeCoffee);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">makeDrinks_Tea</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">makeDrinks</span>(<span class=\"keyword\">new</span> MakeTea);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是 对象引用 的写法</span></span><br><span class=\"line\"><span class=\"comment\">//void makeDrinks(AbstractMakeDrinks &amp;abstractMakeDrinks)</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    abstractMakeDrinks.makeDrinks();</span></span><br><span class=\"line\"><span class=\"comment\">//    delete &amp;abstractMakeDrinks;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//void makeDrinks_Coffee()</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    makeDrinks(*new MakeCoffee);</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//void makeDrinks_Tea()</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    makeDrinks(*new MakeTea);</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">makeDrinks_Coffee</span>();</span><br><span class=\"line\">    <span class=\"built_in\">makeDrinks_Tea</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"4-7-6-虚析构和纯虚析构\"><a href=\"#4-7-6-虚析构和纯虚析构\" class=\"headerlink\" title=\"4.7.6 虚析构和纯虚析构\"></a>4.7.6 虚析构和纯虚析构</h5><ul>\n<li><p>多态使用时，如果子类中有属性开辟到堆区，父类指针在释放时无法调用到子类的析构代码</p>\n</li>\n<li><p>解决方式：将父类中的析构函数改为虚析构或纯虚析构</p>\n</li>\n<li><p>虚析构和纯虚析构的共性：</p>\n<ul>\n<li>可以解决父类指针释放子类对象</li>\n<li>都需要具体的函数实现</li>\n</ul>\n</li>\n<li><p>虚析构和纯虚析构的区别：</p>\n<ul>\n<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>\n</ul>\n</li>\n<li><p>虚析构语法：<code>virtual ~类名 () &#123;&#125;</code></p>\n</li>\n<li><p>纯虚析构语法：</p>\n<ul>\n<li>类内：<code>virtual ~类名 () = 0;</code></li>\n<li>类外：<code>类名::~类名() &#123;&#125;</code></li>\n</ul>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/24 20:24</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Animal Construct Transfer&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 虚析构，此时释放父类时，会调用子类的析构函数</span></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Animal Destruct Transfer&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 纯虚析构，在类外实现具体</span></span><br><span class=\"line\">    <span class=\"comment\">// virtual ~Animal() = 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 纯虚函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类外实现的 纯虚析构</span></span><br><span class=\"line\"><span class=\"comment\">//Animal::~Animal()</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    cout &lt;&lt; &quot;Animal Destruct Transfer&quot; &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> : <span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string *cat_Name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Cat</span>(string name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Cat Construct Transfer&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        cat_Name = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Cat</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cat_Name != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Cat Destruct Transfer&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> cat_Name;</span><br><span class=\"line\">            cat_Name = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; *cat_Name &lt;&lt; <span class=\"string\">&quot;Cat is Speaking&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 父类指针指向子类调用</span></span><br><span class=\"line\">    Animal *animal = <span class=\"keyword\">new</span> <span class=\"built_in\">Cat</span>(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">    animal-&gt;<span class=\"built_in\">speak</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 释放父类对象析构时，不会调用子类的析构函数，出现内存泄露</span></span><br><span class=\"line\">    <span class=\"comment\">// 在基类的析构函数前 加入关键字 virtual，即可解决问题</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> animal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：</p>\n<ol>\n<li>虚析构和纯虚析构，用来解决父类指针释放子类对象</li>\n<li>如果子类在堆区中，没有开辟空间，可以不写虚析构或纯虚析构</li>\n<li>拥有纯虚析构的类，属于抽象类</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"4-7-7-多态案例-电脑组装\"><a href=\"#4-7-7-多态案例-电脑组装\" class=\"headerlink\" title=\"4.7.7 多态案例-电脑组装\"></a>4.7.7 多态案例-电脑组装</h5><ul>\n<li><p>案例描述：</p>\n<ul>\n<li>电脑主要组成部分：CPU，显卡，内存条；</li>\n<li>将每个零件封装成抽象基类，并且提供不同的厂商生产不同的零件，例如：Inter和AMD；</li>\n<li>创建电脑类提供电脑工作的函数，并且调用每个零件工作的接口；</li>\n<li>测试时，组装三台电脑进行测试</li>\n</ul>\n</li>\n<li><p>案例代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/25 14:06</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象 CPU类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CPU</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">calculation</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象 显卡类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphicsCard</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象 内存类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RAM</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">storage</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 电脑类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string *name;</span><br><span class=\"line\">    CPU *cpu;</span><br><span class=\"line\">    GraphicsCard *graphicsCard;</span><br><span class=\"line\">    RAM *ram;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 电脑零件组装</span></span><br><span class=\"line\">    <span class=\"built_in\">Computer</span>(string *name, CPU *cpu, GraphicsCard *graphicsCard, RAM *ram)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;cpu = cpu;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;graphicsCard = graphicsCard;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;ram = ram;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt; --&quot;</span> &lt;&lt; *<span class=\"keyword\">this</span>-&gt;name &lt;&lt; <span class=\"string\">&quot; Computer Is Start Run&quot;</span> &lt;&lt; <span class=\"string\">&quot;-- &gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Computer</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cpu != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> cpu;</span><br><span class=\"line\">            cpu = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (graphicsCard != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> graphicsCard;</span><br><span class=\"line\">            graphicsCard = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ram != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> ram;</span><br><span class=\"line\">            ram = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt; --&quot;</span> &lt;&lt; *<span class=\"keyword\">this</span>-&gt;name &lt;&lt; <span class=\"string\">&quot; Computer Is Running Normal&quot;</span> &lt;&lt; <span class=\"string\">&quot;-- &gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 电脑运行函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">computerRun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 电脑零件 接口调用</span></span><br><span class=\"line\">        cpu-&gt;<span class=\"built_in\">calculation</span>();</span><br><span class=\"line\">        graphicsCard-&gt;<span class=\"built_in\">display</span>();</span><br><span class=\"line\">        ram-&gt;<span class=\"built_in\">storage</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体厂商的类</span></span><br><span class=\"line\"><span class=\"comment\">// Inter Class</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Inter_CPU</span> : <span class=\"keyword\">public</span> CPU</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">calculation</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Inter CPU Is Calculation&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Inter_GraphicsCard</span> : <span class=\"keyword\">public</span> GraphicsCard</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Inter Graphics Card Is Displaying&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Inter_RAM</span> : <span class=\"keyword\">public</span> RAM</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">storage</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Inter RAM Is In Storage&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AMD Class</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AMD_CPU</span> : <span class=\"keyword\">public</span> CPU</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">calculation</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;AMD CPU Is Calculation&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AMD_GraphicsCard</span> : <span class=\"keyword\">public</span> GraphicsCard</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;AMD Graphics Card Is Displaying&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AMD_RAM</span> : <span class=\"keyword\">public</span> RAM</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">storage</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;AMD RAM Is In Storage&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组装不同厂商组件的电脑</span></span><br><span class=\"line\"><span class=\"comment\">// Assembling Inter Computer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assemblingComputer_Inter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 准备 Inter Computer 的 Component</span></span><br><span class=\"line\">    string name = <span class=\"string\">&quot;Inter&quot;</span>;</span><br><span class=\"line\">    CPU *interCPU = <span class=\"keyword\">new</span> Inter_CPU;</span><br><span class=\"line\">    GraphicsCard *interGraphicsCard = <span class=\"keyword\">new</span> Inter_GraphicsCard;</span><br><span class=\"line\">    RAM *interRAM = <span class=\"keyword\">new</span> Inter_RAM;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Assembling Inter Computer</span></span><br><span class=\"line\">    Computer *computer = <span class=\"keyword\">new</span> <span class=\"built_in\">Computer</span>(&amp;name, interCPU, interGraphicsCard, interRAM);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Running Inter Computer</span></span><br><span class=\"line\">    computer-&gt;<span class=\"built_in\">computerRun</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> computer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Assembling AMD Computer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assemblingComputer_AMD</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 准备 AMD Computer 的 Component</span></span><br><span class=\"line\">    string name = <span class=\"string\">&quot;AMD&quot;</span>;</span><br><span class=\"line\">    CPU *amdCPU = <span class=\"keyword\">new</span> AMD_CPU;</span><br><span class=\"line\">    GraphicsCard *amdGraphicsCard = <span class=\"keyword\">new</span> AMD_GraphicsCard;</span><br><span class=\"line\">    RAM *amdRAM = <span class=\"keyword\">new</span> AMD_RAM;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Assembling AMD Computer</span></span><br><span class=\"line\">    Computer *computer = <span class=\"keyword\">new</span> <span class=\"built_in\">Computer</span>(&amp;name, amdCPU, amdGraphicsCard, amdRAM);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Running AMD Computer</span></span><br><span class=\"line\">    computer-&gt;<span class=\"built_in\">computerRun</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> computer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">assemblingComputer_Inter</span>();</span><br><span class=\"line\">    <span class=\"built_in\">assemblingComputer_AMD</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"5-文件操作\"><a href=\"#5-文件操作\" class=\"headerlink\" title=\"5. 文件操作\"></a>5. 文件操作</h3><ul>\n<li>文件作用：<ul>\n<li>程序运行时产生的数据都是临时数据，程序结束后，都会被释放</li>\n<li>通过文件，可以将数据持久化</li>\n<li>C++中对文件操作，需要包含头文件 <code>&lt;fstream&gt;</code></li>\n</ul>\n</li>\n<li>文件类型：<ol>\n<li>文本文件：文件以文本的ASCII码形式存储在计算机中</li>\n<li>二进制文件：文件以文本的二进制形式存储在计算机中，无法直接读懂</li>\n</ol>\n</li>\n<li>操作文件的三大类：<ol>\n<li><code>ofstream</code>：写操作\t</li>\n<li><code>ifstream</code>：读操作</li>\n<li><code>fstream</code>：读写操作</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"5-1-文本文件\"><a href=\"#5-1-文本文件\" class=\"headerlink\" title=\"5.1 文本文件\"></a>5.1 文本文件</h4><h5 id=\"5-1-1-写文本文件\"><a href=\"#5-1-1-写文本文件\" class=\"headerlink\" title=\"5.1.1 写文本文件\"></a>5.1.1 写文本文件</h5><ul>\n<li><p>写文件步骤：</p>\n<ol>\n<li>包含头文件：<code>#include &lt;fstream&gt;</code></li>\n<li>创建流对象：<code>ofstream ofs</code></li>\n<li>打开文件：<code>ofs.open(&quot;文件路径&quot;, 打开方式)</code></li>\n<li>写数据：<code>ofs &lt;&lt; &quot;写入数据&quot;;</code></li>\n<li>关闭文件：<code>ofs.close()</code></li>\n</ol>\n</li>\n<li><p>文件的打开方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">打开方式</th>\n<th align=\"left\">解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ios::in</td>\n<td align=\"left\">为读文件而打开文件</td>\n</tr>\n<tr>\n<td align=\"left\">ios::out</td>\n<td align=\"left\">为写文件而打开文件</td>\n</tr>\n<tr>\n<td align=\"left\">ios::ate</td>\n<td align=\"left\">初始位置：文件尾</td>\n</tr>\n<tr>\n<td align=\"left\">ios::app</td>\n<td align=\"left\">追加方式写文件</td>\n</tr>\n<tr>\n<td align=\"left\">ios::trunc</td>\n<td align=\"left\">如果文件存在，先删除，再创建</td>\n</tr>\n<tr>\n<td align=\"left\">ios::binary</td>\n<td align=\"left\">二进制方式</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>注意：文件打开方式，可以配合使用，利用 <code>|</code>操作符</p>\n</li>\n<li><p>例如：用二进制方式写文件：<code>ios::binary | ios::out</code></p>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/25 15:56</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ofstream ofs;</span><br><span class=\"line\">    ofs.<span class=\"built_in\">open</span>(<span class=\"string\">R&quot;(C:\\Users\\Admin\\Desktop\\demo.txt)&quot;</span>, ios::out);</span><br><span class=\"line\"></span><br><span class=\"line\">    ofs &lt;&lt; <span class=\"string\">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    ofs &lt;&lt; <span class=\"string\">&quot;Hello FHang&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    ofs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"5-1-2-读文本文件\"><a href=\"#5-1-2-读文本文件\" class=\"headerlink\" title=\"5.1.2 读文本文件\"></a>5.1.2 读文本文件</h5><ul>\n<li><p>写文件步骤：</p>\n<ol>\n<li>包含头文件：<code>#include &lt;fstream&gt;</code></li>\n<li>创建流对象：<code>ifstream ifs</code></li>\n<li>先判断打开文件是否成功，打开文件：<code>ifs.open(&quot;文件路径&quot;, 打开方式)</code></li>\n<li>读数据：四种读取方式</li>\n<li>关闭文件：<code>ifs.close()</code></li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/25 16:06</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    ifs.<span class=\"built_in\">open</span>(<span class=\"string\">R&quot;(C:\\Users\\Admin\\Desktop\\demo.txt)&quot;</span>, ios::in);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ifs.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Open File Failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读数据，四种</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 一行行读，不喜欢这个</span></span><br><span class=\"line\"><span class=\"comment\">//    char buf[1024] = &#123;0&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//    while (ifs &gt;&gt; buf)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 一行行读，感觉一般</span></span><br><span class=\"line\"><span class=\"comment\">//    char buf[1024] = &#123;0&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//    while (ifs.getline(buf, sizeof(buf)))</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 一行行读，个人一般常用</span></span><br><span class=\"line\">    string buf;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(ifs, buf))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. 一个个读，慢</span></span><br><span class=\"line\"><span class=\"comment\">//    char buf;</span></span><br><span class=\"line\"><span class=\"comment\">//    while ((buf = ifs.get()) != EOF)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        cout &lt;&lt; buf;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ifs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-2-二进制文件\"><a href=\"#5-2-二进制文件\" class=\"headerlink\" title=\"5.2 二进制文件\"></a>5.2 二进制文件</h4><ul>\n<li>以二进制的方式对文件进行读写操作</li>\n<li>打开方式需要指定：<code>ios:binary</code></li>\n</ul>\n<h5 id=\"5-2-1-写二进制文件\"><a href=\"#5-2-1-写二进制文件\" class=\"headerlink\" title=\"5.2.1 写二进制文件\"></a>5.2.1 写二进制文件</h5><ul>\n<li><p>二进制写文件主要利用 流对象 调用成员函数 <code>write()</code></p>\n</li>\n<li><p>函数原型：<code>ostream &amp;write(const char *buffer, int len);</code></p>\n</li>\n<li><p>参数解释：字符指针 <code>buffer</code>指向内存中一段内存空间，<code>len</code>是读写的字节数</p>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/25 16:34</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string f_Name;</span><br><span class=\"line\">    <span class=\"type\">int</span> f_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Person person = &#123;<span class=\"string\">&quot;FHang&quot;</span>, <span class=\"number\">24</span>&#125;;</span><br><span class=\"line\">    ofstream ofs;</span><br><span class=\"line\">    ofs.<span class=\"built_in\">open</span>(<span class=\"string\">R&quot;(C:\\Users\\Admin\\Desktop\\Person.txt)&quot;</span>, ios::out | ios::binary);</span><br><span class=\"line\">    ofs.<span class=\"built_in\">write</span>((<span class=\"type\">const</span> <span class=\"type\">char</span> *) &amp;person, <span class=\"built_in\">sizeof</span>(Person));</span><br><span class=\"line\">    ofs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"5-2-2-读二进制文件\"><a href=\"#5-2-2-读二进制文件\" class=\"headerlink\" title=\"5.2.2 读二进制文件\"></a>5.2.2 读二进制文件</h5><ul>\n<li><p>二进制方式读文件，主要利用 流对象 调用成员函数 <code>read</code></p>\n</li>\n<li><p>函数原型：<code>ostream &amp;read(char *buffer, int len);</code></p>\n</li>\n<li><p>参数解释：字符指针 <code>buffer</code>指向内存中一段内存空间，<code>len</code>是读写的字节数</p>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/6/25 17:00</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string f_Name;</span><br><span class=\"line\">    <span class=\"type\">int</span> f_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Person person;</span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    ifs.<span class=\"built_in\">open</span>(<span class=\"string\">R&quot;(C:\\Users\\Admin\\Desktop\\Person.txt)&quot;</span>, ios::in | ios::binary);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ifs.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Open File Failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ifs.<span class=\"built_in\">read</span>((<span class=\"type\">char</span> *) &amp;person, <span class=\"built_in\">sizeof</span>(Person));</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Name = &quot;</span> &lt;&lt; person.f_Name &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Age = &quot;</span> &lt;&lt; person.f_Age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    ifs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"6-extern-C\"><a href=\"#6-extern-C\" class=\"headerlink\" title=\"6. extern C\"></a>6. extern C</h3><ul>\n<li><p>功能描述：将<code>C++</code>代码，以<code>C语</code>言的<code>形式</code>进行<code>编译</code></p>\n</li>\n<li><p>作用：用于<code>C/C++混合开发</code>时，<code>C++</code>中<code>使用C</code>写的<code>第三方库</code>时使用</p>\n</li>\n<li><p>注意：<code>C</code>不支持<code>函数重载</code></p>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span>&#123;<span class=\"keyword\">return</span> a;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是 <code>extern C</code> 的使用方式，但这个程序<code>编译会报错</code>；</p>\n<p>在 <code>C/C++</code> 中，编译时转汇编，依据<code>编译器</code>的<code>区别</code>，函数名会变<code>改名</code>：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// C </span><br><span class=\"line\"><span class=\"keyword\">call</span> _func()</span><br><span class=\"line\"></span><br><span class=\"line\">// C++</span><br><span class=\"line\"><span class=\"keyword\">call</span> func_i()</span><br></pre></td></tr></table></figure>\n\n<p>所以，当<code>C++</code>文件中，使用<code>extern C</code>修饰重载函数后，编译会<code>出错</code></p>\n</li>\n</ul>\n<h4 id=\"6-1-实例演示1\"><a href=\"#6-1-实例演示1\" class=\"headerlink\" title=\"6.1 实例演示1\"></a>6.1 实例演示1</h4><ul>\n<li><p><code>math.h</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>math.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>demo.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;math.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>C++</code>文件中，不能直接使用<code>C</code>文件中的函数，因为<code>编译器</code>的<code>区别</code>，<code>相同</code>的<code>函数名</code>，在编译时，函数的名称会<code>变得不同</code>，所以<code>C++</code>文件中就找不到<code>C</code>中的<code>函数声明和实现</code>，只能<code>指向</code>自己文件中的声明；</p>\n<p>所以需要 <code>extern C</code>修饰，这样编译器就会在编译时修改函数名，<code>修改成C的规范</code>，这样<code>C++</code>文件中就可以找到<code>C</code>文件中的函数声明和实现;</p>\n</li>\n<li><p>补充：如果别的 <code>C</code> 文件中要使用 <code>math.h</code> ，直接包含 <code>math.h</code> 会<code>报错</code>，因为 <code>C </code>的<code>编译器</code> 无法<code>识别 extern C</code></p>\n</li>\n<li><p>注意：</p>\n<ul>\n<li><code>extern C</code> 直接修饰 <code>C的头文件</code>内的<code>声明</code>即可，<code>同时</code>修饰<code>实现</code>也可以，但<code>没必要</code>；唯独<code>不能</code>只修饰<code>实现</code>；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-2-实例演示2\"><a href=\"#6-2-实例演示2\" class=\"headerlink\" title=\"6.2 实例演示2\"></a>6.2 实例演示2</h4><ul>\n<li><p>补充知识：</p>\n<ol>\n<li>Cpp 文件开头默认会有<code>#define __cpluscplus</code>，用于编译时标识自己是 Cpp 文件</li>\n<li>Cpp 头文件中一般可以使用： <ul>\n<li><code>#ifdef 项目文件名</code></li>\n<li><code>#endif</code></li>\n<li>包含头文件内容</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<p><code>math.h</code> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cpluscplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// __cpluscplus</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cpluscplus    </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// __cpluscplus</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __cpluscplus <span class=\"comment\">// 编译时 默认存在的</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;math.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 <code>Cpp</code> 文件包含这个头文件时，编译时会识别到 <code>#ifdef</code>和<code>#endif</code>，这样 <code>extern C</code>就可以生效；</p>\n<p>当 <code>C</code> 文件包含这个头文件时，编译时就会忽略 <code>extern C</code>；</p>\n<p>这样的写法格式的好处：<code>C</code> 文件 和 <code>Cpp</code> 文件 都可以直接包含 <code>math.h</code>文件，进行使用</p>\n</li>\n<li><p>补充知识：实际开发中，避免重复引用头文件，浪费资源，需要使用 <code>#ifndef __文件名_H</code> 、<code>#define __文件名_H</code> 、<code>#endif</code></p>\n<p><code>math.h</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __MATH_H <span class=\"comment\">// 规范写法</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __MATH_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cpluscplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// __cpluscplus</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cpluscplus    </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// __cpluscplus</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// MATH</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>#ifdef</code>：如果定义了，参与编译</p>\n</li>\n<li><p><code>#ifndef</code>：如果没有被其它文件引用或定义</p>\n</li>\n<li><p><code>#define</code>：定义这个文件的内容</p>\n</li>\n<li><p><code>#endif</code>：结束定义</p>\n</li>\n<li><p>简单写法：<code>#pragma once</code></p>\n<p><code>math.h</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cpluscplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// __cpluscplus</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cpluscplus    </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// __cpluscplus</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果和 <code>#ifndef __文件名_H</code> 、<code>#define __文件名_H</code> 、<code>#endif</code> 是一样的</p>\n</li>\n<li><p><code>#ifndef __文件名_H</code> 、<code>#define __文件名_H</code> 、<code>#endif</code>受到C&#x2F;C++标准支持，不受编译器限制</p>\n</li>\n<li><p><code>#pragma once</code> 老版编译器不兼容(GCC 3.4之前的版本)</p>\n</li>\n</ul>\n","text":"C++_核心编程[toc] 1. 内存分区模型C++程序在执行时，内存大方向划分为4个区域 代码区：存放函数的二进制代码，由操作系统进行管理的 全局区：存放全局...","permalink":"/post/1_03_C++_核心编程","photos":[],"count_time":{"symbolsCount":"92k","symbolsTime":"1:23"},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">C++_核心编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">1. 内存分区模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%89%8D\"><span class=\"toc-text\">1.1 程序运行前</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%90%8E\"><span class=\"toc-text\">1.2 程序运行后</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">2. 引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%BC%95%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.1 引用的基本使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%BC%95%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.2 引用注意事项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E5%BC%95%E7%94%A8%E5%81%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2.3 引用做函数参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E5%BC%95%E7%94%A8%E5%81%9A%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">2.4 引用做函数的返回值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-%E5%BC%95%E7%94%A8%E7%9A%84%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">2.5 引用的本质</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-%E5%B8%B8%E9%87%8F%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">2.6 常量引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-7-%E5%BC%95%E7%94%A8%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">2.7 引用补充</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">3. 函数进阶</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E5%87%BD%E6%95%B0%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">3.1 函数默认参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-1-%E5%87%BD%E6%95%B0%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">3.1.1 函数默认参数补充</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E5%87%BD%E6%95%B0%E5%8D%A0%E4%BD%8D%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">3.2 函数占位参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">3.3 函数重载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-1-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">3.3.1 函数重载概述</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-2-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">3.3.2 函数重载注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-3-2-1-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E8%A1%A5%E5%85%85%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">3.3.2.1 函数重载补充内容</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.4 内联函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4. 类和对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">4.1 封装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-1-%E5%B0%81%E8%A3%85%E7%9A%84%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">4.1.1 封装的意义</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-2-struct%E5%92%8Cclass%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4.1.2 struct和class区别</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-3-%E6%88%90%E5%91%98%E5%B1%9E%E6%80%A7%E7%A7%81%E6%9C%89%E5%8C%96\"><span class=\"toc-text\">4.1.3 成员属性私有化</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-4-%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%AE%BE%E8%AE%A1%E7%AB%8B%E6%96%B9%E4%BD%93\"><span class=\"toc-text\">4.1.4 案例：设计立方体</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-5-%E6%A1%88%E4%BE%8B%EF%BC%9A%E7%82%B9%E5%9C%86%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">4.1.5 案例：点圆的关系</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E5%AF%B9%E8%B1%A1%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86\"><span class=\"toc-text\">4.2 对象初始化和清理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-1-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.2.1 构造函数和析构函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-2-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%86%E7%B1%BB%E5%8F%8A%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">4.2.2 构造函数分类及调用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-3-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">4.2.3 拷贝构造函数调用时机</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-4-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%A7%84%E5%88%99\"><span class=\"toc-text\">4.2.4 构造函数调用规则</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-5-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">4.2.5 深拷贝和浅拷贝</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-6-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">4.2.6 初始化列表</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-7-%E7%B1%BB%E5%AF%B9%E8%B1%A1%E4%BD%9C%E4%B8%BA%E7%B1%BB%E6%88%90%E5%91%98\"><span class=\"toc-text\">4.2.7 类对象作为类成员</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-8-%E9%9D%99%E6%80%81%E6%88%90%E5%91%98\"><span class=\"toc-text\">4.2.8 静态成员</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%92%8Cthis%E6%8C%87%E9%92%88\"><span class=\"toc-text\">4.3 对象模型和this指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-1-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%88%86%E5%BC%80%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">4.3.1 成员变量和成员函数分开存储</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-2-this%E6%8C%87%E9%92%88%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">4.3.2 this指针概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-3-%E7%A9%BA%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.3.3 空指针访问成员函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-4-const%E4%BF%AE%E9%A5%B0%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.3.4 const修饰成员函数</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-%E5%8F%8B%E5%85%83\"><span class=\"toc-text\">4.4 友元</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-1-%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E5%81%9A%E5%8F%8B%E5%85%83\"><span class=\"toc-text\">4.4.1 全局函数做友元</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-2-%E7%B1%BB%E5%81%9A%E5%8F%8B%E5%85%83\"><span class=\"toc-text\">4.4.2 类做友元</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-3-%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%81%9A%E5%8F%8B%E5%85%83\"><span class=\"toc-text\">4.4.3 成员函数做友元</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-5-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5 运算符重载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-1-%E5%8A%A0%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.1 加号运算符重载</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-2-%E5%B7%A6%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.2 左移运算符重载</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-3-%E9%80%92%E5%A2%9E%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.3 递增运算符重载</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-4-%E9%80%92%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.4 递减运算符重载</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-5-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.5 赋值运算符重载</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-6-%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.6 关系运算符重载</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-7-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.7 函数调用运算符重载</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">4.6 继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-1-%E7%BB%A7%E6%89%BF%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4.6.1 继承的基本使用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.6.2 继承的方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-3-%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">4.6.3 继承中的对象模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#4-6-3-1-%E9%AA%8C%E8%AF%81%E5%AD%90%E7%B1%BB%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">4.6.3.1 验证子类模型</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#4-6-3-2-Developer-Powershell-VS\"><span class=\"toc-text\">4.6.3.2 Developer Powershell - VS</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-4-%E7%BB%A7%E6%89%BF%E4%B8%AD%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">4.6.4 继承中构造和析构顺序</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-5-%E7%BB%A7%E6%89%BF%E5%90%8C%E5%90%8D%E6%88%90%E5%91%98%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.6.5 继承同名成员处理方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-6-%E7%BB%A7%E6%89%BF%E5%90%8C%E5%90%8D%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.6.6 继承同名静态成员处理方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-7-%E5%A4%9A%E7%BB%A7%E6%89%BF%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">4.6.7 多继承语法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-8-%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">4.6.8 菱形继承</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-7-%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">4.7 多态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-7-1-%E5%A4%9A%E6%80%81%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">4.7.1 多态的基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-7-2-%E5%A4%9A%E6%80%81%E6%B7%B1%E5%85%A5%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">4.7.2 多态深入原理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-7-3-%E5%A4%9A%E6%80%81%E6%A1%88%E4%BE%8B-%E8%AE%A1%E7%AE%97%E5%99%A8\"><span class=\"toc-text\">4.7.3 多态案例-计算器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-7-4-%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">4.7.4 纯虚函数和抽象类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-7-5-%E5%A4%9A%E6%80%81%E6%A1%88%E4%BE%8B-%E5%88%B6%E4%BD%9C%E9%A5%AE%E5%93%81\"><span class=\"toc-text\">4.7.5 多态案例-制作饮品</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-7-6-%E8%99%9A%E6%9E%90%E6%9E%84%E5%92%8C%E7%BA%AF%E8%99%9A%E6%9E%90%E6%9E%84\"><span class=\"toc-text\">4.7.6 虚析构和纯虚析构</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-7-7-%E5%A4%9A%E6%80%81%E6%A1%88%E4%BE%8B-%E7%94%B5%E8%84%91%E7%BB%84%E8%A3%85\"><span class=\"toc-text\">4.7.7 多态案例-电脑组装</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5. 文件操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.1 文本文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-1-1-%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.1.1 写文本文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-1-2-%E8%AF%BB%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.1.2 读文本文件</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.2 二进制文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-2-1-%E5%86%99%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.2.1 写二进制文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-2-2-%E8%AF%BB%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.2.2 读二进制文件</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-extern-C\"><span class=\"toc-text\">6. extern C</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA1\"><span class=\"toc-text\">6.1 实例演示1</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA2\"><span class=\"toc-text\">6.2 实例演示2</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C++_基础","uid":"c90c4a4848e304bff822a98a4aa17a84","slug":"1_01_C++_基础","date":"2022-10-06T07:28:25.915Z","updated":"2023-01-10T01:10:19.450Z","comments":true,"path":"api/articles/1_01_C++_基础.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (1).webp","text":"C++_基础[toc] 1. 第一阶段1. HelloWorld12345678#include &lt;iostream&gt;using namespace...","permalink":"/post/1_01_C++_基础","photos":[],"count_time":{"symbolsCount":"42k","symbolsTime":"38 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"C++_STL算法","uid":"1314ed16965aff00f28615c8023e8a57","slug":"1_07_C++_STL算法","date":"2022-10-06T07:28:25.910Z","updated":"2023-01-10T01:10:19.450Z","comments":true,"path":"api/articles/1_07_C++_STL算法.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (7).webp","text":"C++_STL算法[toc] 概述： 算法主要是头文件&lt;algorithm&gt; &lt;functional&gt; &lt;numeric&gt; ...","permalink":"/post/1_07_C++_STL算法","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}