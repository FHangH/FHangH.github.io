{"title":"C++_基础","uid":"c90c4a4848e304bff822a98a4aa17a84","slug":"1_C++_基础_01","date":"2022-10-06T07:28:25.915Z","updated":"2022-11-10T01:30:30.467Z","comments":true,"path":"api/articles/1_C++_基础_01.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (1).webp","content":"<h1 id=\"C-基础\"><a href=\"#C-基础\" class=\"headerlink\" title=\"C++_基础\"></a>C++_基础</h1><p>[toc]</p>\n<h3 id=\"1-第一阶段\"><a href=\"#1-第一阶段\" class=\"headerlink\" title=\"1. 第一阶段\"></a>1. 第一阶段</h3><h4 id=\"1-HelloWorld\"><a href=\"#1-HelloWorld\" class=\"headerlink\" title=\"1. HelloWorld\"></a>1. HelloWorld</h4><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tcout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n<h4 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h4><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n    int a &#x3D; 10;\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n<h4 id=\"3-常量\"><a href=\"#3-常量\" class=\"headerlink\" title=\"3. 常量\"></a>3. 常量</h4><p>定义常量的两张方法：</p>\n<ol>\n<li><p><code>#define 宏常量</code></p>\n<p>通常在文件的上方定义</p>\n</li>\n<li><p><code>const 修饰的变量</code></p>\n<p>通常在变量定义前加关键字const</p>\n</li>\n</ol>\n<p>常量定义后，不可被修改</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\n#define Day 7 &#x2F;&#x2F; #define 常量名 常量值\n\nint main()\n&#123;\n\tconst int Month &#x3D; 12; &#x2F;&#x2F; const 常量类型 常量名 &#x3D; 常量值\n\n\tcout &lt;&lt; &quot;One Week have &quot; &lt;&lt; Day &lt;&lt; &quot; day&quot; &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;One Year have &quot; &lt;&lt; Month &lt;&lt; &quot; month&quot; &lt;&lt; endl;\n\n&#125;</code></pre>\n\n\n\n<h4 id=\"4-标识符命名规则\"><a href=\"#4-标识符命名规则\" class=\"headerlink\" title=\"4. 标识符命名规则\"></a>4. 标识符命名规则</h4><ul>\n<li>标识符不能是关键字</li>\n<li>标识符只能是字母、数字、下划线组成</li>\n<li>标识符第一个字符必须是下划线或字母</li>\n<li>标识符区分大小写</li>\n</ul>\n<h3 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2. 数据类型\"></a>2. 数据类型</h3><h4 id=\"1-整型\"><a href=\"#1-整型\" class=\"headerlink\" title=\"1. 整型\"></a>1. 整型</h4><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>占用空间</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>short（短整型）</td>\n<td>2字节</td>\n<td>（-2^15 - 2^15-1）</td>\n</tr>\n<tr>\n<td>int（整型）</td>\n<td>4字节</td>\n<td>（-2^31 - 2^31-1）</td>\n</tr>\n<tr>\n<td>long（长整型）</td>\n<td>windows为4字节，Linux为4字节（32位），8字节（64位）</td>\n<td>（-2^31 - 2^31-1）</td>\n</tr>\n<tr>\n<td>long long（长长整型）</td>\n<td>8字节</td>\n<td>（-2^63 - 2^63-1）</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-sizeof-关键字\"><a href=\"#2-sizeof-关键字\" class=\"headerlink\" title=\"2. sizeof 关键字\"></a>2. sizeof 关键字</h4><ul>\n<li>作用：统计数据类型所占内存的大小</li>\n<li>语法：<code>sizeof(数据类型/变量)</code></li>\n</ul>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include&lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tcout &lt;&lt; &quot;short Size is &quot; &lt;&lt; sizeof(short) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;int Size is &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;long Size is &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;long long Size is &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n<h5 id=\"2-1-sizeof补充\"><a href=\"#2-1-sizeof补充\" class=\"headerlink\" title=\"2.1 sizeof补充\"></a>2.1 sizeof补充</h5><ul>\n<li><code>sizeof()</code>是<code>编译器</code>的一种<code>特性</code>，<code>并非函数</code>，只是<code>用起来像</code>，在<code>C++编译转汇编</code>时，编译器会<code>自动</code>将<code>sizeof()</code>的正确的值<code>写在汇编中</code></li>\n</ul>\n<h4 id=\"3-浮点型\"><a href=\"#3-浮点型\" class=\"headerlink\" title=\"3. 浮点型\"></a>3. 浮点型</h4><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>占用空间</th>\n<th>有效数字范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>4字节</td>\n<td>7位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8字节</td>\n<td>15 - 16位有效数字</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;默认情况下显示6位有效数字\n\tfloat f1 &#x3D; 3.1415926f;\n\n\tdouble d1 &#x3D; 3.1415926;\n\n\tcout &lt;&lt; &quot;float f1 : &quot; &lt;&lt; f1 &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;double d1 : &quot; &lt;&lt; d1 &lt;&lt; endl;\n\n\t&#x2F;&#x2F;统计float和double占用的空间\n\tcout &lt;&lt; &quot;float size : &quot; &lt;&lt; sizeof(float) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;double size : &quot; &lt;&lt; sizeof(double) &lt;&lt; endl;\n\n\t&#x2F;&#x2F;科学计数法\n\n\t&#x2F;&#x2F;3e2 : 3 * 10 ^2\n\tfloat f2 &#x3D; 3e2;\n\tcout &lt;&lt; &quot;float f2 : &quot; &lt;&lt; f2 &lt;&lt; endl;\n\n\t&#x2F;&#x2F;3e2 : 3 * 0.1 ^2\n\tfloat f3 &#x3D; 3e-2;\n\tcout &lt;&lt; &quot;float f3 : &quot; &lt;&lt; f3 &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n<h4 id=\"4-字符型\"><a href=\"#4-字符型\" class=\"headerlink\" title=\"4. 字符型\"></a>4. 字符型</h4><ul>\n<li>作用：显示单个字符</li>\n<li>语法：<code>char 变量名 = &#39;变量值&#39;</code></li>\n<li>注意：char定义的变量只能用单引号；只能有一个字符</li>\n<li>占用：char占用1个字节；将字符对应的ASCII码放入存储单元</li>\n</ul>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;定义char\n\tchar c1 &#x3D; &#39;a&#39;;\n\n\t&#x2F;&#x2F;查看char占用的大小\n\tcout &lt;&lt; &quot;Char c1 size : &quot; &lt;&lt; sizeof(char) &lt;&lt; endl;\n\n\t&#x2F;&#x2F;查看 &#39;a&#39; 对应的ASCII码\n\tcout &lt;&lt; &quot;Char a by ASCII : &quot; &lt;&lt; int(c1) &lt;&lt; endl;\n&#125;</code></pre>\n\n<ul>\n<li><p>ASCII：\t</p>\n<p>0 - 31 分配个控制字符</p>\n<p>32 - 126 分配个键盘上能找到的字符</p>\n</li>\n</ul>\n<h4 id=\"5-转义字符\"><a href=\"#5-转义字符\" class=\"headerlink\" title=\"5. 转义字符\"></a>5. 转义字符</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tcout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;\n\n\t&#x2F;&#x2F; \\n 是换行\n\tcout &lt;&lt; &quot;hello world\\n&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; \\\\ 是反斜杠\n\tcout &lt;&lt; &quot;hello world\\\\&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; \\t 是水平制表（换行对齐）\n\tcout &lt;&lt; &quot;hello world\\t&quot; &lt;&lt; endl;\n\n&#125;</code></pre>\n\n\n\n<h4 id=\"6-字符串类型\"><a href=\"#6-字符串类型\" class=\"headerlink\" title=\"6. 字符串类型\"></a>6. 字符串类型</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tstring s1 &#x3D; &quot;abc&quot;;\n\tcout &lt;&lt; &quot;string s1 : &quot; &lt;&lt; s1 &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n<h4 id=\"7-布尔类型\"><a href=\"#7-布尔类型\" class=\"headerlink\" title=\"7. 布尔类型\"></a>7. 布尔类型</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;true &#x3D; 1; false &#x3D; 0;\n\tbool b1 &#x3D; true;\n\tbool b2 &#x3D; false;\n\n\tcout &lt;&lt; &quot;Bool b1 : &quot; &lt;&lt; b1 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Bool b2 : &quot; &lt;&lt; b2 &lt;&lt; endl;\n\n\t&#x2F;&#x2F;计算bool类占用的大小\n\tcout &lt;&lt; &quot;Bool size is : &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n<p>8.数据的输入</p>\n<ul>\n<li>作用：获取从键盘中输入的值</li>\n<li>关键字：cin</li>\n<li>语法：<code>cin &gt;&gt; 变量</code></li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;int\n\tint a;\n\tcout &lt;&lt; &quot;Please enter num : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; a;\n\tcout &lt;&lt; &quot;Your enter num : &quot; &lt;&lt; a &lt;&lt; endl;\n\n\t&#x2F;&#x2F;string\n\tstring b;\n\tcout &lt;&lt; &quot;Please enter string : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; b;\n\tcout &lt;&lt; &quot;Your enter string : &quot; &lt;&lt; b &lt;&lt; endl;\n\n\t&#x2F;&#x2F;float or double\n\tfloat c;\n\tdouble d;\n\tcout &lt;&lt; &quot;Please enter floatNum : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; c;\n\tcout &lt;&lt; &quot;Your enter floatNum : &quot; &lt;&lt; c &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;Please enter doubleNum : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; d;\n\tcout &lt;&lt; &quot;Your enter doubleNum : &quot; &lt;&lt; d &lt;&lt; endl;\n\n\t&#x2F;&#x2F;bool\n\tbool bl1; \n\tcout &lt;&lt; &quot;Please enter boolVlaue bl1 : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; bl1;\n\tcout &lt;&lt; &quot;Your enter boolValue : &quot; &lt;&lt; bl1 &lt;&lt; endl;\n\t\n\t&#x2F;&#x2F;bool类型 除了0，其他都为真&#x3D;1\n&#125;</code></pre>\n\n\n\n<h4 id=\"9-自增自减的区别\"><a href=\"#9-自增自减的区别\" class=\"headerlink\" title=\"9. 自增自减的区别\"></a>9. 自增自减的区别</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;前置++ 或 前置--\n\tint i1 &#x3D; 10;\n\tint j1;\n\tcout &lt;&lt; &quot;i1 &#x3D; &quot; &lt;&lt; i1 &lt;&lt; endl;\n\n\tj1 &#x3D; ++i1 * 10;\n\tcout &lt;&lt; &quot;++i1 * 10 &#x3D; &quot; &lt;&lt; j1 &lt;&lt; endl;\n\n\tj1 &#x3D; --i1 * 10;\n\tcout &lt;&lt; &quot;--i1 * 10 &#x3D; &quot; &lt;&lt; j1 &lt;&lt; endl;\n\n\t&#x2F;&#x2F;后置++ 或 后置--\n\tint i2 &#x3D; 10;\n\tint j2;\n\tcout &lt;&lt; &quot;i2 &#x3D; &quot; &lt;&lt; i1 &lt;&lt; endl;\n\n\tj2 &#x3D; ++i2 * 10;\n\tcout &lt;&lt; &quot;++i2 * 10 &#x3D; &quot; &lt;&lt; j2 &lt;&lt; endl;\n\n\tj2 &#x3D; --i2 * 10;\n\tcout &lt;&lt; &quot;--i2 * 10 &#x3D; &quot; &lt;&lt; j2 &lt;&lt; endl;\n\n\t&#x2F;&#x2F;后置与前置的区别\n\tint a1 &#x3D; 10;\n\tint b1 &#x3D; ++a1 * 10; &#x2F;&#x2F;a1此时先+1为11\n\tcout &lt;&lt; &quot;a1 &#x3D; &quot; &lt;&lt; a1 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b1 &#x3D; &quot; &lt;&lt; b1 &lt;&lt; endl;\n\n\tint a2 &#x3D; 10;\n\tint b2 &#x3D; a2++ * 10; &#x2F;&#x2F;a2此时仍为10,b2计算完后，a2+1 为11\n\tcout &lt;&lt; &quot;a2 &#x3D; &quot; &lt;&lt; a2 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b2 &#x3D; &quot; &lt;&lt; b2 &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n<h4 id=\"10-逻辑运算符\"><a href=\"#10-逻辑运算符\" class=\"headerlink\" title=\"10. 逻辑运算符\"></a>10. 逻辑运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>术语</th>\n<th>示例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>！</td>\n<td>非</td>\n<td>！a</td>\n<td>a为假，则 !a 为真</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>a &amp;&amp; b</td>\n<td>有假则假，全真为真</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>a || b</td>\n<td>有真则真，全假为假</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint a &#x3D; 1;\n\tint b &#x3D; 0;\n\tint c &#x3D; 1;\n\tint d &#x3D; 0;\n\n\t&#x2F;&#x2F;逻辑非\n\tcout &lt;&lt; &quot;!a &#x3D; &quot; &lt;&lt; !a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;!!a &#x3D; &quot; &lt;&lt; !!a &lt;&lt; endl;\n\n\t&#x2F;&#x2F;逻辑与\n\tcout &lt;&lt; &quot;a &amp;&amp; b &#x3D; &quot; &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;a &amp;&amp; c &#x3D; &quot; &lt;&lt; (a &amp;&amp; c) &lt;&lt; endl;\n\n\t&#x2F;&#x2F;逻辑或\n\tcout &lt;&lt; &quot;a || b &#x3D; &quot; &lt;&lt; (a || b) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;a || c &#x3D; &quot; &lt;&lt; (a || c) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b || d &#x3D; &quot; &lt;&lt; (b || d) &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n\n\n<h3 id=\"3-程序流程结构\"><a href=\"#3-程序流程结构\" class=\"headerlink\" title=\"3. 程序流程结构\"></a>3. 程序流程结构</h3><p>三种基本结构： 顺序结构，选择结构，循环结构</p>\n<ul>\n<li>顺序结构：程序按顺序执行，不发生跳转</li>\n<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>\n<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>\n</ul>\n<h4 id=\"1-选择结构\"><a href=\"#1-选择结构\" class=\"headerlink\" title=\"1. 选择结构\"></a>1. 选择结构</h4><h5 id=\"1-1-if-语句\"><a href=\"#1-1-if-语句\" class=\"headerlink\" title=\"1.1 if 语句\"></a>1.1 if 语句</h5><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint enterValue;\n\n\tcout &lt;&lt; &quot;Please enter value : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; enterValue;\n\n\tcout &lt;&lt; &quot;Your enter value is : &quot; &lt;&lt; enterValue &lt;&lt; endl;\n\n\tif (enterValue &gt;&#x3D; 650)\n\t&#123;\n\t\tcout &lt;&lt; &quot;You are so good !&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;You can do it !&quot; &lt;&lt; endl;\n\t&#125;\n&#125;\n</code></pre>\n\n\n\n<h5 id=\"1-2-多条件if语句\"><a href=\"#1-2-多条件if语句\" class=\"headerlink\" title=\"1.2 多条件if语句\"></a>1.2 多条件if语句</h5><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint value;\n\n\tcout &lt;&lt; &quot;Please enter value : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; value;\n\n\tcout &lt;&lt; &quot;Your enter value is : &quot; &lt;&lt; value &lt;&lt; endl;\n\n\tif (value &gt;&#x3D; 650)\n\t&#123;\n\t\tcout &lt;&lt; &quot;You are A !&quot; &lt;&lt; endl;\n\t&#125;\n\telse if (value &gt;&#x3D; 550)\n\t&#123;\n\t\tcout &lt;&lt; &quot;You are B !&quot; &lt;&lt; endl;\n\t&#125;\n\telse if (value &gt;&#x3D; 450)\n\t&#123;\n\t\tcout &lt;&lt; &quot;You are C !&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;You are D !&quot; &lt;&lt; endl;\n\t&#125;\n&#125;\n</code></pre>\n\n\n\n<h5 id=\"1-3-嵌套if语句\"><a href=\"#1-3-嵌套if语句\" class=\"headerlink\" title=\"1.3 嵌套if语句\"></a>1.3 嵌套if语句</h5><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint value;\n\n\tcout &lt;&lt; &quot;Please enter value : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; value;\n\n\tcout &lt;&lt; &quot;Your enter value is : &quot; &lt;&lt; value &lt;&lt; endl;\n\n\tif (value &gt;&#x3D; 650)\n\t&#123;\n\t\tif (value &gt;&#x3D; 750)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;You are S !&quot; &lt;&lt; endl;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;You are A !&quot; &lt;&lt; endl;\n\t\t&#125;\n\t&#125;\n\telse if (value &gt;&#x3D; 450)\n\t&#123;\n\t\tcout &lt;&lt; &quot;You are C !&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;You are D !&quot; &lt;&lt; endl;\n\t&#125;\n&#125;\n</code></pre>\n\n\n\n<h5 id=\"1-4-案列\"><a href=\"#1-4-案列\" class=\"headerlink\" title=\"1.4 案列\"></a>1.4 案列</h5><ul>\n<li>分别给a，b，c三个赋int值；判断最大的值，并打印</li>\n</ul>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint a, b, c;\n\n\tcout &lt;&lt; &quot;Please enter a value : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; a;\n\n\tcout &lt;&lt; &quot;Please enter b value : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; b;\n\n\tcout &lt;&lt; &quot;Please enter c value : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; c;\n\n\tcout &lt;&lt; &quot;***********************&quot; &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n\tcout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;***********************&quot; &lt;&lt; endl;\n\n\tif (a &gt; b) &#x2F;&#x2F;如果a 比 b 大，则 a 继续与 c 比较\n\t&#123;\n\t\tif (a &gt; c) &#x2F;&#x2F;如果a 比 c 大，则 a 最大\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;Max value is a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\t\t&#125;\n\t\telse &#x2F;&#x2F;否则 c 最大\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;Max value is c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;\n\t\t&#125;\n\t&#125;\n\telse &#x2F;&#x2F;如果b 比 a 大，则 b 继续与 c 比较\n\t&#123;\n\t\tif (b &gt; c) &#x2F;&#x2F;如果b 比 c 大，则 b 最大\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;Max value is b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n\t\t&#125;\n\t\telse &#x2F;&#x2F;否则 c 最大\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;Max value is c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n\n\n<h5 id=\"1-5-三目运算符\"><a href=\"#1-5-三目运算符\" class=\"headerlink\" title=\"1.5 三目运算符\"></a>1.5 三目运算符</h5><ul>\n<li>作用：通过三目运算符实现简单的判断</li>\n<li>语法：<code>表达式a ？表达式b ：表达式c</code></li>\n<li>解释：<ol>\n<li>a为真，执行b，并返回b的结果；</li>\n<li>a为假，执行c，并返回c的结果；</li>\n</ol>\n</li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint a &#x3D; 10, b &#x3D; 20;\n\tint c;\n\t\n\tc &#x3D; (a &gt; b ? a : b);\n\tcout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;\n\n\t&#x2F;&#x2F;三目运算符表达式返回的是 变量，所以可以直接作为左值被赋值；\n\t(a &lt; b ? a : b) &#x3D; 100;\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n &#125;</code></pre>\n\n\n\n<h5 id=\"1-6-switch语句\"><a href=\"#1-6-switch语句\" class=\"headerlink\" title=\"1.6 switch语句\"></a>1.6 switch语句</h5><ul>\n<li>语法：</li>\n</ul>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">switch (表达式)\n&#123;\n    case 结果1:\n    执行语句;\n    break；\n    case 结果1:\n    执行语句;\n    break；\n    ...\n    default:\n    执行语句;\n    break；\n&#125;</code></pre>\n\n<ul>\n<li><p>注意：</p>\n<p>switch语句的表达式类型只能是整型或字符型；</p>\n<p>case后没有break语句，程序会一直向下执行；</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint value;\n\n\tcout &lt;&lt; &quot;Enter int value : &quot; &lt;&lt; endl;\n\tcin &gt;&gt; value;\n\n\tswitch (value)\n\t&#123;\n\tcase 10:\n\t\tcout &lt;&lt; &quot;Return S&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 9:\n\t\tcout &lt;&lt; &quot;Return A&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 8:\n\t\tcout &lt;&lt; &quot;Return A&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 7:\n\t\tcout &lt;&lt; &quot;Return B&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 6:\n\t\tcout &lt;&lt; &quot;Return B&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 5:\n\t\tcout &lt;&lt; &quot;Return C&quot; &lt;&lt; endl;\n\t\tbreak;\n\tcase 4:\n\t\tcout &lt;&lt; &quot;Return C&quot; &lt;&lt; endl;\n\t\tbreak;\n\tdefault:\n\t\tcout &lt;&lt; &quot;Return D&quot; &lt;&lt; endl;\n\t\tbreak;\n\t&#125;\n&#125;</code></pre>\n\n\n\n\n\n<h4 id=\"2-循环结构\"><a href=\"#2-循环结构\" class=\"headerlink\" title=\"2. 循环结构\"></a>2. 循环结构</h4><h5 id=\"2-1-while循环\"><a href=\"#2-1-while循环\" class=\"headerlink\" title=\"2.1 while循环\"></a>2.1 while循环</h5><ul>\n<li><p>作用：满足判断条件，执行循环语句</p>\n</li>\n<li><p>语法：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">while (判断条件)\n&#123;\n\t循环语句;\n&#125;</code></pre>\n</li>\n<li><p>案列：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint num &#x3D; 0;\n\n\twhile (num &lt; 10)\n\t&#123;\n\t\tcout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;\n\t\tnum++;\n\t&#125;\n&#125;\n</code></pre></li>\n</ul>\n<h5 id=\"2-2-while案列\"><a href=\"#2-2-while案列\" class=\"headerlink\" title=\"2.2 while案列\"></a>2.2 while案列</h5><ul>\n<li><p>随机生成 1 - 100 的数字，控制台输入数字，正确结束，错误则判断过大还是过小，直到正确为止（限定判断10次）。</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;time.h&gt; &#x2F;&#x2F;使用随机种子需要添加的头文件\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint randNum;\n\tint enterNum;\n\tint countNum &#x3D; 0;\n\n\t&#x2F;&#x2F;通过系统实时的时间作为当前随机数的随机种子\n\tsrand((unsigned int)time(NULL));\n\n\t&#x2F;&#x2F;此时的randNum为真随机\n\trandNum &#x3D; rand() % 100 + 1;\n\n\t&#x2F;&#x2F;每循环一次 countNum 加 1 ；为真继续执行，为假直接结束\n\twhile (countNum &lt; 10) \n\t&#123;\n\t\t&#x2F;&#x2F;显示当前执行的次数\n\t\tcout &lt;&lt; &quot;******** &quot; &lt;&lt; countNum + 1 &lt;&lt; &quot; ********&quot; &lt;&lt; endl; \n\n\t\tcout &lt;&lt; &quot;Enter Num : &quot;;\n\t\tcin &gt;&gt; enterNum;\n\n\t\tif (enterNum &gt; randNum)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;enter num is to big !\\n&quot; &lt;&lt; endl;\n\t\t\tcountNum++; &#x2F;&#x2F;只要enterNum !&#x3D; randNum 则 countNum 加 1\n\t\t&#125;\n\t\telse if (enterNum &lt; randNum)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;enter num is to small !\\n&quot; &lt;&lt; endl;\n\t\t\tcountNum++;\n\t\t&#125;\n\t\telse \n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;enter num is true !&quot; &lt;&lt; endl;\n\t\t\tbreak; &#x2F;&#x2F;enterNum &#x3D;&#x3D; randNum 则 结束\n\t\t&#125;\n\t&#125;\n\n\tcout &lt;&lt; &quot;\\nTrue num is : &quot; &lt;&lt; randNum &lt;&lt; endl; &#x2F;&#x2F;while 结束后 显示正确的随机数值\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"2-3-do…while-语句\"><a href=\"#2-3-do…while-语句\" class=\"headerlink\" title=\"2.3 do…while 语句\"></a>2.3 do…while 语句</h5><ul>\n<li><p>作用：先执行循环语句，再满足判断条件，执行循环语句</p>\n</li>\n<li><p>注意：do…while 与 while的区别在于，do…while 先执行一次循环语句，再判断条件是否满足继续执行</p>\n</li>\n<li><p>语法：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">do\n&#123;\n    循环语句;\n&#125;while (循环条件);</code></pre>\n\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint num &#x3D; 0;\n\n\tdo\n\t&#123;\n\t\tcout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;\n\t\tnum++;\n\t&#125; while (num &lt; 10);\n&#125;\n</code></pre></li>\n</ul>\n<h5 id=\"2-4-水仙花案列\"><a href=\"#2-4-水仙花案列\" class=\"headerlink\" title=\"2.4 水仙花案列\"></a>2.4 水仙花案列</h5><ul>\n<li><p>说明：一个三位的整数满足每一位的三次方的和依旧等于这个三位数 （do … while）</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint dNum &#x3D; 100; &#x2F;&#x2F;最小的三位数\n\n\tdo\n\t&#123;\n\t\tdouble a, b, c, d; &#x2F;&#x2F; a为百位，b为十位，c为个位，d为 a b c三次方的和\n\n\t\t&#x2F;&#x2F;pow(x, y) &#x3D;&#x3D; x 的 y 次方\n\t\ta &#x3D; pow(dNum &#x2F; 100, 3);\n\t\tb &#x3D; pow(dNum &#x2F; 10 % 10, 3);\n\t\tc &#x3D; pow(dNum % 10, 3);\n\t\td &#x3D; a + b + c;\n\n\t\t&#x2F;&#x2F;判断当前的三位数是不是水仙花数\n\t\tif (d &#x3D;&#x3D; dNum)\n\t\t&#123;\n\t\t\t&#x2F;&#x2F;条件为真时 打印水仙花数\n\t\t\tcout &lt;&lt; dNum &lt;&lt; endl;\n\t\t&#125;\n\t\tdNum++; &#x2F;&#x2F;每当while条件满足都执行一遍\n\t&#125; while (dNum &lt; 1000); &#x2F;&#x2F;判断当前是否是三位数\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"2-5-for-循环\"><a href=\"#2-5-for-循环\" class=\"headerlink\" title=\"2.5 for 循环\"></a>2.5 for 循环</h5><ul>\n<li><p>作用：满足条件，执行语句</p>\n</li>\n<li><p>语法：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">for (起始表达式; 循环条件; 循环体)\n&#123;\n\t循环语句;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tfor (int i &#x3D; 0; i &lt; 10; i++)\n\t&#123;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"2-6-for-循环案列\"><a href=\"#2-6-for-循环案列\" class=\"headerlink\" title=\"2.6 for 循环案列\"></a>2.6 for 循环案列</h5><ul>\n<li><p>说明：1 - 100 的区间数字，满足 各位 或 十位 或 倍数 与 7 有关，打印 yes，其余直接打印数字；</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tfor (int i &#x3D; 1; i &lt;&#x3D; 100; i++) &#x2F;&#x2F;循环打印 1 - 100 \n\t&#123;\n\t\t&#x2F;&#x2F;判断遍历的数字是否满足条件\n\t\tif (i % 10 &#x3D;&#x3D; 7 || i &#x2F; 10 % 10 &#x3D;&#x3D; 7 || i % 7 &#x3D;&#x3D; 0)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl; &#x2F;&#x2F;满足调件打印 yes\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\tcout &lt;&lt; i &lt;&lt; endl; &#x2F;&#x2F;不满足条件打印 原数字\n\t\t&#125;\n\t&#125;\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"2-7-嵌套循环\"><a href=\"#2-7-嵌套循环\" class=\"headerlink\" title=\"2.7 嵌套循环\"></a>2.7 嵌套循环</h5><ul>\n<li><p>作用：在循环语句内再添加循环，解决实际问题</p>\n</li>\n<li><p>描述：打印 10*10 的矩阵</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\"> #include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tfor (int i &#x3D; 0; i &lt; 10; i++)\n\t&#123;\n\t\tfor (int j &#x3D; 0; j &lt; 10; j++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;* &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"2-8-乘法表案列\"><a href=\"#2-8-乘法表案列\" class=\"headerlink\" title=\"2.8 乘法表案列\"></a>2.8 乘法表案列</h5><ul>\n<li><p>描述：打印乘法表</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tfor (int h &#x3D; 1; h &lt;&#x3D; 9; h++) &#x2F;&#x2F;行数\n\t&#123;\n\t\tfor (int v &#x3D; 1; v &lt;&#x3D; h; v++) &#x2F;&#x2F;列数，但不超过行数\n\t\t&#123;\n\t\t\tcout &lt;&lt; v &lt;&lt; &quot; * &quot; &lt;&lt; h &lt;&lt; &quot;\t&quot;; &#x2F;&#x2F;结果为 列数*行数&#x3D;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-跳转语句\"><a href=\"#3-跳转语句\" class=\"headerlink\" title=\"3. 跳转语句\"></a>3. 跳转语句</h4><h5 id=\"3-1-break语句\"><a href=\"#3-1-break语句\" class=\"headerlink\" title=\"3.1 break语句\"></a>3.1 break语句</h5><ul>\n<li>作用：用于跳出选择结构或者循环结构</li>\n<li>使用：<ul>\n<li>出现在switch语句中，终止case并跳出switch；</li>\n<li>出现在循环语句中，跳出循环；</li>\n<li>出现在嵌套循环中，跳出内层循环；</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-2-continue语句\"><a href=\"#3-2-continue语句\" class=\"headerlink\" title=\"3.2 continue语句\"></a>3.2 continue语句</h5><ul>\n<li>作用：在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一循环</li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;从1 -100 遍历100次\n\tfor (int i &#x3D; 1; i &lt;&#x3D; 100; i++)\n\t&#123;\n\t\t&#x2F;&#x2F;如果i 为偶数，则跳过当前循环，执行下一次遍历\n\t\tif (i % 2 &#x3D;&#x3D; 0)\n\t\t&#123;\n\t\t\tcontinue;\n\t\t&#125;\n\t\tcout &lt;&lt; i &lt;&lt; endl;\n\t&#125;\n&#125;</code></pre>\n\n\n\n<h5 id=\"3-3-goto语句\"><a href=\"#3-3-goto语句\" class=\"headerlink\" title=\"3.3 goto语句\"></a>3.3 goto语句</h5><ul>\n<li>作用：无条件跳转语句</li>\n<li>语法：<code>goto 标记;</code></li>\n<li>解释：程序执行到goto时，如果标记存在，怎直接跳转到标记处，并继续执行</li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tcout &lt;&lt; &quot;S&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;A&quot; &lt;&lt; endl;\n\n\tgoto GotoTarget; &#x2F;&#x2F;此处的 goto 语句标记为 GotoTarget\n\n\tcout &lt;&lt; &quot;B&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;C&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;D&quot; &lt;&lt; endl;\n\n\tGotoTarget: &#x2F;&#x2F;程序直接跳转至此处，并继续向下执行\n\tcout &lt;&lt; &quot;E&quot; &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n\n\n<h3 id=\"4-数组\"><a href=\"#4-数组\" class=\"headerlink\" title=\"4. 数组\"></a>4. 数组</h3><p>解释：数组就是相同类型数据的元素集合</p>\n<p>特点：</p>\n<ol>\n<li>元素类型相同</li>\n<li>数组由连续的内存位置组成</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>数组的命名不要和其他变量名重名</li>\n<li>数组的索引从下标0开始</li>\n</ol>\n<h4 id=\"1-一维数组\"><a href=\"#1-一维数组\" class=\"headerlink\" title=\"1. 一维数组\"></a>1. 一维数组</h4><h5 id=\"1-1-一维数组的定义\"><a href=\"#1-1-一维数组的定义\" class=\"headerlink\" title=\"1.1 一维数组的定义\"></a>1.1 一维数组的定义</h5><ol>\n<li><p>数据类型 数组名[数组长度];</p>\n</li>\n<li><p>数据类型 数组名[数组长度] &#x3D; {元素1，元素2，…..};</p>\n</li>\n<li><p>数据类型 数组名[] &#x3D; {元素1，元素2，…..};</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;1. 数据类型 数组名[数组长度];\n\tcout &lt;&lt; &quot;数据类型 数组名[数组长度]&quot; &lt;&lt; endl;\n\n\tint arr1[3];\n\tarr1[0] &#x3D; 1;\n\tarr1[1] &#x3D; 2;\n\tarr1[2] &#x3D; 3;\n\t\n\tfor (int i &#x3D; 0; i &lt; 3; i++)\n\t&#123;\n\t\tcout &lt;&lt; arr1[i] &lt;&lt; &quot;  &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t&#x2F;&#x2F;2. 数据类型 数组名[数组长度] &#x3D; &#123;元素1，元素2，.....&#125;;\n\tcout &lt;&lt; &quot;数据类型 数组名[数组长度] &#x3D; &#123;元素1，元素2，.....&#125;&quot; &lt;&lt; endl;\n\n\tint arr2[3] &#x3D; &#123; 1, 2, 4 &#125;;\n\t\n\tfor (int j &#x3D; 0; j &lt; 3; j++)\n\t&#123;\n\t\tcout &lt;&lt; arr2[j] &lt;&lt; &quot;  &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t&#x2F;&#x2F;3. 数据类型 数组名[] &#x3D; &#123;元素1，元素2，.....&#125;;\n\tcout &lt;&lt; &quot;数据类型 数组名[] &#x3D; &#123;元素1，元素2，.....&#125;&quot; &lt;&lt; endl;\n\n\tint arr3[] &#x3D; &#123;1, 2, 3&#125;;\n\n\tfor (int k &#x3D; 0; k &lt; 3; k++)\n\t&#123;\n\t\tcout &lt;&lt; arr1[k] &lt;&lt; &quot;  &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;</code></pre></li>\n</ol>\n<h5 id=\"1-2-一维数组名作用\"><a href=\"#1-2-一维数组名作用\" class=\"headerlink\" title=\"1.2 一维数组名作用\"></a>1.2 一维数组名作用</h5><p>作用：</p>\n<ol>\n<li><p>可以统计整个数组在内存中的长度</p>\n</li>\n<li><p>可以获取数组在内存中的首地址</p>\n</li>\n<li><p>可以获取数组元素的个数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint arr[10] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;\n\n\tcout &lt;&lt; &quot;arr数组占用的内存空间：&quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;arr数组单个元素占用空间：&quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;arr数组的元素个数：&quot; &lt;&lt; sizeof(arr)&#x2F;sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;arr数组的首地址：&quot; &lt;&lt; (int)arr &lt;&lt; endl;\n\tcout &lt;&lt; &quot;arr数组第一元素的地址：&quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;arr数组第二元素的地址：&quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;arr数组最后元素的地址：&quot; &lt;&lt; (int)&amp;arr[sizeof(arr) &#x2F; sizeof(arr[0])] &lt;&lt; endl;\n&#125;</code></pre></li>\n</ol>\n<h5 id=\"1-3-一维数组案列\"><a href=\"#1-3-一维数组案列\" class=\"headerlink\" title=\"1.3 一维数组案列\"></a>1.3 一维数组案列</h5><ul>\n<li><p>案列1：在给定的数组中，打印其中最大的元素；</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint arr[] &#x3D; &#123; 100, 200, 500, 300, 999, 1000, 888888 &#125;;\n\tint maxEle &#x3D; arr[0]; &#x2F;&#x2F;默认将数组中第一个元素作为最大值，存入maxEle\n\n\tfor (int i &#x3D; 0; i &lt; sizeof(arr) &#x2F; sizeof(arr[0]); i++)\n\t&#123;\n\t\tif (arr[i + 1] &gt; maxEle) &#x2F;&#x2F;将后一位的元素与默认的元素值进行比较\n\t\t&#123;\n\t\t\tmaxEle &#x3D; arr[i + 1]; &#x2F;&#x2F;如果后一位大于前一位，将后一位的值作为默认值存入maxEle\n\t\t&#125;\n\t&#125;\n\tcout &lt;&lt; &quot;Max element is : &quot; &lt;&lt; maxEle &lt;&lt; endl;\n&#125;</code></pre>\n\n\n</li>\n<li><p>案列2：将一个给定的数组，反向排列；</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint arr[] &#x3D; &#123; 1, 3, 2, 5, 4&#125;;\n\tint arrIndex &#x3D; 0; &#x2F;&#x2F;定义一个数组首元素的下标\n\tint arrEnd &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]) - 1; &#x2F;&#x2F;定义数组末元素的下标\n\tint arrTemp; &#x2F;&#x2F;定义一个临时数组元素的下标\n\n\tcout &lt;&lt; &quot;逆向前: &quot;;\n\n\tfor (int i &#x3D; 0; i &lt; sizeof(arr) &#x2F; sizeof(arr[0]); i++)\n\t&#123;\n\t\tcout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\twhile (arrIndex &lt;&#x3D; arrEnd) &#x2F;&#x2F;当首元素下标 &lt;&#x3D; 末元素下标时才执行\n\t&#123;\n\t\t&#x2F;&#x2F;互换两个下标元素的值\n\t\tarrTemp &#x3D; arr[arrIndex];\n\t\tarr[arrIndex] &#x3D; arr[arrEnd];\n\t\tarr[arrEnd] &#x3D; arrTemp;\n\n\t\t&#x2F;&#x2F;首元素下标加1\n\t\tarrIndex++;\n\t\t&#x2F;&#x2F;末元素下标减1\n\t\tarrEnd--;\n\t&#125;\n\n\tcout &lt;&lt; &quot;逆向后: &quot;;\n\n\tfor (int j &#x3D; 0; j &lt; sizeof(arr) &#x2F; sizeof(arr[0]); j++)\n\t&#123;\n\t\tcout &lt;&lt; arr[j] &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"1-4-冒泡排序法\"><a href=\"#1-4-冒泡排序法\" class=\"headerlink\" title=\"1.4 冒泡排序法\"></a>1.4 冒泡排序法</h5><p>作用：常用的排序算法，将数组内的元素进行排序</p>\n<p>原理：</p>\n<ol>\n<li><p>比较相邻的元素，如果第一个比第二个大，就互换它们的位置</p>\n</li>\n<li><p>对每一个相邻的两个元素进行这种比较，找到一个最大值</p>\n</li>\n<li><p>重复执行，每次执行后次数 -1</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint arr[] &#x3D; &#123; 5, 6, 3, 0, 4, 1, 2, 9, 7, 8 &#125;;\n\tint arrtemp;\n\n\tcout &lt;&lt; &quot;排序前：&quot;;\n\tfor (int a &#x3D; 0; a &lt; sizeof(arr) &#x2F; sizeof(arr[0]); a++)\n\t&#123;\n\t\tcout &lt;&lt; arr[a] &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\tfor (int i &#x3D; 0; i &lt; sizeof(arr) &#x2F; sizeof(arr[0]) - 1; i++) &#x2F;&#x2F;排序的论数 &#x3D; 数组元素个数 - 1\n\t&#123;\n\t\tfor (int j &#x3D; 0; j &lt; sizeof(arr) &#x2F; sizeof(arr[0]) - i - 1; j++) &#x2F;&#x2F;每轮排序的次数 &#x3D; 数组元素个数 - 排序的论数 -1\n\t\t&#123;\n\t\t\tif (arr[j] &gt; arr[j + 1]) &#x2F;&#x2F;每排序一次，满足条件就执行一次互换位置\n\t\t\t&#123;\n\t\t\t\tarrtemp &#x3D; arr[j];\n\t\t\t\tarr[j] &#x3D; arr[j + 1];\n\t\t\t\tarr[j + 1] &#x3D; arrtemp;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\tcout &lt;&lt; &quot;排序后：&quot;;\n\tfor (int b &#x3D; 0; b &lt; sizeof(arr) &#x2F; sizeof(arr[0]); b++)\n\t&#123;\n\t\tcout &lt;&lt; arr[b] &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;</code></pre></li>\n</ol>\n<h4 id=\"2-二维数组\"><a href=\"#2-二维数组\" class=\"headerlink\" title=\"2. 二维数组\"></a>2. 二维数组</h4><ul>\n<li>二维数组就是在一维数组的基础上增加一个维度</li>\n</ul>\n<h5 id=\"2-1-二维数组的定义\"><a href=\"#2-1-二维数组的定义\" class=\"headerlink\" title=\"2.1 二维数组的定义\"></a>2.1 二维数组的定义</h5><p>四种定义方式：</p>\n<ol>\n<li>数据类型 数组名 [行数] [列数]；</li>\n<li>数据类型 数组名 [行数] [列数] &#x3D; ｛｛数据1，数据2｝，｛数据3，数据4｝｝；</li>\n<li>数据类型 数组名 [行数] [列数] &#x3D; ｛数据1，数据2，数据3，数据4｝；</li>\n<li>数据类型 数组名 [] [列数] &#x3D; ｛数据1，数据2，数据3，数据4｝；</li>\n</ol>\n<p>第二种更直观，可读性更高</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;1. 数据类型 数组名[行数][列数]；\n\tint arr1[2][3];\n\t\n\tarr1[0][0] &#x3D; 1;\n\tarr1[0][1] &#x3D; 2;\n\tarr1[0][2] &#x3D; 3;\n\tarr1[1][0] &#x3D; 4;\n\tarr1[1][1] &#x3D; 5;\n\tarr1[1][2] &#x3D; 6;\n\n\tcout &lt;&lt; &quot;------数据类型 数组名[行数][列数]------&quot; &lt;&lt; endl &lt;&lt; &quot;\\t&quot;;\n\tfor (int a &#x3D; 0; a &lt; 2; a++)\n\t&#123;\n\t\tfor (int a1 &#x3D; 0; a1 &lt; 3; a1++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; arr1[a][a1] &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t&#x2F;&#x2F;2. 数据类型 数组名[行数][列数] &#x3D; &#123;｛数据1，数据2｝，｛数据3，数据4｝&#125;；\n\tint arr2[2][3] &#x3D;\n\t&#123;\n\t\t&#123;1, 2, 3&#125;,\n\t\t&#123;4, 5, 6&#125;\n\t&#125;;\n\n\tcout &lt;&lt; &quot;------数据类型 数组名[行数][列数] &#x3D; &#123;｛数据1，数据2｝，｛数据3，数据4｝&#125;------&quot; &lt;&lt; endl &lt;&lt; &quot;\\t&quot;;\n\tfor (int b &#x3D; 0; b &lt; 2; b++)\n\t&#123;\n\t\tfor (int b1 &#x3D; 0; b1 &lt; 3; b1++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; arr2[b][b1] &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t&#x2F;&#x2F;3. 数据类型 数组名[行数][列数] &#x3D; ｛数据1，数据2，数据3，数据4｝；\n\tint arr3[2][3] &#x3D; &#123; 1, 2, 3, 4, 5, 6 &#125;;\n\n\tcout &lt;&lt; &quot;------数据类型 数组名[行数][列数] &#x3D; ｛数据1，数据2，数据3，数据4｝------&quot; &lt;&lt; endl &lt;&lt; &quot;\\t&quot;;\n\tfor (int c &#x3D; 0; c &lt; 2; c++)\n\t&#123;\n\t\tfor (int c1 &#x3D; 0; c1 &lt; 3; c1++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; arr3[c][c1] &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t&#x2F;&#x2F;4. 数据类型 数组名[][列数] &#x3D; ｛数据1，数据2，数据3，数据4｝；\n\tint arr4[][3] &#x3D; &#123; 1, 2, 3, 4, 5, 6 &#125;;\n\n\tcout &lt;&lt; &quot;------数据类型 数组名[][列数] &#x3D; ｛数据1，数据2，数据3，数据4｝------&quot; &lt;&lt; endl &lt;&lt; &quot;\\t&quot;;\n\tfor (int d &#x3D; 0; d &lt; 2; d++)\n\t&#123;\n\t\tfor (int d1 &#x3D; 0; d1 &lt; 3; d1++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; arr4[d][d1] &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n<h5 id=\"2-2-二维数组名作用\"><a href=\"#2-2-二维数组名作用\" class=\"headerlink\" title=\"2.2 二维数组名作用\"></a>2.2 二维数组名作用</h5><ol>\n<li><p>查看二维数组所占空间</p>\n</li>\n<li><p>查看二维数组的首地址</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint arr[2][3] &#x3D;\n\t&#123;\n\t\t&#123;1, 2, 3&#125;,\n\t\t&#123;4, 5, 6&#125;\n\t&#125;;\n\n\tcout &lt;&lt; &quot;二维数组的大小：&quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组一行的大小：&quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组元素的大小：&quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组的行数：&quot; &lt;&lt; sizeof(arr) &#x2F; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组的列数：&quot; &lt;&lt; sizeof(arr[0]) &#x2F; sizeof(arr[0][0]) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;*************************&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F;地址\n\tcout &lt;&lt; &quot;二维数组的首地址：&quot; &lt;&lt; (int)arr &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第一行的地址：&quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第二行的地址：&quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第一个元素的地址：&quot; &lt;&lt; (int)&amp;arr[0][0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第二个元素的地址：&quot; &lt;&lt; (int)&amp;arr[0][1] &lt;&lt; endl;\n&#125;</code></pre></li>\n</ol>\n<h5 id=\"2-3-二维数组案列\"><a href=\"#2-3-二维数组案列\" class=\"headerlink\" title=\"2.3 二维数组案列\"></a>2.3 二维数组案列</h5><ul>\n<li><p>分别输出二维数组每一行的数值总和</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint num[3][3] &#x3D;\n\t&#123;\n\t\t&#123;100, 100, 100&#125;,\n\t\t&#123;80, 70, 60&#125;,\n\t\t&#123;10, 100, 90&#125;\n\t&#125;;\n\tstring name[] &#x3D; &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;;\n\n\tfor (int i &#x3D; 0; i &lt; 3; i++)\n\t&#123;\n\t\tint sum &#x3D; 0;\n\t\tfor (int j &#x3D; 0; j &lt; 3; j++)\n\t\t&#123;\n\t\t\tsum +&#x3D; num[i][j];\n\t\t&#125;\n\t\tcout &lt;&lt; name[i] &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; sum &lt;&lt; endl;\n\t&#125;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"5-函数\"><a href=\"#5-函数\" class=\"headerlink\" title=\"5. 函数\"></a>5. 函数</h3><p>作用：</p>\n<ul>\n<li>将一段经常使用的可复用性代码封装起来，作为一个函数，可重复调用</li>\n<li>一个较大的程序，一般分为多个执行程序模块，每个模块执行特定的功能</li>\n</ul>\n<h4 id=\"1-函数基础\"><a href=\"#1-函数基础\" class=\"headerlink\" title=\"1. 函数基础\"></a>1. 函数基础</h4><ul>\n<li>返回值类型</li>\n<li>函数名</li>\n<li>参数列表</li>\n<li>函数体语句</li>\n<li>return表达式</li>\n</ul>\n<h5 id=\"1-1-函数语法\"><a href=\"#1-1-函数语法\" class=\"headerlink\" title=\"1.1 函数语法\"></a>1.1 函数语法</h5><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">返回值类型 函数名 （参数列表）\n&#123;\n    函数体语句；\n    return 表达式；\n&#125;</code></pre>\n\n\n\n<h5 id=\"1-2-函数定义案列\"><a href=\"#1-2-函数定义案列\" class=\"headerlink\" title=\"1.2 函数定义案列\"></a>1.2 函数定义案列</h5><p>实现一个加法函数，通过传入两个整型数据，返回加法计算结果</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\n&#125;\n\nint add(int num1, int num2)\n&#123;\n\tint sum;\n\tsum &#x3D; num1 + num2;\n\n\treturn sum;\n&#125;</code></pre>\n\n\n\n<h5 id=\"1-3-函数的调用\"><a href=\"#1-3-函数的调用\" class=\"headerlink\" title=\"1.3 函数的调用\"></a>1.3 函数的调用</h5><p>功能：使用定义好的函数</p>\n<p>语法：函数名（参数）；</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nint add(int num1, int num2)\n&#123;\n\tint sum &#x3D; num1 + num2;\n\treturn sum;\n&#125;\n\nvoid main()\n&#123;\n\tint a &#x3D; 10;\n\tint b &#x3D; 20;\n\tint c;\n\tc &#x3D; add(10, 20);\n\t\n\tcout &lt;&lt; a &lt;&lt; &quot; + &quot; &lt;&lt; b &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;\n&#125;</code></pre>\n\n\n\n<h5 id=\"1-4-函数值传递\"><a href=\"#1-4-函数值传递\" class=\"headerlink\" title=\"1.4 函数值传递\"></a>1.4 函数值传递</h5><ul>\n<li><p>函数调用时实参将数值传入形参</p>\n</li>\n<li><p>值传递时，形参发生变化，不影响实参</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid swap(int num1, int num2)\n&#123;\n\tcout &lt;&lt; &quot;值传递前：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num1 &#x3D; &quot; &lt;&lt; num1 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num2 &#x3D; &quot; &lt;&lt; num2 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;***************&quot; &lt;&lt; endl;\n\n\tint temp;\n\ttemp &#x3D; num1;\n\tnum1 &#x3D; num2;\n\tnum2 &#x3D; temp;\n\n\tcout &lt;&lt; &quot;值传递后：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num1 &#x3D; &quot; &lt;&lt; num1 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;num2 &#x3D; &quot; &lt;&lt; num2 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;***************&quot; &lt;&lt; endl;\n&#125;\n\nvoid main()\n&#123;\n\tint a &#x3D; 10;\n\tint b &#x3D; 20;\n\n\tcout &lt;&lt; &quot;最先执行main中传递前 a值 和 b值&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n\tcout &lt;&lt; &quot;***************&quot; &lt;&lt; endl;\n\n\tswap(a, b);\n\n\tcout &lt;&lt; &quot;最后执行main中传递后 a值 和 b值&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"1-5-函数的常见样式\"><a href=\"#1-5-函数的常见样式\" class=\"headerlink\" title=\"1.5 函数的常见样式\"></a>1.5 函数的常见样式</h5><p>类型：</p>\n<ol>\n<li>无参无返</li>\n<li>有参无返</li>\n<li>无参有返</li>\n<li>有参有返</li>\n</ol>\n<p>示例：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F;1. 无参无返\nvoid demo1()\n&#123;\n\tcout &lt;&lt; &quot;无参无返&quot; &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F;2. 有参无返\nvoid demo2(string str)\n&#123;\n\tcout &lt;&lt; str &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F;3. 无参有返\nstring demo3()\n&#123;\n\tcout &lt;&lt; &quot;无参有返&quot; &lt;&lt; endl;\n\treturn &quot;无参有返&quot;;\n&#125;\n\n&#x2F;&#x2F;4. 有参有返\nstring demo4(string str)\n&#123;\n\tcout &lt;&lt; &quot;有参有返&quot; &lt;&lt; endl;\n\treturn str;\n&#125;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;1. 无参无返\n\tdemo1();\n\t&#x2F;&#x2F;2. 有参无返\n\tdemo2(&quot;有参无返&quot;);\n\t&#x2F;&#x2F;3. 无参有返\n\tdemo3();\n\t&#x2F;&#x2F;4. 有参有返\n\tdemo4(&quot;有参有返&quot;);\n&#125;</code></pre>\n\n\n\n<h5 id=\"1-6-函数的声明\"><a href=\"#1-6-函数的声明\" class=\"headerlink\" title=\"1.6 函数的声明\"></a>1.6 函数的声明</h5><ul>\n<li><p>作用：</p>\n<p>​\t告诉编辑器函数的名称以及如何调用函数，函数的实际主体可以单独定义</p>\n<p>​\t在main之前声明函数，函数主体的定义可以写在main之后，没有提前声明，函数只能定义在main之前</p>\n</li>\n<li><p>注意：函数可以声明多次，但函数的定义只能一次</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F;提前声明函数，函数主体就可以定义到main后面\nint maxValue(int a, int b);\n\nvoid main()\n&#123;\n\tcout &lt;&lt; &quot;MaxValue &#x3D; &quot; &lt;&lt; maxValue(10, 20) &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F;有了提前声明，此时，函数主体就可以定义到main后面\nint maxValue(int a, int b)\n&#123;\n\treturn a &gt; b ? a : b;\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"1-7-函数的分文件编写\"><a href=\"#1-7-函数的分文件编写\" class=\"headerlink\" title=\"1.7 函数的分文件编写\"></a>1.7 函数的分文件编写</h5><p>作用：</p>\n<ul>\n<li>让项目的代码更加清晰，可读性和维护性更高</li>\n</ul>\n<p>步骤：</p>\n<ol>\n<li>创建后缀名为 .h 的头文件</li>\n<li>创建后缀名为 .cpp 的源文件</li>\n<li>在头文件中写函数的声明</li>\n<li>在源文件中写函数的定义</li>\n<li>在main中调用函数源文件中的函数</li>\n</ol>\n<p>示例：</p>\n<ul>\n<li><p>头文件</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid swap(int a, int b);</code></pre>\n\n\n</li>\n<li><p>函数源文件</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;swap.h&quot;\n\nvoid swap(int a, int b)\n&#123;\n\tcout &lt;&lt; &quot;转换前：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n\tcout &lt;&lt; &quot;******************&quot; &lt;&lt; endl;\n\n\tint temp;\n\ttemp &#x3D; a;\n\ta &#x3D; b;\n\tb &#x3D; temp;\n\n\tcout &lt;&lt; &quot;转换后：&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n&#125;</code></pre>\n\n\n</li>\n<li><p>main文件</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &quot;swap.h&quot;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tswap(10, 20);\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"1-8-头源-main文件\"><a href=\"#1-8-头源-main文件\" class=\"headerlink\" title=\"1.8 头源 main文件\"></a>1.8 头源 main文件</h5><p>头文件：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 头文件中写入main函数需要用到的库以及函数的定义（明确函数的参数类型）\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\n#ifndef DEMO_FEATURE_H\n#define DEMO_FEATURE_H\n\nstruct personInfo\n&#123;\n    string name;\n    int age;\n&#125;;\n\nvoid printHello();\n\nint sumNum(int a, int b);\n\nvoid returnInfo(personInfo *s_per);\n\n#endif &#x2F;&#x2F;DEMO_FEATURE_H</code></pre>\n\n<p>源文件：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 源文件内写函数的具体内容\n&#x2F;&#x2F; 导入相关联的头文件\n\n#include &quot;feature.h&quot;\n\nvoid printHello()\n&#123;\n    cout &lt;&lt; &quot;Hello World&quot; &lt;&lt; endl;\n&#125;\n\nint sumNum(int a, int b)\n&#123;\n    int c &#x3D; a + b;\n    return c;\n&#125;\n\nvoid returnInfo(personInfo *s_per)\n&#123;\n    cout &lt;&lt; &quot;name: &quot; &lt;&lt; s_per-&gt;name &lt;&lt; &quot; age: &quot; &lt;&lt; s_per-&gt;age &lt;&lt; endl;\n&#125;</code></pre>\n\n<p>main文件：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 导入需要的头文件\n\n#include &quot;cmake-build-debug&#x2F;feature.h&quot;\n\nint main()\n&#123;\n    &#x2F;&#x2F; 无返回值函数\n    printHello();\n\n    &#x2F;&#x2F; 有返回值函数\n    int sum;\n    sum &#x3D; sumNum(10, 20);\n    cout &lt;&lt; &quot;sum &#x3D; &quot; &lt;&lt; sum &lt;&lt; endl;\n\n    &#x2F;&#x2F; 参数为结构体的函数\n    personInfo s_per &#x3D; &#123;&quot;FH&quot;, 22&#125;;\n    returnInfo(&amp;s_per);\n    return 0;\n&#125;</code></pre>\n\n\n\n\n\n<h3 id=\"6-指针\"><a href=\"#6-指针\" class=\"headerlink\" title=\"6. 指针\"></a>6. 指针</h3><h4 id=\"1-指针概念\"><a href=\"#1-指针概念\" class=\"headerlink\" title=\"1. 指针概念\"></a>1. 指针概念</h4><p>作用：</p>\n<ul>\n<li>可通过指针间接访问内存</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>内存编号从0开始记录，一般用16进制数字表示</li>\n<li>可利用指针变量保存地址</li>\n</ul>\n<h4 id=\"2-指针变量的定义和使用\"><a href=\"#2-指针变量的定义和使用\" class=\"headerlink\" title=\"2. 指针变量的定义和使用\"></a>2. 指针变量的定义和使用</h4><ul>\n<li><p>语法：</p>\n<p><code>数据类型* 指针变量名</code> &#x2F;&#x2F;定义指针</p>\n<p><code>指针变量名 = &amp;变量名</code> &#x2F;&#x2F;将定义的变量存储的内存地址给指针</p>\n<p><code>*指针变量名 = 值或变量名</code> &#x2F;&#x2F;通过指针间接的读写指向地址的值</p>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n  void main()\n  &#123;\n  \tint a &#x3D; 10; \n  \t&#x2F;&#x2F;定义一个指针变量\n  \tint* p_a;\n  \t\n  \t&#x2F;&#x2F;将变量a的地址给指针\n  \tp_a &#x3D; &amp;a;\n\n  \t&#x2F;&#x2F;查看两个变量的地址\n  \tcout &lt;&lt; &quot;a address is &quot; &lt;&lt; &amp;a &lt;&lt; endl;\n  \tcout &lt;&lt; &quot;p_a &#39;s value is &quot; &lt;&lt; p_a &lt;&lt; endl;\n\n  \tcout &lt;&lt; &quot;****************&quot; &lt;&lt; endl;\n\n  \t&#x2F;&#x2F;通 *指针变量名 &#x3D; 值 可以间接读写内存地址内的值\n  \t*p_a &#x3D; 1000;\n  \tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n  \tcout &lt;&lt; &quot;p_a &#x3D; &quot; &lt;&lt; *p_a &lt;&lt; endl;\n  &#125;</code></pre></li>\n</ul>\n<h4 id=\"3-指针占用的内存空间\"><a href=\"#3-指针占用的内存空间\" class=\"headerlink\" title=\"3. 指针占用的内存空间\"></a>3. 指针占用的内存空间</h4><ul>\n<li><p>说明：</p>\n<p>32位操作系统：指针占用4个字节</p>\n<p>64位操作系统：指针占用8个字节</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n  \nusing namespace std;\n  \nvoid main()\n&#123;\n  \tint a &#x3D; 10;\n  \tint* p_a &#x3D; &amp;a;\n  \n  \tcout &lt;&lt; &quot;sizeof (p_a) &#x3D; &quot; &lt;&lt; sizeof(p_a) &lt;&lt; endl;\n  \tcout &lt;&lt; &quot;sizeof (int*) &#x3D; &quot; &lt;&lt; sizeof(int*) &lt;&lt; endl;\n  \tcout &lt;&lt; &quot;sizeof (float*) &#x3D; &quot; &lt;&lt; sizeof(float*) &lt;&lt; endl;\n  \tcout &lt;&lt; &quot;sizeof (double*) &#x3D; &quot; &lt;&lt; sizeof(double*) &lt;&lt; endl;\n  \tcout &lt;&lt; &quot;sizeof (bool*) &#x3D; &quot; &lt;&lt; sizeof(bool*) &lt;&lt; endl;\n  \tcout &lt;&lt; &quot;sizeof (char*) &#x3D; &quot; &lt;&lt; sizeof(char*) &lt;&lt; endl;\n  \tcout &lt;&lt; &quot;sizeof (string*) &#x3D; &quot; &lt;&lt; sizeof(string*) &lt;&lt; endl;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"4-空指针和野指针\"><a href=\"#4-空指针和野指针\" class=\"headerlink\" title=\"4. 空指针和野指针\"></a>4. 空指针和野指针</h4><h5 id=\"4-1-空指针\"><a href=\"#4-1-空指针\" class=\"headerlink\" title=\"4.1 空指针\"></a>4.1 空指针</h5><ul>\n<li><p>空指针：指针变量指向内存中编号为0的空间</p>\n</li>\n<li><p>用途：初始化指针变量</p>\n</li>\n<li><p>空指针指向的内存空间是不可访问的（0-255是系统占用的）</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;指针变量指向内存中编号为0的空间\n\t&#x2F;&#x2F;初始化指针变量\n\tint* p &#x3D; NULL;\n\n\t&#x2F;&#x2F;空指针指向的内存空间是不可访问的（0 - 255是系统占用的）\n\tcout &lt;&lt; p &lt;&lt; endl;\n\n\t*p &#x3D; 10; &#x2F;&#x2F;提示该句无效\n\tcout &lt;&lt; p &lt;&lt; endl; &#x2F;&#x2F;什么都没有\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"4-2-野指针\"><a href=\"#4-2-野指针\" class=\"headerlink\" title=\"4.2 野指针\"></a>4.2 野指针</h5><ul>\n<li><p>野指针：指向非法的内存空间</p>\n</li>\n<li><p>注意：程序中尽量避免出现野指针</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint* p &#x3D; (int*)0x1100;\n\tcout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;打印指针指向的内存值无效\n&#125; </code></pre></li>\n</ul>\n<h4 id=\"5-const修饰指针\"><a href=\"#5-const修饰指针\" class=\"headerlink\" title=\"5. const修饰指针\"></a>5. const修饰指针</h4><ul>\n<li><p>三种情况：</p>\n<ol>\n<li>const修饰指针 –常量指针</li>\n<li>const修饰常量 –指针常量</li>\n<li>const即修饰指针又修饰常量</li>\n</ol>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint a &#x3D; 10;\n\tint b &#x3D; 20;\n\n\t&#x2F;&#x2F;1. const修饰指针 --常量指针\n\tconst int* p &#x3D; &amp;a; &#x2F;&#x2F; &#x3D;&gt; const *p (常量指针)\n\t*p &#x3D; b; &#x2F;&#x2F;错误：指针指向的内存空间值不能修改\n\tp &#x3D; &amp;b; &#x2F;&#x2F;指针的地址编号可以改\n\n\t&#x2F;&#x2F;2. const修饰常量 --指针常量\n\tint* const p1 &#x3D; &amp;a; &#x2F;&#x2F; &#x3D;&gt; const p1 (指针常量)\n\t*p1 &#x3D; b; &#x2F;&#x2F;指针指向的内存空间的值可以修改\n\tp1 &#x3D; &amp;b; &#x2F;&#x2F;错误：指针的地址编号不能修改\n\n\t&#x2F;&#x2F;3. const即修饰指针又修饰常量\n\tconst int* const p2 &#x3D; &amp;a;\n\t*p2 &#x3D; b; &#x2F;&#x2F;错误：指针指向的内存空间值不能修改\n\tp2 &#x3D; &amp;b; &#x2F;&#x2F;错误：指针的地址编号不能修改\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"6-指针和数组\"><a href=\"#6-指针和数组\" class=\"headerlink\" title=\"6. 指针和数组\"></a>6. 指针和数组</h4><ul>\n<li><p>利用指针访问数组中的元素</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main()\n&#123;\n\tint arr[] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;\n\tint* p &#x3D; arr;\n\n\tcout &lt;&lt; &quot;arr[0] &#x3D; &quot; &lt;&lt; arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;*p &#x3D; &quot; &lt;&lt; *p &lt;&lt; endl;\n\n\tfor (int i &#x3D; 0; i &lt; sizeof(arr) &#x2F; sizeof(arr[0]); i++)\n\t&#123;\n\t\tcout &lt;&lt; *p &lt;&lt; endl;\n\t\tcout &lt;&lt; p &lt;&lt; endl; &#x2F;&#x2F;每次遍历的内存地址\n\t\tp++;&#x2F;&#x2F;*p 是指针指向内存空间的值，p 是内存地址，p++ 内存地址向后移8个单位（64位）4个单位（32位）\n\t&#125;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"7-指针和函数\"><a href=\"#7-指针和函数\" class=\"headerlink\" title=\"7. 指针和函数\"></a>7. 指针和函数</h4><ul>\n<li><p>利用指针作为函数的实参，可以修改传入函数的实参值</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid swap(int* p1, int* p2) &#x2F;&#x2F;将指针指向内存的值进行调换\n&#123;\n\tint temp &#x3D; *p1;\n\t*p1 &#x3D; *p2;\n\t*p2 &#x3D; temp;\n\t&#x2F;&#x2F;此时 &amp;a &amp;b 的地址没变，但地址内存的值变了\n&#125;\n\nvoid main()\n&#123;\n\tint a &#x3D; 10;\n\tint b &#x3D; 20;\n\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n\n\tswap(&amp;a, &amp;b);\n\n\tcout &lt;&lt; &quot;swap a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;swap b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"8-指针-数组-函数\"><a href=\"#8-指针-数组-函数\" class=\"headerlink\" title=\"8. 指针 数组 函数\"></a>8. 指针 数组 函数</h4><ul>\n<li><p>案列：封装一个函数，用冒泡排序，实现对整型数组的升序排序</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid upSort(int* arrIndex, int arrlength)\n&#123;\n\tfor (int i &#x3D; 0; i &lt; arrlength - 1; i++)\n\t&#123;\n\t\tfor (int j &#x3D; 0; j &lt; arrlength - i - 1; j++)\n\t\t&#123;\n\t\t\tif (arrIndex[j] &gt; arrIndex[j + 1])\n\t\t\t&#123;\n\t\t\t\tint temp &#x3D; arrIndex[j];\n\t\t\t\tarrIndex[j] &#x3D; arrIndex[j + 1];\n\t\t\t\tarrIndex[j + 1] &#x3D; temp;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n\nvoid printArray(int* arrIndex, int arrLength)\n&#123;\n\tfor (int i &#x3D; 0; i &lt; arrLength; i++)\n\t&#123;\n\t\tcout &lt;&lt; arrIndex[i] &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nvoid main()\n&#123;\n\tint arr[] &#x3D; &#123;4, 3, 2, 1, 8, 6, 9, 5, 7, 0&#125;;\n\tint arrLength &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);\n\n\tprintArray(arr, arrLength);\n\tupSort(arr, arrLength);\n\tprintArray(arr, arrLength);\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"9-指针补充\"><a href=\"#9-指针补充\" class=\"headerlink\" title=\"9. 指针补充\"></a>9. 指针补充</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p;\n\n&#x2F;&#x2F; 指针数组，数组里面可以存放3个int*\nint *arr1[3] &#x3D; &#123;p, p, p&#125;;\n\n&#x2F;&#x2F; 用于指向数组的指针\nint (*arr2)[3];</code></pre>\n\n\n\n\n\n\n\n<h3 id=\"7-结构体\"><a href=\"#7-结构体\" class=\"headerlink\" title=\"7. 结构体\"></a>7. 结构体</h3><h4 id=\"1-结构体基本概念\"><a href=\"#1-结构体基本概念\" class=\"headerlink\" title=\"1. 结构体基本概念\"></a>1. 结构体基本概念</h4><ul>\n<li>结构体属于用户自定义的数据类型，允许用户存储不同的数据类型</li>\n</ul>\n<h4 id=\"2-结构体定义和使用\"><a href=\"#2-结构体定义和使用\" class=\"headerlink\" title=\"2. 结构体定义和使用\"></a>2. 结构体定义和使用</h4><ul>\n<li><p>语法：<code>struct 结构体名 ｛结构体成员列表&#125;;</code></p>\n</li>\n<li><p>创建：</p>\n<ol>\n<li>struct 结构体名 变量名；</li>\n<li>struct 结构体名 &#x3D; ｛成员1值，成员2值，…};</li>\n<li>定义结构体时创建变量</li>\n</ol>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\n&#x2F;&#x2F;语法：struct 结构体名 ｛结构体成员列表｝；\nstruct studentID\n&#123;\n\tstring name;\n\tint age;\n&#125;;\n\nvoid main()\n&#123;\n\t&#x2F;&#x2F;1. struct 结构体名 变量名；\n\tstruct studentID s1;\n\ts1.age &#x3D; 23;\n\ts1.name &#x3D; &quot;FH&quot;;\n\tcout &lt;&lt; &quot;name: &quot; &lt;&lt; s1.name &lt;&lt; &quot;  age: &quot; &lt;&lt; s1.age &lt;&lt; endl;\n\n\t&#x2F;&#x2F;2. struct 结构体名 &#x3D; ｛成员1值，成员2值，...｝；\n\tstruct studentID s2 &#x3D; &#123;&quot;XX&quot;, 99&#125;;\n\tcout &lt;&lt; &quot;name: &quot; &lt;&lt; s2.name &lt;&lt; &quot;  age: &quot; &lt;&lt; s2.age &lt;&lt; endl;\n\t\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-结构体数组\"><a href=\"#3-结构体数组\" class=\"headerlink\" title=\"3. 结构体数组\"></a>3. 结构体数组</h4><ul>\n<li><p>作用：将自定义的结构体存入数组中方便管理</p>\n</li>\n<li><p>语法：<code>struct 结构体名 数组名[元素个数] = ｛｛｝，｛｝，... ，｛｝&#125;;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct stuInfo\n&#123;\n\tstring name;\n\tint age;\n&#125;;\n\nvoid main()\n&#123;\n\tstruct stuInfo stuInfoArr[] &#x3D;\n\t&#123;\n\t\t&#123;&quot;XX&quot;, 66&#125;,\n\t\t&#123;&quot;YY&quot;, 99&#125;\n\t&#125;;\n\n\t&#x2F;&#x2F;修改结构体数组中第0个元素的值\n\tstuInfoArr[0] &#x3D; &#123; &quot;FH&quot;, 23 &#125;;\n\n\t&#x2F;&#x2F;修改结构体数组中第1个元素的值\n\tstuInfoArr[1].name &#x3D; &quot;CYL&quot;;\n\tstuInfoArr[1].age &#x3D; 22;\n\n\tfor (int i &#x3D; 0; i &lt; sizeof(stuInfoArr) &#x2F; sizeof(stuInfoArr[0]); i++)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Name: &quot; &lt;&lt; stuInfoArr[i].name\n\t\t\t&lt;&lt; &quot;  Age: &quot; &lt;&lt; stuInfoArr[i].age\n\t\t\t&lt;&lt; endl;\n\t&#125;\n&#125; </code></pre></li>\n</ul>\n<h4 id=\"4-结构体指针\"><a href=\"#4-结构体指针\" class=\"headerlink\" title=\"4. 结构体指针\"></a>4. 结构体指针</h4><ul>\n<li><p>作用：通过指针访问或修改结构体中的成员</p>\n</li>\n<li><p>利用操作符 -&gt; 可以通过结构体指针访问结构体属性</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct stuInfo\n&#123;\n\tstring name;\n\tint age;\n&#125;;\n\nvoid main()\n&#123;\n\tstuInfo stu &#x3D; &#123; &quot;FH&quot;, 23 &#125;;\n\tstuInfo* p_stu &#x3D; &amp;stu;\n\n\tcout &lt;&lt; &quot;Name: &quot; &lt;&lt; p_stu-&gt;name &lt;&lt; &quot;  Age: &quot; &lt;&lt; p_stu-&gt;age &lt;&lt; endl;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"5-结构体嵌套结构体\"><a href=\"#5-结构体嵌套结构体\" class=\"headerlink\" title=\"5. 结构体嵌套结构体\"></a>5. 结构体嵌套结构体</h4><ul>\n<li><p>作用：</p>\n<p>结构体中的成员可以是另一个结构体</p>\n<p>结构体中可以定义另一个结构体成员</p>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct stuInfo\n&#123;\n\tstring name;\n\tint age;\n&#125;;\n\nstruct teaInfo\n&#123;\n\tstring name;\n\tint id;\n\tstruct stuInfo stu;\n&#125;;\n\nvoid main()\n&#123;\n\tstuInfo s1 &#x3D; &#123; &quot;FH&quot;, 23 &#125;;\n\t&#x2F;&#x2F;stuInfo s2 &#x3D; &#123; &quot;CYL&quot;, 22 &#125;;\n\n\tteaInfo t1 &#x3D; &#123; &quot;XX&quot;, 1001, s1&#125;;\n\t\n\tteaInfo t2;\n\tt2.name &#x3D; &quot;YY&quot;;\n\tt2.id &#x3D; 1002;\n\tt2.stu.name &#x3D; &quot;CYL&quot;;\n\tt2.stu.age &#x3D; 22;\n\n\tcout &lt;&lt; &quot;TeacherName: &quot; &lt;&lt; t1.name &lt;&lt; &quot;  TeacherID: &quot; &lt;&lt; t1.id \n\t\t&lt;&lt; &quot;  StudentName: &quot; &lt;&lt; s1.name &lt;&lt; &quot;  StudentAge: &quot; &lt;&lt; s1.age &lt;&lt; endl;\n\tcout &lt;&lt; &quot;TeacherName: &quot; &lt;&lt; t2.name &lt;&lt; &quot;  TeacherID: &quot; &lt;&lt; t2.id \n\t\t&lt;&lt; &quot;  StudentName: &quot; &lt;&lt; t2.stu.name &lt;&lt; &quot;  StudentAge: &quot; &lt;&lt; t2.stu.name &lt;&lt; endl;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"6-结构体做函数参数\"><a href=\"#6-结构体做函数参数\" class=\"headerlink\" title=\"6. 结构体做函数参数\"></a>6. 结构体做函数参数</h4><ul>\n<li><p>作用：将结构体作为参数向函数中传递</p>\n</li>\n<li><p>方式：</p>\n<ol>\n<li>值传递</li>\n<li>地址传递</li>\n</ol>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct stuInfo\n&#123;\n\tstring name;\n\tint age;\n&#125;;\n\nvoid printInfo(stuInfo s)\n&#123;\n\tcout &lt;&lt; &quot;Value Transfer: &quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Modify Argument before: &quot;;\n\tcout &lt;&lt; &quot;Name: &quot; &lt;&lt; s.name &lt;&lt; &quot;  Age: &quot; &lt;&lt; s.age &lt;&lt; endl;\n\n\ts.age &#x3D; 99;\n\tcout &lt;&lt; &quot;Modify Argument later: &quot;;\n\tcout &lt;&lt; &quot;Name: &quot; &lt;&lt; s.name &lt;&lt; &quot;  Age: &quot; &lt;&lt; s.age &lt;&lt; endl;\n&#125;\n\nvoid printInfo2(stuInfo* p_s1)\n&#123;\n\tcout &lt;&lt; &quot;Pointer Address Transfer: &quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Modify Argument before: &quot;;\n\tcout &lt;&lt; &quot;Name: &quot; &lt;&lt; p_s1-&gt;name &lt;&lt; &quot;  Age: &quot; &lt;&lt; p_s1-&gt;age &lt;&lt; endl;\n\n\tp_s1-&gt;age &#x3D; 99;\n\tcout &lt;&lt; &quot;Modify Argument later: &quot;;\n\tcout &lt;&lt; &quot;Name: &quot; &lt;&lt; p_s1-&gt;name &lt;&lt; &quot;  Age: &quot; &lt;&lt; p_s1-&gt;age &lt;&lt; endl;\n&#125;\n\nvoid main()\n&#123;\n\tstuInfo s &#x3D; &#123;&quot;FH&quot;, 23&#125;;\n\tstuInfo p_s1 &#x3D; &#123; &quot;CYL&quot;, 22 &#125;;\n\n\tprintInfo(s);\n\tcout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; endl;\n\tprintInfo2(&amp;p_s1);\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"7-结构体const应用\"><a href=\"#7-结构体const应用\" class=\"headerlink\" title=\"7. 结构体const应用\"></a>7. 结构体const应用</h4><ul>\n<li><p>作用：用const防止误操作</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct stuInfo\n&#123;\n\tstring name;\n\tint age;\n&#125;;\n\nvoid printInfo(const stuInfo* p_s)\n&#123;\n\t&#x2F;&#x2F;p_s-&gt;age &#x3D; 99; &#x2F;&#x2F;const 限定修饰后的结构体 内存值不能被修改\n\tcout &lt;&lt; &quot;Name: &quot; &lt;&lt; p_s-&gt;name &lt;&lt; &quot;  Age: &quot; &lt;&lt; p_s-&gt;age &lt;&lt; endl;\n&#125;\n\nvoid main()\n&#123;\n\tstuInfo p_s &#x3D; &#123;&quot;FH&quot;, 23&#125;;\n\tprintInfo(&amp;p_s);\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"8-结构体案列\"><a href=\"#8-结构体案列\" class=\"headerlink\" title=\"8. 结构体案列\"></a>8. 结构体案列</h4><h5 id=\"8-1-案列1\"><a href=\"#8-1-案列1\" class=\"headerlink\" title=\"8.1 案列1\"></a>8.1 案列1</h5><ul>\n<li><p>描述：三位老师，每位老师下五名学生</p>\n</li>\n<li><p>要求：设计老师，学生的结构体，老师结构体内有老师姓名和存放学生的数组；学生结构体内有姓名，年龄；创建数组存放老师；通过函数给老师及其下学生赋值，并打印</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;time.h&gt;\n\nusing namespace std;\n\nstruct stuInfo\n&#123;\n\tstring name;\n\tint age;\n&#125;;\n\nstruct teaInfo\n&#123;\n\tstring name;\n\tstuInfo sArr[5];\n&#125;;\n\nvoid noteValue(teaInfo tArr[], int tLength)\n&#123;\n\tstring nameSeed &#x3D; &quot;ABCDE&quot;;\n\tfor (int i &#x3D; 0; i &lt; tLength; i++)\n\t&#123;\n\t\ttArr[i].name &#x3D; &quot;Tea_&quot;;\n\t\ttArr[i].name +&#x3D; nameSeed[i];\n\n\t\tfor (int j &#x3D; 0; j &lt; 5; j++)\n\t\t&#123;\n\t\t\ttArr[i].sArr[j].name &#x3D; &quot;Stu_&quot;;\n\t\t\ttArr[i].sArr[j].name +&#x3D; nameSeed[j];\n\t\t\tint ranAge &#x3D; rand() % 21 + 10;\n\t\t\ttArr[i].sArr[j].age &#x3D; ranAge;\n\t\t&#125;\n\t&#125;\n&#125;\n\nvoid printInfo(teaInfo tArr[], int tLength)\n&#123;\n\tfor (int i &#x3D; 0; i &lt; tLength; i++)\n\t&#123;\n\t\tcout &lt;&lt; tArr[i].name &lt;&lt; endl;\n\t\tfor (int j &#x3D; 0; j &lt; 5; j++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;\\t&quot; &lt;&lt; &quot;Name: &quot; &lt;&lt; tArr[i].sArr[j].name &lt;&lt; &quot;  Age: &quot; &lt;&lt; tArr[i].sArr[j].age &lt;&lt; endl;\n\t\t&#125;\n\t&#125;\n&#125;\n\nvoid main()\n&#123;\n\tteaInfo tArr[3];\n\tint tLength &#x3D; sizeof(tArr) &#x2F; sizeof(tArr[0]);\n\tsrand((unsigned int)time(NULL));\n\tnoteValue(tArr, tLength);\n\tprintInfo(tArr, tLength);\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"8-2-案列2\"><a href=\"#8-2-案列2\" class=\"headerlink\" title=\"8.2 案列2\"></a>8.2 案列2</h5><ul>\n<li><p>描述：设计一个角色，包含姓名，年龄，性别；创建结构体数组，存放3个角色；通过冒泡排序，将角色按照年龄大小升序排序，并打印</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &quot;Struct_demo8.h&quot;\n\nusing namespace std;\n\nstruct roleInfo\n&#123;\n\tstring name;\n\tint age;\n\tstring sex;\n&#125;;\n\nvoid upSort(roleInfo rArr[], int rLength)\n&#123;\n\tfor (int i &#x3D; 0; i &lt; rLength - 1; i++)\n\t&#123;\n\t\tfor (int j &#x3D; 0; j &lt; rLength - i - 1; j++)\n\t\t&#123;\n\t\t\tif (rArr[j].age &gt; rArr[j + 1].age)\n\t\t\t&#123;\n\t\t\t\troleInfo tempInfo &#x3D; rArr[j];\n\t\t\t\trArr[j] &#x3D; rArr[j + 1];\n\t\t\t\trArr[j + 1] &#x3D; tempInfo;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n\nvoid printInfo(roleInfo rArr[], int rlength)\n&#123;\n\tfor (int i &#x3D; 0; i &lt; rlength; i++)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Name: &quot; &lt;&lt; rArr[i].name &lt;&lt; &quot;  Age: &quot; &lt;&lt; rArr[i].age &lt;&lt; &quot;  Sex: &quot; &lt;&lt; rArr[i].sex &lt;&lt; endl;\n\t&#125;\n&#125;\n\nvoid main()\n&#123;\n\troleInfo rArr[] &#x3D;\n\t&#123;\n\t\t&#123;&quot;FH&quot;, 23, &quot;M&quot;&#125;,\n\t\t&#123;&quot;MM&quot;, 22, &quot;W&quot;&#125;,\n\t\t&#123;&quot;XY&quot;, 21, &quot;W&quot;&#125;\n\t&#125;;\n\n\tint rlength &#x3D; sizeof(rArr) &#x2F; sizeof(rArr[0]);\n\n\tupSort(rArr, rlength);\n\tprintInfo(rArr, rlength);\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"8-const补充\"><a href=\"#8-const补充\" class=\"headerlink\" title=\"8. const补充\"></a>8. const补充</h3><ul>\n<li><code>const</code>修饰的是<code>其右边</code>的内容</li>\n<li><code>const</code>的位置带来的效果与<code>变量类型名</code>，没有联系</li>\n</ul>\n<h4 id=\"8-1-const多种情况\"><a href=\"#8-1-const多种情况\" class=\"headerlink\" title=\"8.1 const多种情况\"></a>8.1 const多种情况</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int age &#x3D; 10;\n\nconst int *p1 &#x3D; &amp;age;\n# &#x3D;&gt; const 修饰的是 *p1，*p1 不可更改\n# &#x3D;&gt; p1 不受影响\n\nint const *p2 &#x3D; &amp;age;\n# &#x3D;&gt; const 修饰的是 *p2，*p2 不可更改\n# &#x3D;&gt; p2 不受影响\n\nint * const p3 &#x3D; &amp;age;\n# &#x3D;&gt; const 修饰的是 p3，p3 不可更改\n# &#x3D;&gt; *p3 不受影响\n\nconst int * const p4 &#x3D; &amp;age;\n# &#x3D;&gt; const 修饰的是 *p4 和 p4，*p4 和 p4 不可更改\n\nint const * const p5 &#x3D; &amp;age;\n# &#x3D;&gt; const 修饰的是 *p5 和 p5，*p5 和 p5 不可更改</code></pre>\n\n\n\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">struct Student &#123;int age;&#125;;\n\nStudent stu1 &#x3D; &#123;10&#125;;\nStudent stu2 &#x3D; &#123;20&#125;;\n\nconst Student *p_Stu1 &#x3D; &amp;stu1;\n# &#x3D;&gt; const 在最左边，修饰的是 *p_Stu1 (值常量)\n# &#x3D;&gt; p_Stu1 是 指针，不受影响\n\n# *p_Stu1 &#x3D; stu2; (报错)\n# (*p_Stu1).age &#x3D; 20; (报错)\n# p_Stu1-&gt;age &#x3D; 20; (报错)\n# p_Stu1 &#x3D; &amp;stu2; (正确)\n\nStudent * const p_Stu2 &#x3D; &amp;stu2;\n# &#x3D;&gt; const 在 p_Stu2 左边，修饰的是 p_Stu2 (指针常量)\n# &#x3D;&gt; *p_Stu2 是 值，不受影响\n\n# *p_Stu2 &#x3D; stu1; (正确)\n# (*p_Stu2).age &#x3D; 30; (正确)\n# p_Stu2-&gt;age &#x3D; 30; (正确)\n# p_Stu2 &#x3D; &amp;stu1; (错误)</code></pre>\n\n","text":"C++_基础[toc] 1. 第一阶段1. HelloWorld#include &lt;iostream&gt; using namespace std; void main() &#123; cout &lt;&lt; &quot;hello world&quot; &lt;...","link":"","photos":[],"count_time":{"symbolsCount":"44k","symbolsTime":"40 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">C++_基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">1. 第一阶段</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-HelloWorld\"><span class=\"toc-text\">1. HelloWorld</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">2. 变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">3. 常量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">4. 标识符命名规则</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2. 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%95%B4%E5%9E%8B\"><span class=\"toc-text\">1. 整型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-sizeof-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">2. sizeof 关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-1-sizeof%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">2.1 sizeof补充</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%B5%AE%E7%82%B9%E5%9E%8B\"><span class=\"toc-text\">3. 浮点型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%AD%97%E7%AC%A6%E5%9E%8B\"><span class=\"toc-text\">4. 字符型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">5. 转义字符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">6. 字符串类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">7. 布尔类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-%E8%87%AA%E5%A2%9E%E8%87%AA%E5%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">9. 自增自减的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">10. 逻辑运算符</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3. 程序流程结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1. 选择结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-if-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">1.1 if 语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-%E5%A4%9A%E6%9D%A1%E4%BB%B6if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">1.2 多条件if语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-%E5%B5%8C%E5%A5%97if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">1.3 嵌套if语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4-%E6%A1%88%E5%88%97\"><span class=\"toc-text\">1.4 案列</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-5-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.5 三目运算符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-6-switch%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">1.6 switch语句</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2. 循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-1-while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">2.1 while循环</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-while%E6%A1%88%E5%88%97\"><span class=\"toc-text\">2.2 while案列</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-do%E2%80%A6while-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.3 do…while 语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%A1%88%E5%88%97\"><span class=\"toc-text\">2.4 水仙花案列</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-5-for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">2.5 for 循环</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-6-for-%E5%BE%AA%E7%8E%AF%E6%A1%88%E5%88%97\"><span class=\"toc-text\">2.6 for 循环案列</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-7-%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">2.7 嵌套循环</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-8-%E4%B9%98%E6%B3%95%E8%A1%A8%E6%A1%88%E5%88%97\"><span class=\"toc-text\">2.8 乘法表案列</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%B7%B3%E8%BD%AC%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3. 跳转语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-break%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.1 break语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-continue%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.2 continue语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-goto%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.3 goto语句</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">4. 数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">1. 一维数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1.1 一维数组的定义</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%90%8D%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1.2 一维数组名作用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%A1%88%E5%88%97\"><span class=\"toc-text\">1.3 一维数组案列</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%B3%95\"><span class=\"toc-text\">1.4 冒泡排序法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">2. 二维数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-1-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">2.1 二维数组的定义</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%90%8D%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">2.2 二维数组名作用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%A1%88%E5%88%97\"><span class=\"toc-text\">2.3 二维数组案列</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">5. 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">1. 函数基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-%E5%87%BD%E6%95%B0%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1.1 函数语法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E6%A1%88%E5%88%97\"><span class=\"toc-text\">1.2 函数定义案列</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">1.3 函数的调用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4-%E5%87%BD%E6%95%B0%E5%80%BC%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">1.4 函数值传递</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-5-%E5%87%BD%E6%95%B0%E7%9A%84%E5%B8%B8%E8%A7%81%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">1.5 函数的常见样式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-6-%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">1.6 函数的声明</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-7-%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%86%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">1.7 函数的分文件编写</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-8-%E5%A4%B4%E6%BA%90-main%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1.8 头源 main文件</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%8C%87%E9%92%88\"><span class=\"toc-text\">6. 指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%8C%87%E9%92%88%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 指针概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 指针变量的定义和使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%8C%87%E9%92%88%E5%8D%A0%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">3. 指针占用的内存空间</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E7%A9%BA%E6%8C%87%E9%92%88%E5%92%8C%E9%87%8E%E6%8C%87%E9%92%88\"><span class=\"toc-text\">4. 空指针和野指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-%E7%A9%BA%E6%8C%87%E9%92%88\"><span class=\"toc-text\">4.1 空指针</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-%E9%87%8E%E6%8C%87%E9%92%88\"><span class=\"toc-text\">4.2 野指针</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-const%E4%BF%AE%E9%A5%B0%E6%8C%87%E9%92%88\"><span class=\"toc-text\">5. const修饰指针</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">6. 指针和数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-%E6%8C%87%E9%92%88%E5%92%8C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">7. 指针和函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-%E6%8C%87%E9%92%88-%E6%95%B0%E7%BB%84-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">8. 指针 数组 函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-%E6%8C%87%E9%92%88%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">9. 指针补充</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">7. 结构体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%BB%93%E6%9E%84%E4%BD%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 结构体基本概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 结构体定义和使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">3. 结构体数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88\"><span class=\"toc-text\">4. 结构体指针</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E7%BB%93%E6%9E%84%E4%BD%93%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">5. 结构体嵌套结构体</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E7%BB%93%E6%9E%84%E4%BD%93%E5%81%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">6. 结构体做函数参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-%E7%BB%93%E6%9E%84%E4%BD%93const%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">7. 结构体const应用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-%E7%BB%93%E6%9E%84%E4%BD%93%E6%A1%88%E5%88%97\"><span class=\"toc-text\">8. 结构体案列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-1-%E6%A1%88%E5%88%971\"><span class=\"toc-text\">8.1 案列1</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-2-%E6%A1%88%E5%88%972\"><span class=\"toc-text\">8.2 案列2</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-const%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">8. const补充</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-const%E5%A4%9A%E7%A7%8D%E6%83%85%E5%86%B5\"><span class=\"toc-text\">8.1 const多种情况</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C++_模板和STL","uid":"85a2acfa491d3e6f2208fd787a774695","slug":"1_C++_模板和STL_05","date":"2022-10-06T07:28:25.920Z","updated":"2022-11-10T01:30:51.387Z","comments":true,"path":"api/articles/1_C++_模板和STL_05.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (5).webp","text":"C++_模板和STL[toc] 记录C++泛型编程和STL的使用和原理 1. 模板-Template1.1 模板概念 作用：建立通用的模具，提高编程的复用性 特点： 模板在实际项目中不可直接使用，它只是一个框架，需根据实际情况进行使用 模板的通用不是万能的 1.2 函数模板 C+...","link":"","photos":[],"count_time":{"symbolsCount":"99k","symbolsTime":"1:30"},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"C++_核心编程","uid":"e94a77a3753f22f554c8c36e4173e356","slug":"1_C++_核心编程_03","date":"2022-10-06T07:28:25.912Z","updated":"2022-11-10T01:30:17.082Z","comments":true,"path":"api/articles/1_C++_核心编程_03.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (3).webp","text":"C++_核心编程[toc] 1. 内存分区模型C++程序在执行时，内存大方向划分为4个区域 代码区：存放函数的二进制代码，由操作系统进行管理的 全局区：存放全局变量和静态变量以及常量 栈区：由编译器自动分配释放，存放函数的参数值，局部变量等 堆区：由程序员分配和释放，若不释放，程...","link":"","photos":[],"count_time":{"symbolsCount":"96k","symbolsTime":"1:27"},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}