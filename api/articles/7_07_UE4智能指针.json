{"title":"UE4 智能指针","uid":"2d7038c614ab5b62d3dc8aa389662f8e","slug":"7_07_UE4智能指针","date":"2022-10-06T07:28:25.968Z","updated":"2023-01-10T01:10:19.442Z","comments":true,"path":"api/articles/7_07_UE4智能指针.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (23).webp","content":"<h1 id=\"UE4-智能指针\"><a href=\"#UE4-智能指针\" class=\"headerlink\" title=\"UE4 智能指针\"></a>UE4 智能指针</h1><p>[toc]</p>\n<h3 id=\"1-虚幻智能指针库\"><a href=\"#1-虚幻智能指针库\" class=\"headerlink\" title=\"1. 虚幻智能指针库\"></a>1. 虚幻智能指针库</h3><ul>\n<li>为C++11智能指针的自定义实现，旨在减轻内存分配和追踪的负担</li>\n<li>该实现包括行业标准 <strong>共享指针</strong>、<strong>弱指针</strong> 和 <strong>唯一指针</strong>。其还可添加 <strong>共享引用</strong>，此类引用的行为与不可为空的共享指针相同</li>\n<li>虚幻Objects使用更适合游戏代码的单独内存追踪系统，因此这些类无法与 <code>UObject</code> 系统同时使用</li>\n</ul>\n<h3 id=\"2-智能指针类型\"><a href=\"#2-智能指针类型\" class=\"headerlink\" title=\"2. 智能指针类型\"></a>2. 智能指针类型</h3><p>前提：</p>\n<ul>\n<li>智能指针可影响其包含或引用对象的寿命</li>\n<li>不同智能指针对对象有不同的限制和影响</li>\n</ul>\n<p>下表可用于协助决定各类型智能指针的适用情况：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">智能指针类型</th>\n<th align=\"left\">适用情形</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">**<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/SmartPointerLibrary/SharedPointer\">共享指针</a>**（<code>TSharedPtr</code>）</td>\n<td align=\"left\">共享指针拥有其引用的对象，无限防止该对象被删除，并在无共享指针或共享引用（见下文）引用其时，最终处理其的删除<br />共享指针可为空白，意味其不引用任何对象<br />任何非空共享指针都可对其引用的对象生成共享引用</td>\n</tr>\n<tr>\n<td align=\"left\">**共享引用<br />(ProgrammingAndScripting<br />&#x2F;ProgrammingWithCPP<br />&#x2F;UnrealArchitecture<br />&#x2F;SmartPointerLibrary<br />&#x2F;SharedReference)**（<code>TSharedRef</code>）</td>\n<td align=\"left\">共享引用的行为与共享指针类似，即其拥有自身引用的对象<br />对于空对象而言，其存在不同；共享引用须固定引用非空对象<br />共享指针无此类限制，因此共享引用可固定转换为共享指针，且该共享指针固定引用有效对象<br />要确认引用的对象是非空，或者要表明共享对象所有权时，请使用共享引用</td>\n</tr>\n<tr>\n<td align=\"left\">**弱指针(ProgrammingAndScripting<br />&#x2F;ProgrammingWithCPP<br />&#x2F;UnrealArchitecture<br />&#x2F;SmartPointerLibrary<br />&#x2F;WeakPointer)**（TWeakPtr<code>TSharedPtr</code>）</td>\n<td align=\"left\">弱指针类与共享指针类似，但不拥有其引用的对象，因此不影响其生命周期<br />此属性中断引用循环，因此十分有用，但也意味弱指针可在无预警的情况下随时变为空<br />因此，弱指针可生成指向其引用对象的共享指针，确保程序员能对该对象进行安全临时访问</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>唯一指针</strong>（<code>TUniquePtr</code>）</td>\n<td align=\"left\">唯一指针仅会显式拥有其引用的对象<br />仅有一个唯一指针指向给定资源，因此唯一指针可转移所有权，但无法共享<br />复制唯一指针的任何尝试都将导致编译错误<br />唯一指针超出范围时，其将自动删除其所引用的对象</td>\n</tr>\n</tbody></table>\n<p>注意：</p>\n<ul>\n<li>对唯一指针引用的对象进行共享指针或共享引用的操作十分危险</li>\n<li>即使其他智能指针继续引用该对象，此操作不会取消唯一指针自身被销毁时删除该对象的行为</li>\n<li>同样，不应为共享指针或共享引用引用的对象创建唯一指针</li>\n</ul>\n<h3 id=\"3-智能指针\"><a href=\"#3-智能指针\" class=\"headerlink\" title=\"3. 智能指针\"></a>3. 智能指针</h3><table>\n<thead>\n<tr>\n<th>优点</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>防止内存泄漏</strong></td>\n<td>共享引用不存在时，智能指针（弱指针除外）会自动删除对象</td>\n</tr>\n<tr>\n<td><strong>弱引用</strong></td>\n<td>弱指针会中断引用循环并阻止悬挂指针</td>\n</tr>\n<tr>\n<td><strong>可选择的线程安全</strong>）</td>\n<td>虚幻智能指针库包括线程安全代码，可跨线程管理引用计数，如无需线程安全，可用其换取更好性能</td>\n</tr>\n<tr>\n<td><strong>运行时安全</strong></td>\n<td>共享引用从不为空，可固定随时取消引用</td>\n</tr>\n<tr>\n<td><strong>授予意图</strong></td>\n<td>可轻松区分对象所有者和观察者</td>\n</tr>\n<tr>\n<td><strong>内存</strong></td>\n<td>智能指针在64位下仅为C++指针大小的两倍（加上共享的16字节引用控制器），唯一指针除外，其与C++指针大小相同</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-助手类和函数\"><a href=\"#4-助手类和函数\" class=\"headerlink\" title=\"4. 助手类和函数\"></a>4. 助手类和函数</h3><table>\n<thead>\n<tr>\n<th>助手类</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>TSharedFromThis</code></td>\n<td>在添加 <code>AsShared</code> 或 <code>SharedThis</code> 函数的 <code>TSharedFromThis</code> 中衍生类，利用此类函数可获取对象的 <code>TSharedRef</code></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>MakeShared</code><br /><code>MakeShareable</code></td>\n<td>在常规C++指针中创建共享指针<br /><code>MakeShared</code> 会在单个内存块中分配新的对象实例和引用控制器，但要求对象提交公共构造函数<code>MakeShareable</code> 的效率较低，但即使对象的构造函数为私有，其仍可运行<br />利用此操作可拥有非自己创建的对象，并在删除对象时支持自定义行为</td>\n</tr>\n<tr>\n<td><code>StaticCastSharedRef</code><br /><code>StaticCastSharedPtr</code></td>\n<td>静态投射效用函数，通常用于向下投射到衍生类型</td>\n</tr>\n<tr>\n<td><code>ConstCastSharedRef</code><br /><code>ConstCastSharedPtr</code></td>\n<td>将 <code>const</code> 智能引用或智能指针分别转换为 <code>mutable</code> 智能引用或智能指针</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-智能指针实现细节\"><a href=\"#5-智能指针实现细节\" class=\"headerlink\" title=\"5. 智能指针实现细节\"></a>5. 智能指针实现细节</h3><p>注：在功能和效率方面，虚幻智能指针库中的智能指针具有一些共同特征</p>\n<h4 id=\"5-1-运行速度\"><a href=\"#5-1-运行速度\" class=\"headerlink\" title=\"5.1 运行速度\"></a>5.1 运行速度</h4><p>注：</p>\n<ul>\n<li>要使用智能指针时，始终考虑性能</li>\n<li>智能指针非常适合某些高级系统、资源管理或工具编程</li>\n<li>但部分智能指针类型比原始C++指针更慢，这种开销使得其在低级引擎代码（如渲染）中用处不大</li>\n</ul>\n<p>智能指针的部分一般性能优势包括：</p>\n<ul>\n<li>所有运算均为常量时间</li>\n<li>取消引用多数智能指针的速度和原始C++指针的相同（在发布版本中）</li>\n<li>复制智能指针永不会分配内存</li>\n<li>线程安全智能指针是无锁的</li>\n</ul>\n<p>智能指针的性能缺陷包括：</p>\n<ul>\n<li>创建和复制智能指针比创建和复制原始C++指针需要更多开销</li>\n<li>保持引用计数增加基本运算的周期</li>\n<li>部分智能指针占用的内存比原始的C++更多</li>\n<li>引用控制器有两个堆分配。使用 <code>MakeShared</code> 代替 <code>MakeShareable</code> 可避免二次分配，并可提高性能</li>\n</ul>\n<h4 id=\"5-2-侵入性访问器\"><a href=\"#5-2-侵入性访问器\" class=\"headerlink\" title=\"5.2 侵入性访问器\"></a>5.2 侵入性访问器</h4><p>定义：</p>\n<ul>\n<li><p>共享指针是非侵入性的，意味对象不知道其是否为智能指针拥有</p>\n</li>\n<li><p>此通常是可以接受的，但在某些情况下，可能要将对象作为共享引用或共享指针进行访问</p>\n</li>\n<li><p>为此，使用对象的类作为模板参数，在 <code>TSharedFromThis</code> 衍生对象的类</p>\n</li>\n<li><p><code>TSharedFromThis</code> 提供两个函数：<code>AsShared</code> 和 <code>SharedThis</code>，可将对象转换为共享引用（并从共享引用转换为共享指针）</p>\n</li>\n<li><p>使用固定返回共享引用的类factory时，或需将对象传到需要共享引用或共享指针的系统时，此操作十分有用</p>\n</li>\n<li><p><code>AsShared</code> 会将类返回为最初作为模板参数传到 <code>TSharedFromThis</code> 的类型返回，其可能是调用对象的父类型，而 <code>SharedThis</code> 将直接从该类型衍生类型，并返回引用该类型对象的智能指针</p>\n</li>\n<li><p>以下范例代码中演示这两种函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FRegistryObject</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FMyBaseClass</span>: <span class=\"keyword\">public</span> TSharedFromThis&lt;FMyBaseClass&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">RegisterAsBaseClass</span><span class=\"params\">(FRegistryObject* RegistryObject)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 访问对&quot;this&quot;的共享引用。</span></span><br><span class=\"line\">        <span class=\"comment\">// 直接继承自&lt; TSharedFromThis &gt;，因此AsShared()和SharedThis(this)会返回相同的类型。</span></span><br><span class=\"line\">        TSharedRef&lt;FMyBaseClass&gt; ThisAsSharedRef = <span class=\"built_in\">AsShared</span>();</span><br><span class=\"line\">        <span class=\"comment\">// RegistryObject需要 TSharedRef&lt;FMyBaseClass&gt;，或TSharedPtr&lt;FMyBaseClass&gt;。TSharedRef可被隐式转换为TSharedPtr.</span></span><br><span class=\"line\">        RegistryObject-&gt;<span class=\"built_in\">Register</span>(ThisAsSharedRef);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FMyDerivedClass</span> : <span class=\"keyword\">public</span> FMyBaseClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Register</span><span class=\"params\">(FRegistryObject* RegistryObject)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 并非直接继承自TSharedFromThis&lt;&gt;，因此AsShared()和SharedThis(this)不会返回相同类型。</span></span><br><span class=\"line\">        <span class=\"comment\">// 在本例中，AsShared()会返回在TSharedFromThis&lt;&gt; - TSharedRef&lt;FMyBaseClass&gt;中初始指定的类型。</span></span><br><span class=\"line\">        <span class=\"comment\">// 在本例中，SharedThis(this)会返回具备&quot;this&quot;类型的TSharedRef - TSharedRef&lt;FMyDerivedClass&gt;。</span></span><br><span class=\"line\">        <span class=\"comment\">// SharedThis()函数仅在与 &#x27;this&#x27;指针相同的范围内可用。</span></span><br><span class=\"line\">        TSharedRef&lt;FMyDerivedClass&gt; AsSharedRef = <span class=\"built_in\">SharedThis</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// FMyDerivedClass是FMyBaseClass的一种类型，因此RegistryObject将接受TSharedRef&lt;FMyDerivedClass&gt;。</span></span><br><span class=\"line\">        RegistryObject-&gt;<span class=\"built_in\">Register</span>(ThisAsSharedRef);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FRegistryObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此函数将接受到FMyBaseClass或其子类的TSharedRef或TSharedPtr。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Register</span><span class=\"params\">(TSharedRef&lt;FMyBaseClass&gt;)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>注意：要在构造函数中调用 <code>AsShared</code> 或 <code>Shared</code>，共享引用此时并未初始化，将导致崩溃或断言</p>\n</li>\n</ul>\n<h4 id=\"5-3-投射\"><a href=\"#5-3-投射\" class=\"headerlink\" title=\"5.3 投射\"></a>5.3 投射</h4><p>可通过虚幻智能指针库包含的多个支持函数投射共享指针(和共享引用)</p>\n<p>Up-casting是隐式的，与C++指针相同</p>\n<p>可使用 <code>ConstCastSharedPtr</code> 函数进行常量投射，使用 <code>StaticCastSharedPtr</code> 进行静态投射（通常是向下投射到衍生类指针）</p>\n<p>无run-type类型的信息（RTTI），因此不支持动态转换；应使用静态投射</p>\n<p>如以下代码所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设通过其他方式验证了FDragDropOperation实际为FAssetDragDropOp。</span></span><br><span class=\"line\">TSharedPtr&lt;FDragDropOperation&gt; Operation = DragDropEvent.<span class=\"built_in\">GetOperation</span>();</span><br><span class=\"line\"><span class=\"comment\">//现在可使用StaticCastSharedPtr进行投射。</span></span><br><span class=\"line\">TSharedPtr&lt;FAssetDragDropOp&gt; DragDropOp = <span class=\"built_in\">StaticCastSharedPtr</span>&lt;FAssetDragDropOp&gt;(Operation);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"5-4-线程安全\"><a href=\"#5-4-线程安全\" class=\"headerlink\" title=\"5.4 线程安全\"></a>5.4 线程安全</h4><p>通常仅在单线程上访问智能指针的操作才是安全的</p>\n<p>如需访问多线程，请使用智能指针类的线程安全版本：</p>\n<ul>\n<li><code>TSharedPtr&lt;T, ESPMode::ThreadSafe&gt;</code></li>\n<li><code>TSharedRef&lt;T, ESPMode::ThreadSafe&gt;</code></li>\n<li><code>TWeakPtr&lt;T, ESPMode::ThreadSafe&gt;</code></li>\n<li><code>TSharedFromThis&lt;T, ESPMode::ThreadSafe&gt;</code></li>\n</ul>\n<p>由于原子引用计数，此类线程安全版本比默认版本稍慢，但其行为与常规C++指针一致：</p>\n<ul>\n<li>读取和复制固定为线程安全</li>\n<li>写入和重置须同步后才安全</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>如了解多线程永不访问指针，可通过避免使用线程安全版本获得更好性能</li>\n</ul>\n<h3 id=\"6-提示和限制\"><a href=\"#6-提示和限制\" class=\"headerlink\" title=\"6. 提示和限制\"></a>6. 提示和限制</h3><ul>\n<li><p>避免将数据作为 <code>TSharedRef</code> 或 <code>TSharedPtr</code> 参数传到函数，此操作将因取消引用和引用计数而产生开销</p>\n</li>\n<li><p>相反，建议将引用对象作为 <code>const &amp;</code> 进行传递</p>\n</li>\n<li><p>可将共享指针向前声明为不完整类型</p>\n</li>\n<li><p>共享指针与虚幻对象(<code>UObject</code> 及其衍生类)不兼容</p>\n</li>\n<li><p>引擎具有 <code>UObject</code> 管理的单独内存管理系统（<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Objects/Optimizations\">对象处理</a>文档），两个系统未互相重叠</p>\n</li>\n</ul>\n<h3 id=\"7-共享指针\"><a href=\"#7-共享指针\" class=\"headerlink\" title=\"7. 共享指针\"></a>7. 共享指针</h3><p>定义：</p>\n<ul>\n<li>一种支持共享拥有、自动失效、弱引用等特性的智能指针</li>\n<li><strong>共享指针（Shared Pointers）</strong> 是指既健壮、又能为空指针的智能指针</li>\n<li>共享指针沿袭了普通智能指针的所有优点，它能避免出现内存泄漏、悬挂指针，还能避免指针指向未初始化的内存</li>\n</ul>\n<p>其他特点：</p>\n<ul>\n<li><strong>共享所有权（Shared Ownership）：</strong> 引用计数支持多个共享指针，以确保它们引用的数据对象永远不被删除，前提是它们中的任意一个仍指向数据对象</li>\n<li><strong>自动失效（Automatic Invalidation）：</strong> 你可安全引用易变对象，无需担心出现悬挂指针</li>\n<li><strong>弱引用：</strong> <a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/SmartPointerLibrary/WeakPointer\">弱指针</a>可中断引用循环</li>\n<li><strong>意向指示（Indication of Intent）：</strong> 区分拥有者（参见<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/SmartPointerLibrary/SharedReference\">共享引用</a>）和观察者，并提供不可为空的引用</li>\n</ul>\n<p>其他特性：</p>\n<ul>\n<li>语法非常健壮</li>\n<li>非侵入式（但能反射）</li>\n<li>线程安全（视情况而定）</li>\n<li>性能佳，占用内存少</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>共享指针类似于<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/SmartPointerLibrary/SharedReference\">共享引用</a>，主要区别在于共享引用不可为空，因此会始终引用有效对象</li>\n<li>在共享引用和共享指针之间进行选择时，除非需要空对象或可为空的对象，否则建议你优先选择共享引用</li>\n</ul>\n<h4 id=\"7-1-声明和初始化\"><a href=\"#7-1-声明和初始化\" class=\"headerlink\" title=\"7.1 声明和初始化\"></a>7.1 声明和初始化</h4><ul>\n<li><p>因为共享指针可为空，所以无论有无数据对象，都可以对它们进行初始化</p>\n</li>\n<li><p>创建共享指针的一些示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个空白的共享指针</span></span><br><span class=\"line\">TSharedPtr EmptyPointer;</span><br><span class=\"line\"><span class=\"comment\">// 为新对象创建一个共享指针</span></span><br><span class=\"line\"><span class=\"function\">TSharedPtr&lt;FMyObjectType&gt; <span class=\"title\">NewPointer</span><span class=\"params\">(<span class=\"keyword\">new</span> FMyObjectType())</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 从共享引用创建一个共享指针</span></span><br><span class=\"line\"><span class=\"function\">TSharedRef&lt;FMyObjectType&gt; <span class=\"title\">NewReference</span><span class=\"params\">(<span class=\"keyword\">new</span> FMyObjectType())</span></span>;</span><br><span class=\"line\">TSharedPtr&lt;FMyObjectType&gt; PointerFromReference = NewReference;</span><br><span class=\"line\"><span class=\"comment\">// 创建一个线程安全的共享指针</span></span><br><span class=\"line\">TSharedPtr&lt;FMyObjectType, ESPMode::ThreadSafe&gt; NewThreadsafePointer = <span class=\"built_in\">MakeShared</span>&lt;FMyObjectType, ESPMode::ThreadSafe&gt;(MyArgs);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在第二个示例中，<code>NodePtr</code> 实际上拥有新的 <code>FMyObjectType</code> 对象，因为没有其他共享指针引用该对象</p>\n</li>\n<li><p>如果 <code>NodePtr</code> 超出范围，并且没有其他共享指针或共享引用指向该对象，那么该对象将被销毁</p>\n</li>\n<li><p>复制共享指针时，系统将向它引用的对象添加一个引用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加任意对象ExistingSharedPointer引用的引用数。</span></span><br><span class=\"line\">TSharedPtr&lt;FMyObjectType&gt; AnotherPointer = ExistingSharedPointer;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象将持续存在，直到不再有共享指针（或共享引用）引用它为止</p>\n</li>\n<li><p>可以使用 <code>Reset</code> 函数、或分配一个空指针来重设共享指针，如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PointerOne.<span class=\"built_in\">Reset</span>();</span><br><span class=\"line\">PointerTwo = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"comment\">// PointerOne和PointerTwo现在都引用nullptr。</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>使用 <code>MoveTemp</code>（或 <code>MoveTempIfPossible</code>）函数将一个共享指针的内容转移到另一个共享指针，将原始的共享指针保留为空：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将PointerOne的内容移至PointerTwo。在此之后，PointerOne将引用nullptr。</span></span><br><span class=\"line\">PointerTwo = <span class=\"built_in\">MoveTemp</span>(PointerOne);</span><br><span class=\"line\"><span class=\"comment\">// 将PointerTwo的内容移至PointerOne。在此之后，PointerTwo将引用nullptr。</span></span><br><span class=\"line\">PointerOne = <span class=\"built_in\">MoveTempIfPossible</span>(PointerTwo);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：<code>MoveTemp</code> 和 <code>MoveTempIfPossible</code> 的唯一不同之处在于 <code>MoveTemp</code> 包含静态断言，强制其只能在非常量左值（lvalue）上执行</p>\n</li>\n</ul>\n<h4 id=\"7-2-共享指针与引用转换\"><a href=\"#7-2-共享指针与引用转换\" class=\"headerlink\" title=\"7.2 共享指针与引用转换\"></a>7.2 共享指针与引用转换</h4><ul>\n<li><p>在共享指针与共享引用之间进行转换是一种常见的做法。共享引用隐式地转换为共享指针，并提供新的共享指针将引用有效对象的额外保证</p>\n</li>\n<li><p>转换由普通语法处理：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TSharedPtr&lt;FMyObjectType&gt; MySharedPointer = MySharedReference;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>只要共享指针引用了一个非空对象，你就可以使用 <code>Shared Pointer</code> 函数 <code>ToSharedRef</code> 从此共享指针创建一个共享引用</p>\n</li>\n<li><p>试图从空共享指针创建共享引用将导致程序断言</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在解引用之前，请确保共享指针有效，以避免可能出现的断言。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (MySharedPointer.<span class=\"built_in\">IsValid</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MySharedReference = MySharedPointer.<span class=\"built_in\">ToSharedRef</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7-3-对比\"><a href=\"#7-3-对比\" class=\"headerlink\" title=\"7.3 对比\"></a>7.3 对比</h4><ul>\n<li><p>目的：测试共享指针彼此间的相等性</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TSharedPtr&lt;FTreeNode&gt; NodeA, NodeB;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (NodeA == NodeB)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><code>IsValid</code> 函数和 <code>bool</code> 运算符有助于判断共享指针是否引用了有效对象</p>\n</li>\n<li><p>可以调用 <code>Get</code>，查看它是否返回有效的（非空）对象指针</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Node.<span class=\"built_in\">IsValid</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (Node)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (Node.<span class=\"built_in\">Get</span>() != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7-4-解引用和访问\"><a href=\"#7-4-解引用和访问\" class=\"headerlink\" title=\"7.4 解引用和访问\"></a>7.4 解引用和访问</h4><p>说明：</p>\n<ul>\n<li>像使用普通C++指针那样解引用，调用方法和访问成员</li>\n<li>可以像使用其他C++指针那样，通过调用 <code>IsValid</code> 函数或使用重载的 <code>bool</code> 运算符，在取消引用之前执行空检查</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在解引用前，检查节点是否引用了一个有效对象。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (Node)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 以下三行代码中的任意一行都能解引用节点，并且对它的对象调用ListChildren：</span></span><br><span class=\"line\">    Node-&gt;<span class=\"built_in\">ListChildren</span>();</span><br><span class=\"line\">    Node.<span class=\"built_in\">Get</span>()-&gt;<span class=\"built_in\">ListChildren</span>();</span><br><span class=\"line\">    (*Node).<span class=\"built_in\">ListChildren</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"7-5-自定义删除器\"><a href=\"#7-5-自定义删除器\" class=\"headerlink\" title=\"7.5 自定义删除器\"></a>7.5 自定义删除器</h4><ul>\n<li><p>说明：共享指针和共享引用支持对它们引用的对象使用自定义删除器</p>\n</li>\n<li><p>如需运行自定义删除代码，请提供lambda函数，作为创建智能指针时使用的参数，就像这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DestroyMyObjectType</span><span class=\"params\">(FMyObjectType* ObjectAboutToBeDeleted)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此处添加删除代码。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这些函数使用自定义删除器创建指南指针。</span></span><br><span class=\"line\"><span class=\"function\">TSharedRef&lt;FMyObjectType&gt; <span class=\"title\">NewReference</span><span class=\"params\">(<span class=\"keyword\">new</span> FMyObjectType(), [](FMyObjectType* Obj)&#123; DestroyMyObjectType(Obj); &#125;)</span></span>;</span><br><span class=\"line\"><span class=\"function\">TSharedPtr&lt;FMyObjectType&gt; <span class=\"title\">NewPointer</span><span class=\"params\">(<span class=\"keyword\">new</span> FMyObjectType(), [](FMyObjectType* Obj)&#123; DestroyMyObjectType(Obj); &#125;)</span></span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"8-共享引用\"><a href=\"#8-共享引用\" class=\"headerlink\" title=\"8. 共享引用\"></a>8. 共享引用</h3><ul>\n<li>不能为未初始化或分配为空的智能指针类型</li>\n</ul>\n<p>说明：</p>\n<ul>\n<li><strong>共享引用</strong> 是一类强大且不可为空的 <strong>智能指针</strong>，其被用于引擎的 <code>Uobject</code> 系统外的数据对象</li>\n<li>此意味无法重置共享引用、向其指定空对象，或创建空白引用</li>\n<li>因此共享引用固定包含有效对象，甚至未拥有 <code>IsValid</code> 方法</li>\n<li>在共享引用和 <strong>[共享指针]（Shared Pointers）</strong> 间选择时，除非需要空白或可为空的对象，否则共享引用为优先选项</li>\n<li>如需可能空白或可为空的引用，则应使用共享指针</li>\n</ul>\n<p>注意：与标准的C++引用不同，可在创建后将共享引用重新指定到另一对象</p>\n<h4 id=\"8-1-声明和初始化\"><a href=\"#8-1-声明和初始化\" class=\"headerlink\" title=\"8.1 声明和初始化\"></a>8.1 声明和初始化</h4><ul>\n<li><p>共享引用不可为空，因此初始化需要数据对象</p>\n</li>\n<li><p>在无有效对象的情况下尝试创建的共享引用将不会编译，并尝试将共享引用初始化为空指针变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建新节点的共享引用</span></span><br><span class=\"line\">TSharedRef&lt;FMyObjectType&gt; NewReference = <span class=\"built_in\">MakeShared</span>&lt;FMyObjectType&gt;();</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在无有效对象的情况下尝试创建的共享引用将不会编译：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下两者均不会编译：</span></span><br><span class=\"line\">TSharedRef&lt;FMyObjectType&gt; UnassignedReference;</span><br><span class=\"line\">TSharedRef&lt;FMyObjectType&gt; NullAssignedReference = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"comment\">//以下会编译，但如NullObject实际为空则断言。</span></span><br><span class=\"line\">TSharedRef&lt;FMyObjectType&gt; NullAssignedReference = NullObject;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"8-2-共享指针与引用转换\"><a href=\"#8-2-共享指针与引用转换\" class=\"headerlink\" title=\"8.2 共享指针与引用转换\"></a>8.2 共享指针与引用转换</h4><p>说明：共享引用会隐式转换为共享指针，并为新共享指针引用有效对象提供额外保证</p>\n<ul>\n<li><p>使用普通语法处理转换：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TSharedPtr&lt;FMyObjectType&gt; MySharedPointer = MySharedReference;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>如共享指针引用非空对象，即可使用 <code>共享指针</code> 函数 <code>ToSharedRef</code>，在共享指针中创建共享引用</p>\n</li>\n<li><p>尝试在空共享指针中创建共享引用，将导致程序断言</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在取消引用前，确保共享指针为有效，避免潜在断言。</span></span><br><span class=\"line\"><span class=\"built_in\">If</span> (MySharedPointer.<span class=\"built_in\">IsValid</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MySharedReference = MySharedPointer.<span class=\"built_in\">ToSharedRef</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"8-3-对比\"><a href=\"#8-3-对比\" class=\"headerlink\" title=\"8.3 对比\"></a>8.3 对比</h4><ul>\n<li><p>可测试共享引用彼此是否相等。在此情况下，相等表示引用相同对象</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TSharedRef&lt;FMyObjectType&gt; ReferenceA, ReferenceB;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ReferenceA == ReferenceB)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"9-弱指针\"><a href=\"#9-弱指针\" class=\"headerlink\" title=\"9. 弱指针\"></a>9. 弱指针</h3><ul>\n<li>存储弱引用且不阻止其对象被销毁的智能指针</li>\n</ul>\n<p>说明：</p>\n<ul>\n<li><p><strong>弱指针</strong> 存储对象的弱引用</p>\n</li>\n<li><p>与 <strong>共享指针</strong> 或 <strong>共享引用</strong> 不同，弱指针不会阻止其引用的对象被销毁</p>\n</li>\n<li><p>在访问弱指针引用的对象前，应使用 <code>Pin</code> 函数生成共享指针</p>\n</li>\n<li><p>此操作确保使用该对象时其将继续存在</p>\n</li>\n<li><p>如只需要确定弱指针是否引用对象，可将其与 <code>nullptr</code> 比较，或在之上调用 <code>IsValid</code></p>\n</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>弱指针的使用有助于授予意图——弱指针表明对引用对象的观察，而无需所有权，同时不控制其生命周期</li>\n</ul>\n<h4 id=\"9-1-声明初始化和分配\"><a href=\"#9-1-声明初始化和分配\" class=\"headerlink\" title=\"9.1 声明初始化和分配\"></a>9.1 声明初始化和分配</h4><ul>\n<li><p>可创建空白弱指针，或在共享引用、共享指针或其他弱指针中进行</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分配新的数据对象，并创建对其的强引用。</span></span><br><span class=\"line\">TSharedRef&lt;FMyObjectType&gt; ObjectOwner = <span class=\"built_in\">MakeShared</span>&lt;FMyObjectType&gt;();</span><br><span class=\"line\"><span class=\"comment\">//创建指向新数据对象的弱指针。</span></span><br><span class=\"line\"><span class=\"function\">TWeakPtr&lt;FMyObjectType&gt; <span class=\"title\">ObjectObserver</span><span class=\"params\">(ObjectOwner)</span></span>;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>弱指针不会阻止对象被销毁</p>\n</li>\n<li><p>无论 <code>ObjectOwner</code> 是否在范围内，重置 <code>ObjectOwner</code> 都将销毁对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设ObjectOwner是其对象的唯一拥有者，ObjectOwner停止引用该对象时，该对象将被销毁。</span></span><br><span class=\"line\">ObjectOwner.<span class=\"built_in\">Reset</span>();</span><br><span class=\"line\"><span class=\"comment\">//ObjectOwner引用空对象，因此Pin()生成的共享指针将也将为空。被视为布尔时，空白共享指针的值为false。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ObjectObserver.<span class=\"built_in\">Pin</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//只当ObjectOwner非对象的唯一拥有者时，此代码才会运行。</span></span><br><span class=\"line\">    <span class=\"built_in\">check</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>与共享指针相同，弱指针是否引用有效对象，均可进行安全复制：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TWeakPtr&lt;FMyObjectType&gt; AnotherObjectObserver = ObjectObserver;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>使用完弱指针后，可进行重置</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可通过将弱指针设为nullptr进行重置。</span></span><br><span class=\"line\">ObjectObserver = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"comment\">//也可使用重置函数。</span></span><br><span class=\"line\">AnotherObjectObserver.<span class=\"built_in\">Reset</span>();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"9-2-转换为共享指针\"><a href=\"#9-2-转换为共享指针\" class=\"headerlink\" title=\"9.2 转换为共享指针\"></a>9.2 转换为共享指针</h4><p>说明：</p>\n<ul>\n<li><code>Pin</code> 函数将创建指向弱指针对象的共享指针</li>\n<li>只要共享指针在范围内且引用对象，则该对象将持续有效</li>\n<li>此外，共享指针（包括由 <code>Pin</code> 函数返回的指针）可在条件句中作为 <code>布尔</code> 类型进行求值，其中 <code>true</code> 表示有效对象</li>\n<li>以下代码模式检查弱指针是否引用有效对象</li>\n<li>如是，至少在共享指针（由 <code>Pin</code> 函数创建）超出范围或被显式清除前，将保证其持续有效</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取弱指针中的共享指针，并检查其是否引用有效对象。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (TSharedPtr&lt;FMyObjectType&gt; LockedObserver = ObjectObserver.<span class=\"built_in\">Pin</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//共享指针仅在此范围内有效。</span></span><br><span class=\"line\">    <span class=\"comment\">//该对象已被验证为存在，而共享指针阻止其被删除。</span></span><br><span class=\"line\">    LockedObserver-&gt;<span class=\"built_in\">SomeFunction</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"9-3-取消引用和访问\"><a href=\"#9-3-取消引用和访问\" class=\"headerlink\" title=\"9.3 取消引用和访问\"></a>9.3 取消引用和访问</h4><ul>\n<li>要访问弱指针的对象，首需使用 <code>Pin</code> 函数，将其提升为共享指针</li>\n<li>然后可通过共享指针或弱指针上的 <code>Get</code> 函数进行访问</li>\n<li>此方法可确保使用该对象时，其将持续有效</li>\n</ul>\n<h4 id=\"9-4-打破引用循环\"><a href=\"#9-4-打破引用循环\" class=\"headerlink\" title=\"9.4 打破引用循环\"></a>9.4 打破引用循环</h4><ul>\n<li>两个或多个对象使用智能指针保持彼此间的强引用时，将出现引用循环</li>\n<li>在此类情况下，对象间会相互保护以免被删除</li>\n<li>各对象固定被另一对象引用，因此对象无法在另一对象存在时被删除</li>\n<li>如外部对象未对引用循环中对象进行引用，其实际上将出现泄漏</li>\n<li>弱指针不会保留自身引用的对象，因此其可中断此类引用循环</li>\n<li>要在未拥有对象时对其进行引用，并延长其寿命时，可使用软指针</li>\n</ul>\n<h4 id=\"9-5-使用警告\"><a href=\"#9-5-使用警告\" class=\"headerlink\" title=\"9.5 使用警告\"></a>9.5 使用警告</h4><p>如不想保证数据对象会持续存在时，弱指针将非常有用，但该属性可能会变得异常危险</p>\n<p>在以下情况中请谨慎使用弱指针：</p>\n<ul>\n<li>在<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/TSet\">集</a>或<a href=\"https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/TMap\">映射</a>中用作键。弱指针可能会在未通知容器的情况下随时无效，因此共享指针或共享引用更适用于充当键，可安全地将弱指针用作数值</li>\n<li>虽然弱指针提供 <code>IsValid</code> 函数，但是检查 <code>IsValid</code> 无法保证对象在任何时间长度内均可持续有效</li>\n<li>线程安全共享指针可能会因另一线程上的活动而随时无效，因此使用线程安全共享指针应尤其注意</li>\n<li><code>Pin</code> 返回的共享指针将使对象在代码将其清除或其超出范围前保持活跃状态，因此 <code>Pin</code> 函数是用于检查的首选方法，此类检查会导致取消引用或访问存储对象</li>\n</ul>\n","text":"UE4 智能指针[toc] 1. 虚幻智能指针库 为C++11智能指针的自定义实现，旨在减轻内存分配和追踪的负担 该实现包括行业标准 共享指针、弱指针 和 唯一...","permalink":"/post/7_07_UE4智能指针","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UE4-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\"><span class=\"toc-text\">UE4 智能指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%99%9A%E5%B9%BB%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%BA%93\"><span class=\"toc-text\">1. 虚幻智能指针库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2. 智能指针类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\"><span class=\"toc-text\">3. 智能指针</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%8A%A9%E6%89%8B%E7%B1%BB%E5%92%8C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4. 助手类和函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">5. 智能指针实现细节</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6\"><span class=\"toc-text\">5.1 运行速度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AE%BF%E9%97%AE%E5%99%A8\"><span class=\"toc-text\">5.2 侵入性访问器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-%E6%8A%95%E5%B0%84\"><span class=\"toc-text\">5.3 投射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-4-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">5.4 线程安全</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%8F%90%E7%A4%BA%E5%92%8C%E9%99%90%E5%88%B6\"><span class=\"toc-text\">6. 提示和限制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%85%B1%E4%BA%AB%E6%8C%87%E9%92%88\"><span class=\"toc-text\">7. 共享指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-%E5%A3%B0%E6%98%8E%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">7.1 声明和初始化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-%E5%85%B1%E4%BA%AB%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">7.2 共享指针与引用转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">7.3 对比</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-%E8%A7%A3%E5%BC%95%E7%94%A8%E5%92%8C%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">7.4 解引用和访问</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-5-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%A0%E9%99%A4%E5%99%A8\"><span class=\"toc-text\">7.5 自定义删除器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E5%85%B1%E4%BA%AB%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">8. 共享引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-%E5%A3%B0%E6%98%8E%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">8.1 声明和初始化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-%E5%85%B1%E4%BA%AB%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">8.2 共享指针与引用转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">8.3 对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E5%BC%B1%E6%8C%87%E9%92%88\"><span class=\"toc-text\">9. 弱指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-1-%E5%A3%B0%E6%98%8E%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%88%86%E9%85%8D\"><span class=\"toc-text\">9.1 声明初始化和分配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-2-%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%85%B1%E4%BA%AB%E6%8C%87%E9%92%88\"><span class=\"toc-text\">9.2 转换为共享指针</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-3-%E5%8F%96%E6%B6%88%E5%BC%95%E7%94%A8%E5%92%8C%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">9.3 取消引用和访问</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-4-%E6%89%93%E7%A0%B4%E5%BC%95%E7%94%A8%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">9.4 打破引用循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-5-%E4%BD%BF%E7%94%A8%E8%AD%A6%E5%91%8A\"><span class=\"toc-text\">9.5 使用警告</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Flutter基础","uid":"d3adb67f358afb69b06b3570d65b1657","slug":"8_01_Flutter基础","date":"2022-10-06T07:28:25.970Z","updated":"2023-01-10T01:10:19.438Z","comments":true,"path":"api/articles/8_01_Flutter基础.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (26).webp","text":"Flutter[toc] 1. Flutter 安装 开始使用 — Windows — 获取 Flutter SDK — 下载 将压缩包解压 — 找到 bin ...","permalink":"/post/8_01_Flutter基础","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"Flutter","slug":"Flutter","count":1,"path":"api/tags/Flutter.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"UE4 委托","uid":"97e60817d770107d3926456a0105594d","slug":"7_06_UE4委托","date":"2022-10-06T07:28:25.965Z","updated":"2023-01-10T01:10:19.442Z","comments":true,"path":"api/articles/7_06_UE4委托.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (22).webp","text":"UE4 委托[toc] 1. 委托定义介绍：在C++对象上引用和执行成员函数的数据类型 定义： 是一种泛型但类型安全的方式，可在C++对象上调用成员函数 可使用...","permalink":"/post/7_06_UE4委托","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}