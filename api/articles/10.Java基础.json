{"title":"Java基础","uid":"3316961ecf1671c6065b043220187c47","slug":"10.Java基础","date":"2022-10-06T07:28:25.975Z","updated":"2022-01-04T05:08:15.124Z","comments":true,"path":"api/articles/10.Java基础.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN/Post_Img_mini/postImg_19.jpg","content":"<h1 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h1><h3 id=\"1-Java环境配置\"><a href=\"#1-Java环境配置\" class=\"headerlink\" title=\"1. Java环境配置\"></a>1. Java环境配置</h3><h4 id=\"1-1-手动配置Java环境\"><a href=\"#1-1-手动配置Java环境\" class=\"headerlink\" title=\"1.1 手动配置Java环境\"></a>1.1 手动配置Java环境</h4><h5 id=\"1-1-1-Oracle官网获得JDK\"><a href=\"#1-1-1-Oracle官网获得JDK\" class=\"headerlink\" title=\"1.1.1 Oracle官网获得JDK\"></a>1.1.1 Oracle官网获得JDK</h5><ul>\n<li><p><a href=\"https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\">Java-JDK</a></p>\n</li>\n<li><p>获得JDK，默认安装C盘即可</p>\n</li>\n</ul>\n<h5 id=\"1-1-2-配置环境变量\"><a href=\"#1-1-2-配置环境变量\" class=\"headerlink\" title=\"1.1.2 配置环境变量\"></a>1.1.2 配置环境变量</h5><ol>\n<li><p>在<code>系统变量</code>，设置三项属性：</p>\n<ul>\n<li>JAVA_HOME</li>\n<li>PATH</li>\n<li>CLASSPATH（JDK1.5版本以上，无需此项）</li>\n</ul>\n</li>\n<li><p>配置：</p>\n<ul>\n<li><p>JAVA_HOME:<code>C:\\Program Files\\Java\\[实际情况而定]</code></p>\n</li>\n<li><p>PATH:</p>\n<ol>\n<li><p><code>%JAVA_HOME%\\bin</code></p>\n</li>\n<li><p><code>%JAVA_HOME%\\jre\\bin</code></p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>CMD测试：</p>\n<ul>\n<li><code>java</code></li>\n<li><code>javac</code></li>\n<li><code>java -version</code></li>\n</ul>\n</li>\n</ol>\n<h5 id=\"1-1-3-测试Java编译\"><a href=\"#1-1-3-测试Java编译\" class=\"headerlink\" title=\"1.1.3 测试Java编译\"></a>1.1.3 测试Java编译</h5><ol>\n<li><p>在text中写入Java程序：<code>Demo.text</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Demo &#123;\n    public static void main(String[] args)&#123;\n        int appleNum &#x3D; 10;\n        int day;\n        for (day &#x3D; 1; day &lt;&#x3D; 3; ++day)\n        &#123;\n            appleNum -&#x3D; 2;\n        &#125;\n        System.out.println(&quot;Day &quot; + (day - 1) + &quot; , &quot; + &quot;Apple Count : &quot; + appleNum);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>将text文件文件类型后缀名改为：<code>Demo.java</code></p>\n</li>\n<li><p>在文件所在地址，打开<code>CMD</code>或者<code>Powershell</code></p>\n</li>\n<li><p>通过命令来编译<code>Demo.java</code>–默认是在同地址创建同名的<code>Demo.class</code>，<code>Demo.exe</code>在系统文件<code>System32</code>中</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">javac Demo.java</code></pre>\n</li>\n<li><p>通过命令来执行<code>Demo.exe</code></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">java Demo</code></pre></li>\n</ol>\n<h4 id=\"1-2-通过Intellij-IDEA配置\"><a href=\"#1-2-通过Intellij-IDEA配置\" class=\"headerlink\" title=\"1.2 通过Intellij IDEA配置\"></a>1.2 通过Intellij IDEA配置</h4><h5 id=\"1-2-1-安装IDEA\"><a href=\"#1-2-1-安装IDEA\" class=\"headerlink\" title=\"1.2.1 安装IDEA\"></a>1.2.1 安装IDEA</h5><ul>\n<li><a href=\"https://www.jetbrains.com/lp/intellijidea-forrester-tei/\">Interllij IDEA</a></li>\n</ul>\n<h5 id=\"1-2-2-关键设置\"><a href=\"#1-2-2-关键设置\" class=\"headerlink\" title=\"1.2.2 关键设置\"></a>1.2.2 关键设置</h5><ol>\n<li><code>Add Path</code></li>\n<li>选择安装<code>Openjdk</code></li>\n</ol>\n<h3 id=\"2-Java基础\"><a href=\"#2-Java基础\" class=\"headerlink\" title=\"2. Java基础\"></a>2. Java基础</h3><h4 id=\"2-1-Java标识符\"><a href=\"#2-1-Java标识符\" class=\"headerlink\" title=\"2.1 Java标识符\"></a>2.1 Java标识符</h4><ol>\n<li>标识符包括：字母，数字，<code>_</code>，<code>$</code>；</li>\n<li>标识符必须：字母，<code>_</code>，<code>$</code>开头，不能以数字开头；</li>\n<li>标识符不能使用关键字</li>\n</ol>\n<h4 id=\"2-2-常量\"><a href=\"#2-2-常量\" class=\"headerlink\" title=\"2.2 常量\"></a>2.2 常量</h4><p>常量初始化后，不能再被修改；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">final double PI &#x3D; 3.14;</code></pre>\n\n\n\n<h4 id=\"2-3-数据类型\"><a href=\"#2-3-数据类型\" class=\"headerlink\" title=\"2.3 数据类型\"></a>2.3 数据类型</h4><h5 id=\"2-3-1-数据类型的分类\"><a href=\"#2-3-1-数据类型的分类\" class=\"headerlink\" title=\"2.3.1 数据类型的分类\"></a>2.3.1 数据类型的分类</h5><ul>\n<li>基本数据类型<ul>\n<li>数值型<ul>\n<li>整数类型：byte, short, int, long</li>\n<li>浮点类型：float, double</li>\n</ul>\n</li>\n<li>字符型：char</li>\n<li>布尔型：bool</li>\n</ul>\n</li>\n<li>引用数据类型<ul>\n<li>类</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-3-2-整型\"><a href=\"#2-3-2-整型\" class=\"headerlink\" title=\"2.3.2 整型\"></a>2.3.2 整型</h5><ul>\n<li>Java默认的整型是<code>int</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>名称</th>\n<th>字节</th>\n<th>数值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>字节型</td>\n<td>1</td>\n<td>-128 ~ 127</td>\n</tr>\n<tr>\n<td>short</td>\n<td>短整型</td>\n<td>2</td>\n<td>-32768 ~ 32767</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整型</td>\n<td>4</td>\n<td>-2147483648 ~ 2147483647</td>\n</tr>\n<tr>\n<td>long</td>\n<td>长整型</td>\n<td>8</td>\n<td>-2(63次方) ~ -2(63次方) - 1</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">long a &#x3D; 12345678; &#x2F;&#x2F; 编译成功\nlong b &#x3D; 12345678999; &#x2F;&#x2F; 编译失败，超出int长度\nlong c &#x3D; 12345678999L; &#x2F;&#x2F; 编译成功，标记 L ，数据是长整型</code></pre>\n\n\n\n<h5 id=\"2-3-3-浮点型\"><a href=\"#2-3-3-浮点型\" class=\"headerlink\" title=\"2.3.3 浮点型\"></a>2.3.3 浮点型</h5><ul>\n<li>Java默认的浮点型是<code>double</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>名称</th>\n<th>字节</th>\n<th>数值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>单精度</td>\n<td>4</td>\n<td>-3.403E38 ~ 3.403E38</td>\n</tr>\n<tr>\n<td>double</td>\n<td>双精度</td>\n<td>8</td>\n<td>-1.798E308 ~ 1.798E308</td>\n</tr>\n</tbody></table>\n<h5 id=\"2-3-4-字符型\"><a href=\"#2-3-4-字符型\" class=\"headerlink\" title=\"2.3.4 字符型\"></a>2.3.4 字符型</h5><ul>\n<li>占用2个字节</li>\n<li>可用于转义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>转义符</th>\n<th>含有</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\b</td>\n<td>退格</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\“</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>\\‘</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>反斜杠</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">char ec &#x3D; &#39;a&#39;;\nchar cc &#x3D; &#39;中&#39;;\nchar c &#x3D; &#39;\\n&#39;;</code></pre>\n\n<ul>\n<li>char只能放一个字符</li>\n<li>string可以方一串字符</li>\n</ul>\n<h5 id=\"2-3-4-布尔型\"><a href=\"#2-3-4-布尔型\" class=\"headerlink\" title=\"2.3.4 布尔型\"></a>2.3.4 布尔型</h5><ul>\n<li>布尔型只有两个常量值：<code>true</code>，<code>false</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">boolean flag;\nflag &#x3D; true;</code></pre>\n\n\n\n<h4 id=\"2-4-Java输入\"><a href=\"#2-4-Java输入\" class=\"headerlink\" title=\"2.4 Java输入\"></a>2.4 Java输入</h4><ul>\n<li>语法</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class Demo()\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Scanner scan &#x3D; new Scanner(System.in);\n        \n        int a &#x3D; scan.nextInt();\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li><p>Scanner对象的方法说明</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nextByte()</td>\n<td>读取byte类型的整数</td>\n</tr>\n<tr>\n<td>nextShort()</td>\n<td>读取short类型的整数</td>\n</tr>\n<tr>\n<td>nextInt()</td>\n<td>读取int类型的整数</td>\n</tr>\n<tr>\n<td>nextLong()</td>\n<td>读取long类型的整数</td>\n</tr>\n<tr>\n<td>nextFloat()</td>\n<td>读取float类型的数</td>\n</tr>\n<tr>\n<td>nextDouble()</td>\n<td>读取double类型的数</td>\n</tr>\n<tr>\n<td>next()</td>\n<td>读取字符串，遇到空白符结束</td>\n</tr>\n<tr>\n<td>nextLine()</td>\n<td>读取文本，回车结束</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h4 id=\"2-5-三目运算符\"><a href=\"#2-5-三目运算符\" class=\"headerlink\" title=\"2.5 三目运算符\"></a>2.5 三目运算符</h4><ul>\n<li><p>语法：<code>a &gt; b ? a : b;</code></p>\n</li>\n<li><p>实例：在三个数中，找到最大数；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class Demo()\n&#123;\n    public static void main(String[] args)\n    &#123;\n        int a &#x3D; 10, b &#x3D; 20, c &#x3D; 30, temp, max;\n        temp &#x3D; a &gt; b ? a : b;\n        max &#x3D; temp &gt; c ? temp : c;\n    &#125;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"2-6-Java例题\"><a href=\"#2-6-Java例题\" class=\"headerlink\" title=\"2.6 Java例题\"></a>2.6 Java例题</h4><h5 id=\"2-6-1-输入三位数，将各个位数取出\"><a href=\"#2-6-1-输入三位数，将各个位数取出\" class=\"headerlink\" title=\"2.6.1 输入三位数，将各个位数取出\"></a>2.6.1 输入三位数，将各个位数取出</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class Demo2\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Scanner scanner &#x3D; new Scanner(System.in);\n\n        System.out.print(&quot;输入三位数：&quot;);\n        int EnterNum &#x3D; scanner.nextInt();\n\n        int GW, SW, BW;\n\n        GW &#x3D; (EnterNum % 10);\n        SW &#x3D; (EnterNum % 100) &#x2F; 10;\n        BW &#x3D; (EnterNum &#x2F; 100);\n\n        System.out.println(&quot;个位：&quot; + GW + &quot; 十位：&quot; + SW + &quot; 百位：&quot; + BW);\n    &#125;\n&#125;</code></pre>\n\n\n\n<h5 id=\"2-6-2-将两个变量值互换\"><a href=\"#2-6-2-将两个变量值互换\" class=\"headerlink\" title=\"2.6.2 将两个变量值互换\"></a>2.6.2 将两个变量值互换</h5><h6 id=\"2-6-2-1-设临时变量\"><a href=\"#2-6-2-1-设临时变量\" class=\"headerlink\" title=\"2.6.2.1 设临时变量\"></a>2.6.2.1 设临时变量</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Demo\n&#123;\n    public static void main(String[] args)\n    &#123;\n        int a &#x3D; 10, b &#x3D; 20, temp;\n        temp &#x3D; a;\n        a &#x3D; b;\n        b &#x3D; temp;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h6 id=\"2-6-2-2-两数加减\"><a href=\"#2-6-2-2-两数加减\" class=\"headerlink\" title=\"2.6.2.2 两数加减\"></a>2.6.2.2 两数加减</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Demo\n&#123;\n    public static void main(String[] args)\n    &#123;\n        int a &#x3D; 10, b &#x3D; 20;\n        b &#x3D; a + b;\n        a &#x3D; b - a;\n        b &#x3D; b - a;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h6 id=\"2-6-2-3-异或\"><a href=\"#2-6-2-3-异或\" class=\"headerlink\" title=\"2.6.2.3 异或\"></a>2.6.2.3 异或</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Demo\n&#123;\n    public static void main(String[] args)\n    &#123;\n        int a &#x3D; 1, b &#x3D; 2;\n        a &#x3D; a ^ b;\n        b &#x3D; a ^ b;\n        a &#x3D; a ^ b;\n    &#125;\n&#125;\n\n&#x2F;&#x2F;  a &#x3D; 1 &#x3D; 01, b &#x3D; 2 &#x3D; 10;\n# a &#x3D; a ^ b; &#x2F;&#x2F;  01 - 10 &#x3D;&gt; 00 &#x3D;&#x3D; a &#x3D; 0;\n# b &#x3D; a ^ b; &#x2F;&#x2F; 00 - 10 &#x3D;&gt; 01 &#x3D;&#x3D; b &#x3D; 1;\n# a &#x3D; a ^ b; &#x2F;&#x2F; 00 - 01 &#x3D;&gt; 10 &#x3D;&#x3D; a &#x3D; 2</code></pre>\n\n\n\n\n\n<h4 id=\"2-7-switch选择语句\"><a href=\"#2-7-switch选择语句\" class=\"headerlink\" title=\"2.7 switch选择语句\"></a>2.7 switch选择语句</h4><h5 id=\"2-7-1-例题1\"><a href=\"#2-7-1-例题1\" class=\"headerlink\" title=\"2.7.1 例题1\"></a>2.7.1 例题1</h5><ul>\n<li>学号-姓名-爱好-出生日期，以及是否是闰年</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\nclass MySelf\n&#123;\n   private final String stu_ID;\n   private final String stu_Name;\n   private final String stu_Hobby;\n   private final int stu_Date;\n\n   MySelf()\n   &#123;\n       stu_ID &#x3D; &quot;82104322666&quot;;\n       stu_Name &#x3D; &quot;FHang&quot;;\n       stu_Hobby &#x3D; &quot;发呆&quot;;\n       stu_Date &#x3D; 1998;\n   &#125;\n\n    public String getStu_ID() &#123;\n        return stu_ID;\n    &#125;\n\n    public String getStu_Name() &#123;\n        return stu_Name;\n    &#125;\n\n    public String getStu_Hobby() &#123;\n        return stu_Hobby;\n    &#125;\n\n    public int getStu_Date() &#123;\n        return stu_Date;\n    &#125;\n\n    public String getIsLeapYear()\n    &#123;\n        return (stu_Date % 4 &#x3D;&#x3D; 0 &amp;&amp; stu_Date % 100 !&#x3D; 0) || (stu_Date % 400 &#x3D;&#x3D; 0) ? &quot;是&quot; : &quot;不是&quot;;\n    &#125;\n&#125;\n\npublic class Demo3\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Scanner scanner &#x3D; new Scanner(System.in);\n        MySelf mySelf &#x3D; new MySelf();\n\n        while (true)\n        &#123;\n            System.out.println(&quot;1_学号,2_姓名,3_爱好,4_出生日期,&lt;其它_退出&gt;&quot;);\n            System.out.print(&quot;选择: &quot;);\n            int num &#x3D; scanner.nextInt();\n\n            switch (num) &#123;\n                case 1 -&gt; System.out.println(&quot;学号: &quot; + mySelf.getStu_ID());\n                case 2 -&gt; System.out.println(&quot;姓名: &quot; + mySelf.getStu_Name());\n                case 3 -&gt; System.out.println(&quot;爱好: &quot; + mySelf.getStu_Hobby());\n                case 4 -&gt; System.out.println(&quot;出生日期: &quot; + mySelf.getStu_Date() + &quot; - 闰年: &quot; + mySelf.getIsLeapYear());\n                default -&gt; System.exit(0);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h5 id=\"2-7-2-例题2\"><a href=\"#2-7-2-例题2\" class=\"headerlink\" title=\"2.7.2 例题2\"></a>2.7.2 例题2</h5><ul>\n<li>输入一个年份，判断是否是闰年以及每月的天数</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\nclass Prophet\n&#123;\n    int year;\n    boolean isLeapYear;\n\n    public void CalLeapYear(int year)\n    &#123;\n        this.year &#x3D; year;\n        isLeapYear &#x3D; (year % 4 &#x3D;&#x3D; 0 &amp;&amp; year % 100 !&#x3D; 0) || year % 400 &#x3D;&#x3D; 0;\n        String leapYear &#x3D; isLeapYear ? &quot;是闰年&quot; : &quot;不是闰年&quot;;\n        System.out.println(year + leapYear);\n    &#125;\n\n    public void CalDaysEveryMonth()\n    &#123;\n        System.out.println(this.year + &quot;的每月天数：&quot;);\n        int[] days &#x3D; &#123;31,28,31,30,31,30,31,31,30,31,30,31&#125;;\n        for (int i &#x3D; 0; i &lt; days.length; ++i)\n        &#123;\n            if (this.isLeapYear &amp;&amp; i &#x3D;&#x3D; 1)\n            &#123;\n                System.out.println(&quot;第&quot; + (i + 1) + &quot;月: &quot; + (days[i] + 1));\n            &#125;\n            else\n            &#123;\n                System.out.println(&quot;第&quot; + (i + 1) + &quot;月: &quot; + days[i]);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\npublic class Demo4\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Scanner scanner &#x3D; new Scanner(System.in);\n        Prophet pro &#x3D; new Prophet();\n\n        while (true)\n        &#123;\n            System.out.print(&quot;输入年份&lt;0_退出&gt;：&quot;);\n            int num &#x3D; scanner.nextInt();\n            if (num &#x3D;&#x3D; 0)\n            &#123;\n                System.exit(0);\n            &#125;\n            else\n            &#123;\n                pro.CalLeapYear(num);\n                pro.CalDaysEveryMonth();\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h5 id=\"2-7-3-例题3\"><a href=\"#2-7-3-例题3\" class=\"headerlink\" title=\"2.7.3 例题3\"></a>2.7.3 例题3</h5><ul>\n<li>设计一个加减计算的答题系统，随机生成题目，最少1题，最多10题，并最终返回答题正确数</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\nimport java.util.Random;\n\nclass CalculatorSystem\n&#123;\n    private int questionCount;\n    private int scoreCount;\n\n    private enum CalculateOperation\n    &#123;\n        ADD, SUB, &#x2F;*MULTI, DIVIDE*&#x2F;\n    &#125;\n\n    Scanner scanner &#x3D; new Scanner(System.in);\n    Random random &#x3D; new Random(System.currentTimeMillis());\n\n    CalculatorSystem()\n    &#123;\n        this.scoreCount &#x3D; 0;\n    &#125;\n\n    public void CalStart()\n    &#123;\n        System.out.println(&quot;&lt;&lt;-- 输入题数(最少1题--最多10题) --&gt;&gt;&quot;);\n        System.out.print(&quot;输入&gt;&gt;&quot;);\n        questionCount &#x3D; scanner.nextInt();\n\n        if (questionCount &lt; 1 || questionCount &gt; 10)\n        &#123;\n            questionCount &#x3D; questionCount &lt; 1 ? 1 : 10;\n        &#125;\n\n        CalRandomQuestion();\n    &#125;\n\n    public void CalRandomQuestion()\n    &#123;\n        int tempA, tempB, inputC, a, b, c;\n        CalculateOperation calOperation;\n\n        for (int i &#x3D; 1; i &lt;&#x3D; questionCount; ++i)\n        &#123;\n            System.out.print(&quot;第&quot; + i + &quot;题: &quot;);\n            int curRand &#x3D; random.nextInt(2);\n\n            calOperation &#x3D; CalculateOperation.class.getEnumConstants()[curRand];\n            tempA &#x3D; random.nextInt(101);\n            tempB &#x3D; random.nextInt(101);\n            a &#x3D; Math.max(tempA, tempB);\n            b &#x3D; Math.min(tempB, tempA);\n\n            switch (calOperation)\n            &#123;\n                case ADD -&gt;\n                        &#123;\n                            c &#x3D; a + b;\n                            System.out.print(a + &quot;+&quot; + b + &quot;&#x3D;&quot;);\n                            inputC &#x3D; scanner.nextInt();\n                            CalCheckAnswer(c, inputC);\n                        &#125;\n                case SUB -&gt;\n                        &#123;\n                            c &#x3D; a - b;\n                            System.out.print(a + &quot;-&quot; + b + &quot;&#x3D;&quot;);\n                            inputC &#x3D; scanner.nextInt();\n                            CalCheckAnswer(c, inputC);\n                        &#125;\n            &#125;\n        &#125;\n\n        CalSumScore();\n    &#125;\n\n    public void CalCheckAnswer(int c, int inputC)\n    &#123;\n        String printLog &#x3D; (c &#x3D;&#x3D; inputC) ? &quot;正确&quot; : &quot;错误&quot;;\n        boolean isRight &#x3D; (c &#x3D;&#x3D; inputC);\n\n        if (isRight)\n        &#123;\n            this.scoreCount++;\n        &#125;\n        System.out.println(printLog);\n    &#125;\n\n    public void CalSumScore()\n    &#123;\n        System.out.println(&quot;答对&quot; + scoreCount + &quot;题&quot;);\n        scoreCount &#x3D; 0;\n        System.out.println();\n    &#125;\n\n    public void CalEnd()\n    &#123;\n        System.out.println(&quot;&lt;&lt;-- 已退出答题系统 --&gt;&gt;&quot;);\n    &#125;\n&#125;\n\npublic class Demo5\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Scanner scanner &#x3D; new Scanner(System.in);\n        CalculatorSystem calSys &#x3D; new CalculatorSystem();\n\n        while (true)\n        &#123;\n            System.out.println(&quot;&lt;&lt;-- (Y&#x2F;y_开始)--(N&#x2F;n_结束) --&gt;&gt;&quot;);\n            System.out.print(&quot;输入&gt;&gt;&quot;);\n            String inputChar &#x3D; scanner.next();\n\n            if (inputChar.equalsIgnoreCase(&quot;Y&quot;))\n            &#123;\n                calSys.CalStart();\n            &#125;\n            else if (inputChar.equalsIgnoreCase(&quot;N&quot;))\n            &#123;\n                calSys.CalEnd();\n                System.exit(1);\n            &#125;\n            else\n            &#123;\n                System.out.println(&quot;输入正确的选项&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n<h5 id=\"2-7-4-例题4\"><a href=\"#2-7-4-例题4\" class=\"headerlink\" title=\"2.7.4 例题4\"></a>2.7.4 例题4</h5><ul>\n<li>提示输入信息—显示信息-退出，显示信息可返回上一级信息提示</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\nclass PersonInfo\n&#123;\n    private String fh_ID;\n    private String fh_Name;\n    private String fh_Hobby;\n    private int fh_Date;\n\n    Scanner scanner &#x3D; new Scanner(System.in);\n\n    public String getFh_ID() &#123;\n        return fh_ID;\n    &#125;\n    public void setFh_ID(String fh_ID) &#123;\n        this.fh_ID &#x3D; fh_ID;\n    &#125;\n\n    public String getFh_Name() &#123;\n        return fh_Name;\n    &#125;\n    public void setFh_Name(String fh_Name) &#123;\n        this.fh_Name &#x3D; fh_Name;\n    &#125;\n\n    public String getFh_Hobby() &#123;\n        return fh_Hobby;\n    &#125;\n    public void setFh_Hobby(String fh_Hobby) &#123;\n        this.fh_Hobby &#x3D; fh_Hobby;\n    &#125;\n\n    public int getFh_Date() &#123;\n        return fh_Date;\n    &#125;\n    public void setFh_Date(int fh_Date) &#123;\n        this.fh_Date &#x3D; fh_Date;\n    &#125;\n\n    public void StartPersonInfo()\n    &#123;\n        while (true)\n        &#123;\n            System.out.println(&quot;&lt;-- 1_输入信息,2_显示信息,3_退出 --&gt;&quot;);\n            System.out.print(&quot;选择&gt;&gt;&quot;);\n            int num &#x3D; scanner.nextInt();\n            switch (num)\n            &#123;\n                case 1 -&gt; InputPersonInfo();\n                case 2 -&gt; ShowPersonInfoMenu();\n                case 3 -&gt; ExitPersonInfo();\n            &#125;\n        &#125;\n    &#125;\n\n    public void ShowPersonInfoMenu()\n    &#123;\n        System.out.println(&quot;&lt;-- 1_学号,2_姓名,3_爱好,4_年份,5_返回上一级 --&gt;&quot;);\n\n        while (true)\n        &#123;\n            System.out.print(&quot;选择&gt;&gt;&quot;);\n            int num &#x3D; scanner.nextInt();\n\n            switch (num)\n            &#123;\n                case 1 -&gt; System.out.println(&quot;ID: &quot; + getFh_ID());\n                case 2 -&gt; System.out.println(&quot;姓名: &quot; + getFh_Name());\n                case 3 -&gt; System.out.println(&quot;爱好: &quot; + getFh_Hobby());\n                case 4 -&gt; System.out.println(&quot;生日: &quot; + getFh_Date());\n                case 5 -&gt; StartPersonInfo();\n            &#125;\n        &#125;\n    &#125;\n\n    public void InputPersonInfo()\n    &#123;\n        System.out.print(&quot;输入ID&gt;&gt;&quot;);\n        setFh_ID(scanner.next());\n\n        System.out.print(&quot;输入姓名&gt;&gt;&quot;);\n        setFh_Name(scanner.next());\n\n        System.out.print(&quot;输入爱好&gt;&gt;&quot;);\n        setFh_Hobby(scanner.next());\n\n        System.out.print(&quot;输入生日&gt;&gt;&quot;);\n        setFh_Date(scanner.nextInt());\n    &#125;\n\n    public void ExitPersonInfo()\n    &#123;\n        System.out.println(&quot;&lt;-- 已退出 --&gt;&quot;);\n        System.exit(1);\n    &#125;\n&#125;\n\npublic class Demo6\n&#123;\n    public static void main(String[] args)\n    &#123;\n        new Scanner(System.in);\n        PersonInfo personInfo &#x3D; new PersonInfo();\n\n        personInfo.StartPersonInfo();\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n<h4 id=\"2-8-for循环\"><a href=\"#2-8-for循环\" class=\"headerlink\" title=\"2.8 for循环\"></a>2.8 for循环</h4><h5 id=\"2-8-1-例题1\"><a href=\"#2-8-1-例题1\" class=\"headerlink\" title=\"2.8.1 例题1\"></a>2.8.1 例题1</h5><ul>\n<li>1 - 1000内的水仙花数</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class FhMath\n&#123;\n    int B, S, G;\n\n    public void CalShuiXianHua()\n    &#123;\n        for (int i &#x3D; 100; i &lt;&#x3D; 900; ++i)\n        &#123;\n            B &#x3D; i &#x2F; 100;\n            S &#x3D; (i &#x2F; 10) % 10;\n            G &#x3D; i % 10;\n            if (Math.pow(B, 3) + Math.pow(S, 3) + Math.pow(G, 3) &#x3D;&#x3D; i)\n            &#123;\n                System.out.println(&quot;水仙花数: &quot; + i);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\npublic class Demo8\n&#123;\n    public static void main(String[] args)\n    &#123;\n        FhMath fhMath &#x3D; new FhMath();\n        fhMath.CalShuiXianHua();\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n<h5 id=\"2-8-2-例题2\"><a href=\"#2-8-2-例题2\" class=\"headerlink\" title=\"2.8.2 例题2\"></a>2.8.2 例题2</h5><ul>\n<li>公鸡5元一个，母鸡3元一个，三只小鸡一元钱，现有100元，要买100只鸡，怎么买？</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Swap\n&#123;\n    public void swap(int x, int y, int z)\n    &#123;\n        for (x &#x3D; 1; x &lt;&#x3D; 20; ++x)\n        &#123;\n            for (y &#x3D; 1; y &lt;&#x3D; 33; ++y)\n            &#123;\n                z &#x3D; 100 - x - y;\n                if (x * 5 + y * 3 + z &#x2F; 3.0 &#x3D;&#x3D; 100.0)\n                &#123;\n                    System.out.println(&quot;X&#x3D; &quot; + x + &quot; Y&#x3D; &quot; + y + &quot; Z&#x3D; &quot; + z);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\npublic class Demo9\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Swap swap &#x3D; new Swap();\n        swap.swap(1, 2, 3);\n    &#125;\n&#125;</code></pre>\n\n\n\n<h5 id=\"2-8-3-例题3\"><a href=\"#2-8-3-例题3\" class=\"headerlink\" title=\"2.8.3 例题3\"></a>2.8.3 例题3</h5><ul>\n<li>计算5的阶乘值的和（递归）</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class MathJie\n&#123;\n    public int fact(int n)\n    &#123;\n        if (n &#x3D;&#x3D; 0 || n &#x3D;&#x3D; 1)\n        &#123;\n            return 1;\n        &#125;\n        else\n        &#123;\n            return n * fact(n - 1);\n        &#125;\n    &#125;\n\n    public int sum(int n)\n    &#123;\n        if (n &#x3D;&#x3D; 1)\n        &#123;\n            return fact(n);\n        &#125;\n        else\n        &#123;\n            return fact(n) + fact(n - 1);\n        &#125;\n    &#125;\n&#125;\n\npublic class Demo10\n&#123;\n    public static void main(String[] args)\n    &#123;\n        MathJie mathJie &#x3D; new MathJie();\n        int S;\n        S &#x3D; mathJie.sum(5);\n        System.out.println(S);\n    &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"2-9-函数重载题目\"><a href=\"#2-9-函数重载题目\" class=\"headerlink\" title=\"2.9 函数重载题目\"></a>2.9 函数重载题目</h4><h5 id=\"2-9-1-例题1\"><a href=\"#2-9-1-例题1\" class=\"headerlink\" title=\"2.9.1 例题1\"></a>2.9.1 例题1</h5><ul>\n<li>输入n个数，利用重载，打印最大值</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Calculator\n&#123;\n    void getMax(int...nums)\n    &#123;\n        int maxNum &#x3D; nums[0];\n\n        for (int num : nums)\n        &#123;\n            maxNum &#x3D; Math.max(maxNum, num);\n        &#125;\n        System.out.println(&quot;Max Num: &quot; + maxNum);\n    &#125;\n&#125;\n\npublic class Demo11\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Calculator calculator &#x3D; new Calculator();\n\n        calculator.getMax(1, 2);\n        calculator.getMax(1, 2, 3);\n        calculator.getMax(1, 2, 3, 4);\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n<h4 id=\"3-0-Java对象\"><a href=\"#3-0-Java对象\" class=\"headerlink\" title=\"3.0 Java对象\"></a>3.0 Java对象</h4><h5 id=\"3-0-1-例题1\"><a href=\"#3-0-1-例题1\" class=\"headerlink\" title=\"3.0.1 例题1\"></a>3.0.1 例题1</h5><ul>\n<li>创建一个宠物类，按提示输入相关信息，并最终打印出来</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\nclass Pet\n&#123;\n    private String name;\n    private String type;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public String getType() &#123;\n        return type;\n    &#125;\n    public void setType(String type) &#123;\n        this.type &#x3D; type;\n    &#125;\n\n    Scanner scanner &#x3D; new Scanner(System.in);\n\n    Pet()\n    &#123;\n        TipInfo();\n\n        System.out.print(&quot;输入名称&gt;&gt;&quot;);\n        setName(scanner.next());\n\n        System.out.print(&quot;输入类别&gt;&gt;&quot;);\n        setType(scanner.next());\n\n        PrintPetInfo();\n    &#125;\n\n    void TipInfo()\n    &#123;\n        System.out.println(&quot;&lt;-- 输入宠物相关信息 --&gt;&quot;);\n    &#125;\n\n    void PrintPetInfo()\n    &#123;\n        System.out.println(&quot;&lt;-- 打印宠物相关信息 --&gt;&quot;);\n        System.out.println(&quot;宠物名称: &quot; + getName());\n        System.out.println(&quot;宠物类别: &quot; + getType());\n    &#125;\n&#125;\n\npublic class Demo10\n&#123;\n    public static void main(String[] args)\n    &#123;\n        new Pet();\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n<h4 id=\"3-1-对象继承\"><a href=\"#3-1-对象继承\" class=\"headerlink\" title=\"3.1 对象继承\"></a>3.1 对象继承</h4><h5 id=\"3-1-1-继承概念\"><a href=\"#3-1-1-继承概念\" class=\"headerlink\" title=\"3.1.1 继承概念\"></a>3.1.1 继承概念</h5><ul>\n<li><p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类</p>\n</li>\n<li><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法或子类从父类继承方法，使得子类具有父类相同的行为</p>\n</li>\n<li><p>继承的格式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class 父类 &#123;\n&#125;\n \nclass 子类 extends 父类 &#123;\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"3-1-2-代码示例\"><a href=\"#3-1-2-代码示例\" class=\"headerlink\" title=\"3.1.2 代码示例\"></a>3.1.2 代码示例</h5><ul>\n<li><p>Demo.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project2;\n\npublic class Demo\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Human student &#x3D; new Student();\n        Human teacher &#x3D; new Teacher();\n\n        Getter getter &#x3D; new Getter();\n\n        getter.getInfo((Student) student);\n        System.out.println();\n        getter.getInfo((Teacher) teacher);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>Human.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project2;\n\npublic class Human\n&#123;\n&#125;</code></pre>\n</li>\n<li><p>Student.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project2;\n\npublic class Student extends Human\n&#123;\n    private String name;\n    private int stuID;\n    private int roomID;\n\n    Student()\n    &#123;\n        name &#x3D; &quot;QQ&quot;;\n        stuID &#x3D; 1;\n        roomID &#x3D; 304;\n    &#125;\n\n    public String getName()\n    &#123;\n        return name;\n    &#125;\n    public void setName(String name)\n    &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public int getStuID()\n    &#123;\n        return stuID;\n    &#125;\n    public void setStuID(int stuID)\n    &#123;\n        this.stuID &#x3D; stuID;\n    &#125;\n\n    public int getRoomID()\n    &#123;\n        return roomID;\n    &#125;\n    public void setRoomID(int roomID)\n    &#123;\n        this.roomID &#x3D; roomID;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>Teacher.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project2;\n\npublic class Teacher extends Human\n&#123;\n    private String name;\n    private String job;\n    private int salary;\n\n    Teacher()\n    &#123;\n        name &#x3D; &quot;WW&quot;;\n        job &#x3D; &quot;MathTeacher&quot;;\n        salary &#x3D; 1000;\n    &#125;\n\n    public String getName()\n    &#123;\n        return name;\n    &#125;\n    public void setName(String name)\n    &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public String getJob()\n    &#123;\n        return job;\n    &#125;\n    public void setJob(String job)\n    &#123;\n        this.job &#x3D; job;\n    &#125;\n\n    public int getSalary()\n    &#123;\n        return salary;\n    &#125;\n    public void setSalary(int salary)\n    &#123;\n        this.salary &#x3D; salary;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>Getter.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project2;\n\npublic class Getter\n&#123;\n    void getInfo(Student student)\n    &#123;\n        System.out.println(&quot;Name: &quot; + student.getName() + &quot;\\nStuID: &quot; + student.getStuID() + &quot;\\nRoomID: &quot; + student.getRoomID());\n    &#125;\n\n    void getInfo(Teacher teacher)\n    &#123;\n        System.out.println(&quot;Name: &quot; + teacher.getName() + &quot;\\nJob: &quot; + teacher.getJob() + &quot;\\nSalary: &quot; + teacher.getSalary());\n    &#125;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-2-抽象类\"><a href=\"#3-2-抽象类\" class=\"headerlink\" title=\"3.2 抽象类\"></a>3.2 抽象类</h4><ul>\n<li>概念：<ul>\n<li>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样</li>\n<li>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类</li>\n<li>父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法</li>\n<li>在 Java 中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-3-接口\"><a href=\"#3-3-接口\" class=\"headerlink\" title=\"3.3 接口\"></a>3.3 接口</h4><ul>\n<li>概念：<ul>\n<li>接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念</li>\n<li>类描述对象的属性和方法，接口则包含类要实现的方法，除非实现接口的类是抽象类，否则该类要定义接口中的所有方法</li>\n<li>接口无法被实例化，但是可以被实现</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-3-1-接口的声明\"><a href=\"#3-3-1-接口的声明\" class=\"headerlink\" title=\"3.3.1 接口的声明\"></a>3.3.1 接口的声明</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">[可见度] interface 接口名称 [extends 其他的接口名] &#123;\n        &#x2F;&#x2F; 声明变量\n        &#x2F;&#x2F; 抽象方法\n&#125;</code></pre>\n\n\n\n<h5 id=\"3-3-2-接口的特性\"><a href=\"#3-3-2-接口的特性\" class=\"headerlink\" title=\"3.3.2 接口的特性\"></a>3.3.2 接口的特性</h5><ul>\n<li>接口是隐式抽象的，当声明一个接口的时候，不必使用<strong>abstract</strong>关键字</li>\n<li>接口中每一个方法也是隐式抽象的，声明时同样不需要<strong>abstract</strong>关键字</li>\n<li>接口中的方法都是公有的</li>\n</ul>\n<h5 id=\"3-3-3-接口的实现\"><a href=\"#3-3-3-接口的实现\" class=\"headerlink\" title=\"3.3.3 接口的实现\"></a>3.3.3 接口的实现</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ...</code></pre>\n\n\n\n\n\n<h5 id=\"3-3-4-代码示例–文件结构\"><a href=\"#3-3-4-代码示例–文件结构\" class=\"headerlink\" title=\"3.3.4 代码示例–文件结构\"></a>3.3.4 代码示例–文件结构</h5><ul>\n<li><p>project3</p>\n<ul>\n<li>appliance<ul>\n<li>ApplianceBase.java</li>\n<li>Computer.java</li>\n<li>Light.java</li>\n<li>TelePhone.java</li>\n<li>WashMachine</li>\n</ul>\n</li>\n<li>function<ul>\n<li>call.java</li>\n<li>charge.java</li>\n<li>playGame.java</li>\n</ul>\n</li>\n<li>Demo.java</li>\n</ul>\n</li>\n<li><p>代码源码：</p>\n</li>\n<li><p>Demo.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project3;\n\nimport project3.appliance.Computer;\nimport project3.appliance.Light;\nimport project3.appliance.TelePhone;\nimport project3.appliance.WashMachine;\n\npublic class Demo\n&#123;\n    public static void main(String[] args)\n    &#123;\n        &#x2F;&#x2F; Light\n        Light light &#x3D; new Light(&quot;Light&quot;);\n        light.runStart();\n        light.startCharge();\n        light.overCharge();\n        light.runOver();\n\n        &#x2F;&#x2F; WashMachine\n        WashMachine washMachine &#x3D; new WashMachine(&quot;WashMachine&quot;);\n        washMachine.runStart();\n        washMachine.startCharge();\n        washMachine.runOver();\n\n        &#x2F;&#x2F; TelePhone\n        TelePhone telePhone &#x3D; new TelePhone(&quot;TelePhone&quot;);\n        telePhone.runStart();\n        telePhone.startCall();\n        telePhone.overCall();\n        telePhone.runOver();\n\n        &#x2F;&#x2F; Computer\n        Computer computer &#x3D; new Computer(&quot;Computer&quot;);\n        computer.runStart();\n        computer.playGames();\n        computer.overGames();\n        computer.runOver();\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>ApplianceBase.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project3.appliance;\n\npublic class ApplianceBase\n&#123;\n    private boolean isRunning;\n\n    ApplianceBase(String name)\n    &#123;\n        isRunning &#x3D; false;\n        System.out.println(&quot;&lt;-- &quot; + name + &quot; --&gt;&quot;);\n    &#125;\n\n    public boolean isRunning()\n    &#123;\n        return isRunning;\n    &#125;\n\n    public void runStart()\n    &#123;\n        isRunning &#x3D; true;\n        System.out.println(&quot;Is Run Start&quot;);\n        getCurState();\n    &#125;\n    public void runOver()\n    &#123;\n        isRunning &#x3D; false;\n        System.out.println(&quot;Is Run Over&quot;);\n        getCurState();\n        System.out.println();\n    &#125;\n\n    public void getCurState()\n    &#123;\n        String state &#x3D; isRunning ? &quot;Running&quot; : &quot;Over&quot;;\n        System.out.println(&quot;CurState&gt;&gt; &quot; + state);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>Computer.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project3.appliance;\n\nimport project3.function.charge;\nimport project3.function.playGame;\n\npublic class Computer extends ApplianceBase implements charge, playGame\n&#123;\n    public Computer(String name)\n    &#123;\n        super(name);\n    &#125;\n\n    @Override\n    public void runStart()\n    &#123;\n        super.runStart();\n    &#125;\n\n    @Override\n    public void runOver()\n    &#123;\n        super.runOver();\n    &#125;\n\n    @Override\n    public void getCurState()\n    &#123;\n        super.getCurState();\n    &#125;\n\n    @Override\n    public void startCharge()\n    &#123;\n        System.out.println(&quot;Computer Is Start Charge&quot;);\n    &#125;\n\n    @Override\n    public void overCharge()\n    &#123;\n        System.out.println(&quot;Computer Is Over Charge&quot;);\n    &#125;\n\n    @Override\n    public void playGames()\n    &#123;\n        System.out.println(&quot;Computer Play Games&quot;);\n    &#125;\n\n    @Override\n    public void overGames()\n    &#123;\n        System.out.println(&quot;Computer Over Games&quot;);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>Light.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project3.appliance;\n\nimport project3.function.charge;\n\npublic class Light extends ApplianceBase implements charge\n&#123;\n    public Light(String name)\n    &#123;\n        super(name);\n    &#125;\n\n    @Override\n    public void runStart()\n    &#123;\n        super.runStart();\n    &#125;\n\n    @Override\n    public void runOver()\n    &#123;\n        super.runOver();\n    &#125;\n\n    @Override\n    public void getCurState()\n    &#123;\n        super.getCurState();\n    &#125;\n\n    @Override\n    public void startCharge()\n    &#123;\n        System.out.println(&quot;Light Is Start Charge&quot;);\n    &#125;\n\n    @Override\n    public void overCharge()\n    &#123;\n        System.out.println(&quot;Light Is Over Charge&quot;);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>TelePhone.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project3.appliance;\n\nimport project3.function.call;\nimport project3.function.charge;\n\npublic class TelePhone extends ApplianceBase implements charge, call\n&#123;\n    public TelePhone(String name)\n    &#123;\n        super(name);\n    &#125;\n\n    @Override\n    public void runStart()\n    &#123;\n        super.runStart();\n    &#125;\n\n    @Override\n    public void runOver()\n    &#123;\n        super.runOver();\n    &#125;\n\n    @Override\n    public void getCurState()\n    &#123;\n        super.getCurState();\n    &#125;\n\n    @Override\n    public void startCharge()\n    &#123;\n        System.out.println(&quot;TelePhone Is Start Charge&quot;);\n    &#125;\n\n    @Override\n    public void overCharge()\n    &#123;\n        System.out.println(&quot;TelePhone Is Over Charge&quot;);\n    &#125;\n\n    @Override\n    public void startCall()\n    &#123;\n        System.out.println(&quot;TelePhone Start Call&quot;);\n    &#125;\n\n    @Override\n    public void overCall()\n    &#123;\n        System.out.println(&quot;TelePhone Over Call&quot;);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>WashMachine.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project3.appliance;\n\nimport project3.function.charge;\n\npublic class WashMachine extends ApplianceBase implements charge\n&#123;\n    public WashMachine(String name)\n    &#123;\n        super(name);\n    &#125;\n\n    @Override\n    public void runStart()\n    &#123;\n        super.runStart();\n    &#125;\n\n    @Override\n    public void runOver()\n    &#123;\n        super.runOver();\n    &#125;\n\n    @Override\n    public void getCurState()\n    &#123;\n        super.getCurState();\n    &#125;\n\n    @Override\n    public void startCharge()\n    &#123;\n        System.out.println(&quot;WashMachine Is Start Charge&quot;);\n    &#125;\n\n    @Override\n    public void overCharge()\n    &#123;\n        System.out.println(&quot;WashMachine Is Over Charge&quot;);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>call.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project3.function;\n\npublic interface call\n&#123;\n    void startCall();\n    void overCall();\n&#125;</code></pre>\n</li>\n<li><p>charge.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project3.function;\n\npublic interface charge\n&#123;\n    void startCharge();\n    void overCharge();\n&#125;</code></pre>\n</li>\n<li><p>playGame.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project3.function;\n\npublic interface playGame\n&#123;\n    void playGames();\n    void overGames();\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-4-数组和常用类\"><a href=\"#3-4-数组和常用类\" class=\"headerlink\" title=\"3.4 数组和常用类\"></a>3.4 数组和常用类</h4><ul>\n<li><p>案例描述：在一个九个元素的数组中，通过两组的三位数相加等于第三组组成的三位数，九个元素不重复，取值范围：[0 - 9]</p>\n</li>\n<li><p>代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project4;\n\nimport java.util.Arrays;\n\npublic class Demo1\n&#123;\n    int x,y,z;\n    int[] flagNo&#x3D;new int[]&#123;0,0,0, 0,0,0, 0,0,0&#125;;\n    public static void main(String[] args)\n    &#123;\n        Demo1 abc&#x3D;new Demo1();\n        abc.findRes();\n    &#125;\n\n    public void stau(int i)\n    &#123;\n        for (int j &#x3D; 0; j &lt;3 ; j++)\n        &#123;\n            if (i%10!&#x3D;0)\n                flagNo[i%10-1]&#x3D;1;\n            i&#x3D;i&#x2F;10;\n        &#125;\n    &#125;\n\n    public boolean isRepeat()\n    &#123;\n        boolean tmp&#x3D;true;\n        for (int j:flagNo)\n        &#123;\n            if (j &#x3D;&#x3D; 0)\n            &#123;\n                tmp &#x3D; false;\n                break;\n            &#125;\n        &#125;\n        return tmp;\n    &#125;\n\n    public void findRes()\n    &#123;\n        int counter&#x3D;0;\n        for (x&#x3D;123;x&lt;&#x3D;987;x++)\n            for (y&#x3D;x+1;y&lt;987;y++)\n            &#123;\n                Arrays.fill(flagNo, 0);\n\n                z&#x3D;x+y;\n                if (z&gt;123&amp;&amp;z&lt;&#x3D;987)\n                &#123;\n                    if (isRepeatXYZ())\n                    &#123;\n                        counter++;\n                        System.out.println(x+&quot;+&quot;+y+&quot;&#x3D;&quot;+z+&quot;【&quot;+counter+&quot;】&quot;);\n                    &#125;\n                &#125;\n            &#125;\n\n    &#125;\n\n    public boolean isRepeatXYZ()\n    &#123;\n        boolean tmp;\n        stau(x);\n        stau(y);\n        stau(z);\n        tmp&#x3D;isRepeat();\n        return tmp;\n    &#125;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-5-集合框架\"><a href=\"#3-5-集合框架\" class=\"headerlink\" title=\"3.5 集合框架\"></a>3.5 集合框架</h4><ul>\n<li><p>集合框架的概念：</p>\n<ul>\n<li><code>接口</code>：代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</li>\n<li><code>实现类</code>：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap</li>\n<li><code>算法</code>：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序</li>\n</ul>\n</li>\n<li><p><code>Set</code> 和 <code>List</code>的区别</p>\n<ul>\n<li>Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素</li>\n<li>Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变<code> &lt;实现类有HashSet,TreeSet&gt;</code></li>\n<li>List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变<code> &lt;实现类有ArrayList,LinkedList,Vector&gt;</code></li>\n</ul>\n</li>\n<li><p>代码示例：ArrayList</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.*;\n \npublic class Test&#123;\n public static void main(String[] args) &#123;\n     List&lt;String&gt; list&#x3D;new ArrayList&lt;String&gt;();\n     list.add(&quot;Hello&quot;);\n     list.add(&quot;World&quot;);\n     list.add(&quot;HAHAHAHA&quot;);\n     &#x2F;&#x2F;第一种遍历方法使用 For-Each 遍历 List\n     for (String str : list) &#123;            &#x2F;&#x2F;也可以改写 for(int i&#x3D;0;i&lt;list.size();i++) 这种形式\n        System.out.println(str);\n     &#125;\n \n     &#x2F;&#x2F;第二种遍历，把链表变为数组相关的内容进行遍历\n     String[] strArray&#x3D;new String[list.size()];\n     list.toArray(strArray);\n     for(int i&#x3D;0;i&lt;strArray.length;i++) &#x2F;&#x2F;这里也可以改写为  for(String str:strArray) 这种形式\n     &#123;\n        System.out.println(strArray[i]);\n     &#125;\n     \n    &#x2F;&#x2F;第三种遍历 使用迭代器进行相关遍历\n     \n     Iterator&lt;String&gt; ite&#x3D;list.iterator();\n     while(ite.hasNext())&#x2F;&#x2F;判断下一个元素之后有值\n     &#123;\n         System.out.println(ite.next());\n     &#125;\n &#125;\n&#125;</code></pre>\n</li>\n<li><p>代码解析：第三种方法是采用迭代器的方法，该方法可以不用担心在遍历的过程中会超出集合的长度</p>\n</li>\n<li><p>代码示例：Map</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.*;\n \npublic class Test&#123;\n     public static void main(String[] args) &#123;\n      Map&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();\n      map.put(&quot;1&quot;, &quot;value1&quot;);\n      map.put(&quot;2&quot;, &quot;value2&quot;);\n      map.put(&quot;3&quot;, &quot;value3&quot;);\n      \n      &#x2F;&#x2F;第一种：普遍使用，二次取值\n      System.out.println(&quot;通过Map.keySet遍历key和value：&quot;);\n      for (String key : map.keySet()) &#123;\n       System.out.println(&quot;key&#x3D; &quot;+ key + &quot; and value&#x3D; &quot; + map.get(key));\n      &#125;\n      \n      &#x2F;&#x2F;第二种\n      System.out.println(&quot;通过Map.entrySet使用iterator遍历key和value：&quot;);\n      Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it &#x3D; map.entrySet().iterator();\n      while (it.hasNext()) &#123;\n       Map.Entry&lt;String, String&gt; entry &#x3D; it.next();\n       System.out.println(&quot;key&#x3D; &quot; + entry.getKey() + &quot; and value&#x3D; &quot; + entry.getValue());\n      &#125;\n      \n      &#x2F;&#x2F;第三种：推荐，尤其是容量大时\n      System.out.println(&quot;通过Map.entrySet遍历key和value&quot;);\n      for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;\n       System.out.println(&quot;key&#x3D; &quot; + entry.getKey() + &quot; and value&#x3D; &quot; + entry.getValue());\n      &#125;\n    \n      &#x2F;&#x2F;第四种\n      System.out.println(&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;);\n      for (String v : map.values()) &#123;\n       System.out.println(&quot;value&#x3D; &quot; + v);\n      &#125;\n     &#125;\n&#125;</code></pre></li>\n</ul>\n<h5 id=\"3-5-1-集合排序\"><a href=\"#3-5-1-集合排序\" class=\"headerlink\" title=\"3.5.1 集合排序\"></a>3.5.1 集合排序</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project8;\n\nimport java.util.Comparator;\nimport java.util.Vector;\n\nclass Student\n&#123;\n    int id;\n    String name;\n    String sex;\n    int computerGrade;\n    int cGrade;\n    int mathGrade;\n    int physicalGrade;\n\n    Student(int id, String name, String sex, int computerGrade, int cGrade, int mathGrade, int physicalGrade)\n    &#123;\n        this.id &#x3D; id;\n        this.name &#x3D; name;\n        this.sex &#x3D; sex;\n        this.computerGrade &#x3D; computerGrade;\n        this.cGrade &#x3D; cGrade;\n        this.mathGrade &#x3D; mathGrade;\n        this.physicalGrade &#x3D; physicalGrade;\n    &#125;\n&#125;\n\nclass DownSort implements Comparator&lt;Student&gt;\n&#123;\n    public int compare(Student s1, Student s2)\n    &#123;\n        int g1 &#x3D; s1.computerGrade + s1.cGrade + s1.mathGrade + s1.physicalGrade;\n        int g2 &#x3D; s2.computerGrade + s2.cGrade + s2.mathGrade + s2.physicalGrade;\n\n        return Integer.compare(g2, g1);\n    &#125;\n&#125;\n\npublic class Demo\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Vector&lt;Student&gt; vS &#x3D; new Vector&lt;&gt;();\n        Comparator&lt;Student&gt; comparator &#x3D; new DownSort();\n        Student s1 &#x3D; new Student(1001, &quot;mary&quot;, &quot;女&quot;, 90, 80, 78, 83);\n        Student s2 &#x3D; new Student(1002, &quot;tom&quot;, &quot;男&quot;, 80, 81, 79, 84);\n        Student s3 &#x3D; new Student(1003, &quot;jerry&quot;, &quot;男&quot;, 93, 82, 80, 85);\n        Student s4 &#x3D; new Student(1004, &quot;john&quot;, &quot;男&quot;, 90, 83, 81, 86);\n\n        vS.add(s1);\n        vS.add(s2);\n        vS.add(s3);\n        vS.add(s4);\n\n        System.out.println(&quot;全部显示》》&quot;);\n        printInfo(vS);\n\n        vS.sort(comparator);\n\n        System.out.println(&quot;按总分排序》》&quot;);\n        printInfo(vS);\n\n        System.out.println(&quot;查询》》&quot;);\n        searcher(vS, 1001);\n    &#125;\n\n    static void printInfo(Vector&lt;Student&gt; vS)\n    &#123;\n        for (Student s : vS)\n        &#123;\n            System.out.println(s.id + &quot; &quot; + s.name + &quot; &quot; + s.sex + &quot; &quot; + s.computerGrade + &quot; &quot; + s.cGrade + &quot; &quot; + s.mathGrade + &quot; &quot; + s.physicalGrade);\n        &#125;\n        System.out.println();\n    &#125;\n\n    static void searcher(Vector&lt;Student&gt; vs, int id)\n    &#123;\n        for (Student s : vs)\n        &#123;\n            if (s.id &#x3D;&#x3D; id)\n            &#123;\n                System.out.println(s.id + &quot; &quot; + s.name + &quot; &quot; + s.sex + &quot; &quot; + s.computerGrade + &quot; &quot; + s.cGrade + &quot; &quot; + s.mathGrade + &quot; &quot; + s.physicalGrade);\n            &#125;\n        &#125;\n        System.out.println();\n    &#125;\n&#125;\n</code></pre>\n\n\n\n\n\n<h4 id=\"3-6-异常处理\"><a href=\"#3-6-异常处理\" class=\"headerlink\" title=\"3.6 异常处理\"></a>3.6 异常处理</h4><ul>\n<li><p>异常概念：</p>\n<ul>\n<li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题</li>\n</ul>\n</li>\n<li><p>Exception类的层次</p>\n<ul>\n<li>IOException 类</li>\n<li>RuntimeException 类</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-6-1-异常方法\"><a href=\"#3-6-1-异常方法\" class=\"headerlink\" title=\"3.6.1 异常方法\"></a>3.6.1 异常方法</h5><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法及说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><strong>public String getMessage()</strong><br/>返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>public Throwable getCause()</strong><br/>返回一个Throwable 对象代表异常原因。</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>public String toString()</strong><br/>使用getMessage()的结果返回类的串级名字。</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>public void printStackTrace()</strong><br/>打印toString()结果和栈层次到System.err，即错误输出流。</td>\n</tr>\n<tr>\n<td>5</td>\n<td><strong>public StackTraceElement [] getStackTrace()</strong><br/>返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。</td>\n</tr>\n<tr>\n<td>6</td>\n<td><strong>public Throwable fillInStackTrace()</strong><br/>用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。</td>\n</tr>\n</tbody></table>\n<h5 id=\"3-6-2-捕获异常\"><a href=\"#3-6-2-捕获异常\" class=\"headerlink\" title=\"3.6.2 捕获异常\"></a>3.6.2 捕获异常</h5><ul>\n<li>使用 try 和 catch 关键字可以捕获异常。try&#x2F;catch 代码块放在异常可能发生的地方</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try\n&#123;\n   &#x2F;&#x2F; 程序代码\n&#125;catch(ExceptionName e1)\n&#123;\n   &#x2F;&#x2F;Catch 块\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.io.*;\npublic class ExcepTest&#123;\n \n   public static void main(String args[])&#123;\n      try&#123;\n         int a[] &#x3D; new int[2];\n         System.out.println(&quot;Access element three :&quot; + a[3]);\n      &#125;catch(ArrayIndexOutOfBoundsException e)&#123;\n         System.out.println(&quot;Exception thrown  :&quot; + e);\n      &#125;\n      System.out.println(&quot;Out of the block&quot;);\n   &#125;\n&#125;</code></pre>\n\n\n\n<h5 id=\"3-6-3-多重捕获块\"><a href=\"#3-6-3-多重捕获块\" class=\"headerlink\" title=\"3.6.3 多重捕获块\"></a>3.6.3 多重捕获块</h5><ul>\n<li>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try&#123;\n   &#x2F;&#x2F; 程序代码\n&#125;catch(异常类型1 异常的变量名1)&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;catch(异常类型2 异常的变量名2)&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;catch(异常类型3 异常的变量名3)&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try &#123;\n    file &#x3D; new FileInputStream(fileName);\n    x &#x3D; (byte) file.read();\n&#125; catch(FileNotFoundException f) &#123; &#x2F;&#x2F; Not valid!\n    f.printStackTrace();\n    return -1;\n&#125; catch(IOException i) &#123;\n    i.printStackTrace();\n    return -1;\n&#125;</code></pre>\n\n\n\n\n\n<h5 id=\"3-6-4-throws-x2F-throw-关键字\"><a href=\"#3-6-4-throws-x2F-throw-关键字\" class=\"headerlink\" title=\"3.6.4 throws &#x2F; throw 关键字\"></a>3.6.4 throws &#x2F; throw 关键字</h5><ul>\n<li>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.io.*;\npublic class className\n&#123;\n  public void deposit(double amount) throws RemoteException\n  &#123;\n    &#x2F;&#x2F; Method implementation\n    throw new RemoteException();\n  &#125;\n  &#x2F;&#x2F;Remainder of class definition\n&#125;</code></pre>\n\n\n\n<h5 id=\"3-6-5-finally-关键字\"><a href=\"#3-6-5-finally-关键字\" class=\"headerlink\" title=\"3.6.5 finally 关键字\"></a>3.6.5 finally 关键字</h5><ul>\n<li>finally 关键字用来创建在 try 代码块后面执行的代码块</li>\n<li>无论是否发生异常，finally 代码块中的代码总会被执行</li>\n<li>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;catch(异常类型1 异常的变量名1)&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;catch(异常类型2 异常的变量名2)&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;finally&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExcepTest&#123;\n  public static void main(String args[])&#123;\n    int a[] &#x3D; new int[2];\n    try&#123;\n       System.out.println(&quot;Access element three :&quot; + a[3]);\n    &#125;catch(ArrayIndexOutOfBoundsException e)&#123;\n       System.out.println(&quot;Exception thrown  :&quot; + e);\n    &#125;\n    finally&#123;\n       a[0] &#x3D; 6;\n       System.out.println(&quot;First element value: &quot; +a[0]);\n       System.out.println(&quot;The finally statement is executed&quot;);\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<ul>\n<li>注意：<ul>\n<li>catch 不能独立于 try 存在</li>\n<li>在 try&#x2F;catch 后面添加 finally 块并非强制性要求的</li>\n<li>try 代码后不能既没 catch 块也没 finally 块</li>\n<li>try, catch, finally 块之间不能添加任何代码</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-6-6-声明自定义异常\"><a href=\"#3-6-6-声明自定义异常\" class=\"headerlink\" title=\"3.6.6 声明自定义异常\"></a>3.6.6 声明自定义异常</h5><ul>\n<li><p>Java 中可以自定义异常</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类</li>\n<li>如果写一个检查性异常类，则需要继承 Exception 类</li>\n<li>如果写一个运行时异常类，那么需要继承 RuntimeException 类</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class MyException extends Exception&#123;&#125;</code></pre>\n</li>\n<li><p>代码示例：</p>\n</li>\n<li><p>BankDemo.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class BankDemo\n&#123;\n   public static void main(String [] args)\n   &#123;\n      CheckingAccount c &#x3D; new CheckingAccount(101);\n      System.out.println(&quot;Depositing $500...&quot;);\n      c.deposit(500.00);\n      try\n      &#123;\n         System.out.println(&quot;\\nWithdrawing $100...&quot;);\n         c.withdraw(100.00);\n         System.out.println(&quot;\\nWithdrawing $600...&quot;);\n         c.withdraw(600.00);\n      &#125;catch(InsufficientFundsException e)\n      &#123;\n         System.out.println(&quot;Sorry, but you are short $&quot;\n                                  + e.getAmount());\n         e.printStackTrace();\n      &#125;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>InsufficientFundsException.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.io.*;\n \n&#x2F;&#x2F;自定义异常类，继承Exception类\npublic class InsufficientFundsException extends Exception\n&#123;\n  &#x2F;&#x2F;此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱\n  private double amount;\n  public InsufficientFundsException(double amount)\n  &#123;\n    this.amount &#x3D; amount;\n  &#125; \n  public double getAmount()\n  &#123;\n    return amount;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>CheckingAccount.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.io.*;\n \n&#x2F;&#x2F;此类模拟银行账户\npublic class CheckingAccount\n&#123;\n  &#x2F;&#x2F;balance为余额，number为卡号\n   private double balance;\n   private int number;\n   public CheckingAccount(int number)\n   &#123;\n      this.number &#x3D; number;\n   &#125;\n  &#x2F;&#x2F;方法：存钱\n   public void deposit(double amount)\n   &#123;\n      balance +&#x3D; amount;\n   &#125;\n  &#x2F;&#x2F;方法：取钱\n   public void withdraw(double amount) throws\n                              InsufficientFundsException\n   &#123;\n      if(amount &lt;&#x3D; balance)\n      &#123;\n         balance -&#x3D; amount;\n      &#125;\n      else\n      &#123;\n         double needs &#x3D; amount - balance;\n         throw new InsufficientFundsException(needs);\n      &#125;\n   &#125;\n  &#x2F;&#x2F;方法：返回余额\n   public double getBalance()\n   &#123;\n      return balance;\n   &#125;\n  &#x2F;&#x2F;方法：返回卡号\n   public int getNumber()\n   &#123;\n      return number;\n   &#125;\n&#125;</code></pre>\n\n\n</li>\n<li><p>代码示例：自定义异常处理–验证码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project5;\n\nimport java.util.Random;\nimport java.util.Scanner;\n\nclass MyException extends Exception\n&#123;\n    MyException(String s)\n    &#123;\n        super(s);\n    &#125;\n&#125;\n\nclass VerifyDemo\n&#123;\n    int[] verifyArr &#x3D; new int[6];\n\n    void printArr(int[] arr)\n    &#123;\n        for (int j : arr)\n        &#123;\n            System.out.print(Character.toString(j) + &quot; &quot;);\n        &#125;\n    &#125;\n\n    void createVerifyCode()\n    &#123;\n        int verifySeed &#x3D; 65;\n        Random random &#x3D; new Random(System.currentTimeMillis());\n\n        for (int i &#x3D; 0; i &lt; 6; ++i)\n        &#123;\n            int rand &#x3D; random.nextInt(26);\n            verifyArr[i] &#x3D; verifySeed + rand;\n        &#125;\n\n        printArr(verifyArr);\n    &#125;\n\n    int[] transformStringToArrInt(String s)\n    &#123;\n        int[] arr &#x3D; new int[6];\n        char[] charArr &#x3D; s.toCharArray();\n        for (int i &#x3D; 0; i &lt; charArr.length; ++i)\n        &#123;\n            arr[i] &#x3D; charArr[i];\n        &#125;\n        return arr;\n    &#125;\n\n    boolean checkVerifyCode(int[] arr)\n    &#123;\n        boolean isTrue &#x3D; true;\n        for (int i &#x3D; 0; i &lt; arr.length; ++i)\n        &#123;\n            if (arr[i] !&#x3D; verifyArr[i])\n            &#123;\n                isTrue &#x3D; false;\n                break;\n            &#125;\n        &#125;\n        return isTrue;\n    &#125;\n&#125;\n\npublic class Demo\n&#123;\n    public static void main(String[] args)\n    &#123;\n        Scanner scanner &#x3D; new Scanner(System.in);\n        VerifyDemo verifydemo &#x3D; new VerifyDemo();\n        String inputStr;\n\n        System.out.print(&quot;Verify Code: &quot;);\n        verifydemo.createVerifyCode();\n        System.out.println();\n        System.out.print(&quot;&gt;&gt; &quot;);\n        inputStr &#x3D; scanner.next();\n\n        int[] verifyArr &#x3D; verifydemo.transformStringToArrInt(inputStr);\n        boolean isVerifyTrue &#x3D; verifydemo.checkVerifyCode(verifyArr);\n\n        try\n        &#123;\n            if (isVerifyTrue)\n            &#123;\n                throw new MyException(&quot;&lt;-- Verification Code True! --&gt;&quot;);\n            &#125;\n            else\n            &#123;\n                throw new MyException(&quot;&lt;-- Verification Code Error! --&gt;&quot;);\n            &#125;\n        &#125;\n        catch (MyException exception)\n        &#123;\n            System.out.println(exception.getMessage());\n        &#125;\n    &#125;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-7-多线程\"><a href=\"#3-7-多线程\" class=\"headerlink\" title=\"3.7 多线程\"></a>3.7 多线程</h4><h5 id=\"3-7-1-线程的生命周期\"><a href=\"#3-7-1-线程的生命周期\" class=\"headerlink\" title=\"3.7.1 线程的生命周期\"></a>3.7.1 线程的生命周期</h5><ul>\n<li><strong>新建状态:</strong><ul>\n<li>使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程</li>\n</ul>\n</li>\n<li><strong>就绪状态:</strong><ul>\n<li>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度</li>\n</ul>\n</li>\n<li><strong>运行状态:</strong><ul>\n<li>如果就绪状态的线程获取 CPU 资源，就可以执行 **run()**，此时线程便处于运行状态</li>\n<li>处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态</li>\n</ul>\n</li>\n<li><strong>阻塞状态:</strong><ul>\n<li>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态</li>\n<li>在睡眠时间已到或获得设备资源后可以重新进入就绪状态，可以分为三种：<ul>\n<li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态</li>\n<li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)</li>\n<li>其他阻塞：<ul>\n<li>通过调用线程的 sleep() 或 join() 发出了 I&#x2F;O 请求时，线程就会进入到阻塞状态</li>\n<li>当sleep() 状态超时，join() 等待线程终止或超时，或者 I&#x2F;O 处理完毕，线程重新转入就绪状态</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>死亡状态:</strong><ul>\n<li>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-7-2-线程的优先级\"><a href=\"#3-7-2-线程的优先级\" class=\"headerlink\" title=\"3.7.2 线程的优先级\"></a>3.7.2 线程的优先级</h5><ul>\n<li>作用：每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序</li>\n<li>方法：其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）</li>\n</ul>\n<h5 id=\"3-7-3-线程的创建\"><a href=\"#3-7-3-线程的创建\" class=\"headerlink\" title=\"3.7.3 线程的创建\"></a>3.7.3 线程的创建</h5><ul>\n<li><p>创建方法：</p>\n<ul>\n<li>通过实现 Runnable 接口</li>\n<li>通过继承 Thread 类本身</li>\n<li>通过 Callable 和 Future 创建线程</li>\n</ul>\n</li>\n<li><p>代码示例：两个各自跑完100m</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project6;\n\npublic class Demo\n&#123;\n    public static void main(String[] args)\n    &#123;\n        FH_Thread fh_thread_1 &#x3D; new FH_Thread();\n        FH_Thread fh_thread_2 &#x3D; new FH_Thread();\n\n        Thread thread_1 &#x3D; new Thread(fh_thread_1, &quot;&lt;Fang&gt; 跑&gt;&gt;&quot;);\n        Thread thread_2 &#x3D; new Thread(fh_thread_2, &quot;&lt;张三&gt; 跑&gt;&gt;&quot;);\n\n        thread_1.start();\n        thread_2.start();\n    &#125;\n&#125;\n\nclass FH_Thread implements Runnable\n&#123;\n    int all &#x3D; 100;\n\n    public void run()\n    &#123;\n        while (true)\n        &#123;\n            if (all &gt; 0)\n            &#123;\n                try\n                &#123;\n                    Thread.sleep((int)(100+Math.random()*500));\n                &#125;\n                catch (InterruptedException e)\n                &#123;\n                    e.printStackTrace();\n                &#125;\n\n                System.out.println(Thread.currentThread().getName() + &quot; 5m&quot;);\n                all -&#x3D; 5;\n            &#125;\n            else\n            &#123;\n                System.out.println(Thread.currentThread().getName() + &quot; 完100m&quot;);\n                break;\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-8-文件IO\"><a href=\"#3-8-文件IO\" class=\"headerlink\" title=\"3.8 文件IO\"></a>3.8 文件IO</h4><ul>\n<li>文件IO类：<ul>\n<li><a href=\"https://www.runoob.com/java/java-file.html\">File Class(类)</a></li>\n<li><a href=\"https://www.runoob.com/java/java-filereader.html\">FileReader Class(类)</a></li>\n<li><a href=\"https://www.runoob.com/java/java-filewriter.html\">FileWriter Class(类)</a></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-8-1-代码示例：\"><a href=\"#3-8-1-代码示例：\" class=\"headerlink\" title=\"3.8.1 代码示例：\"></a>3.8.1 代码示例：</h5><ul>\n<li><p>案例描述：通过文件IO，创建排行榜和排序</p>\n</li>\n<li><p>文件结构：</p>\n<ul>\n<li>project7<ul>\n<li>Demo.java</li>\n<li>LeaderBoard.java</li>\n<li>Player.java</li>\n<li>UpSort.java</li>\n<li>LeaderBoard.txt</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>源码：</p>\n</li>\n<li><p>Demo.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project7;\n\npublic class Demo\n&#123;\n    public static void main(String[] args)\n    &#123;\n        LeaderBoard leaderBoard &#x3D; new LeaderBoard();\n        leaderBoard.initPage();\n        leaderBoard.writePage();\n        leaderBoard.readPage();\n        leaderBoard.updatePage();\n        leaderBoard.readPage();\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>LeaderBoard.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project7;\n\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class LeaderBoard\n&#123;\n    Scanner scanner &#x3D;new Scanner(System.in);\n    Vector&lt;Player&gt; vPlayer &#x3D; new Vector&lt;&gt;();\n    Comparator&lt;Player&gt; comparator &#x3D; new UpSort();\n\n    public void initPage()\n    &#123;\n        System.out.println(&quot;&lt;-- Origin Leader Board --&gt;&quot;);\n        Player player1 &#x3D; new Player(&quot;A&quot;, 1);\n        Player player2 &#x3D; new Player(&quot;B&quot;, 4);\n        Player player3 &#x3D; new Player(&quot;C&quot;, 5);\n        Player player4 &#x3D; new Player(&quot;D&quot;, 8);\n\n        vPlayer.add(player1);\n        vPlayer.add(player2);\n        vPlayer.add(player3);\n        vPlayer.add(player4);\n\n        vPlayer.sort(comparator);\n    &#125;\n\n    public void readPage()\n    &#123;\n        FileReader fileReader &#x3D; null;\n        try\n        &#123;\n            fileReader &#x3D; new FileReader(&quot;src\\\\project7\\\\leaderBoard.txt&quot;);\n            int i;\n            while ((i &#x3D; fileReader.read()) !&#x3D; -1)\n            &#123;\n                System.out.print((char)i);\n            &#125;\n        &#125;\n        catch (Exception e)\n        &#123;\n            System.out.println(&quot;Page Can&#39;t Read&quot;);\n        &#125;\n        finally\n        &#123;\n            try\n            &#123;\n                assert fileReader !&#x3D; null;\n                fileReader.close();\n            &#125;\n            catch (IOException e)\n            &#123;\n                System.out.println(&quot;Page Not Found&quot;);\n            &#125;\n        &#125;\n    &#125;\n\n    public void writePage()\n    &#123;\n        FileWriter fileWriter &#x3D; null;\n        try\n        &#123;\n            fileWriter &#x3D; new FileWriter(&quot;src\\\\project7\\\\leaderBoard.txt&quot;);\n            for (Player player : vPlayer)\n            &#123;\n                fileWriter.write(player.grade + &quot;: &quot; + player.name + &quot;\\r\\n&quot;);\n            &#125;\n        &#125;\n        catch (Exception e)\n        &#123;\n            System.out.println(&quot;Page Can&#39;t Write&quot;);\n        &#125;\n        finally\n        &#123;\n            try\n            &#123;\n                assert fileWriter !&#x3D; null;\n                fileWriter.close();\n            &#125;\n            catch (IOException e)\n            &#123;\n                System.out.println(&quot;Page Not Found&quot;);\n            &#125;\n        &#125;\n    &#125;\n\n    public void updatePage()\n    &#123;\n        System.out.println(&quot;Add New Player &gt;&gt;&quot;);\n\n        System.out.print(&quot;Input Name: &quot;);\n        String newName &#x3D; scanner.next();\n\n        System.out.print(&quot;Input Grade: &quot;);\n        int newGrade &#x3D; scanner.nextInt();\n\n        Player newPlayer &#x3D; new Player(newName, newGrade);\n        vPlayer.add(newPlayer);\n        vPlayer.sort(comparator);\n\n        System.out.println();\n        System.out.println(&quot;### Updated Leader Board ###&quot;);\n        System.out.println();\n        System.out.println(&quot;&lt;-- New Leader Board --&gt;&quot;);\n\n        writePage();\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>Player.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project7;\n\npublic class Player\n&#123;\n    String name;\n    int grade;\n\n    Player(String name, int grade)\n    &#123;\n        this.name &#x3D; name;\n        this.grade &#x3D; grade;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>UpSort.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package project7;\n\nimport java.util.Comparator;\n\npublic class UpSort implements Comparator&lt;Player&gt;\n&#123;\n    public int compare(Player player1, Player player2)\n    &#123;\n        return Integer.compare(player1.grade, player2.grade);\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>LeaderBoard.txt</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">1: A\n2: E\n4: B\n5: C\n8: D</code></pre></li>\n</ul>\n","feature":true,"text":"Java基础1. Java环境配置1.1 手动配置Java环境1.1.1 Oracle官网获得JDK Java-JDK 获得JDK，默认安装C盘即可 1.1.2 配置环境变量 在系统变量，设置三项属性： JAVA_HOME PATH CLASSPATH（JDK1.5版本以上，无需...","link":"","photos":[],"count_time":{"symbolsCount":"50k","symbolsTime":"45 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Java基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1. Java环境配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">1.1 手动配置Java环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-1-Oracle%E5%AE%98%E7%BD%91%E8%8E%B7%E5%BE%97JDK\"><span class=\"toc-text\">1.1.1 Oracle官网获得JDK</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-2-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.1.2 配置环境变量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-3-%E6%B5%8B%E8%AF%95Java%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">1.1.3 测试Java编译</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E9%80%9A%E8%BF%87Intellij-IDEA%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1.2 通过Intellij IDEA配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-1-%E5%AE%89%E8%A3%85IDEA\"><span class=\"toc-text\">1.2.1 安装IDEA</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-2-%E5%85%B3%E9%94%AE%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">1.2.2 关键设置</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Java%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2. Java基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-Java%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">2.1 Java标识符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">2.2 常量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.3 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-1-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">2.3.1 数据类型的分类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-2-%E6%95%B4%E5%9E%8B\"><span class=\"toc-text\">2.3.2 整型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-3-%E6%B5%AE%E7%82%B9%E5%9E%8B\"><span class=\"toc-text\">2.3.3 浮点型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-4-%E5%AD%97%E7%AC%A6%E5%9E%8B\"><span class=\"toc-text\">2.3.4 字符型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-4-%E5%B8%83%E5%B0%94%E5%9E%8B\"><span class=\"toc-text\">2.3.4 布尔型</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-Java%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">2.4 Java输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">2.5 三目运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-Java%E4%BE%8B%E9%A2%98\"><span class=\"toc-text\">2.6 Java例题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-6-1-%E8%BE%93%E5%85%A5%E4%B8%89%E4%BD%8D%E6%95%B0%EF%BC%8C%E5%B0%86%E5%90%84%E4%B8%AA%E4%BD%8D%E6%95%B0%E5%8F%96%E5%87%BA\"><span class=\"toc-text\">2.6.1 输入三位数，将各个位数取出</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-6-2-%E5%B0%86%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E5%80%BC%E4%BA%92%E6%8D%A2\"><span class=\"toc-text\">2.6.2 将两个变量值互换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#2-6-2-1-%E8%AE%BE%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">2.6.2.1 设临时变量</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#2-6-2-2-%E4%B8%A4%E6%95%B0%E5%8A%A0%E5%87%8F\"><span class=\"toc-text\">2.6.2.2 两数加减</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#2-6-2-3-%E5%BC%82%E6%88%96\"><span class=\"toc-text\">2.6.2.3 异或</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-7-switch%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.7 switch选择语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-7-1-%E4%BE%8B%E9%A2%981\"><span class=\"toc-text\">2.7.1 例题1</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-7-2-%E4%BE%8B%E9%A2%982\"><span class=\"toc-text\">2.7.2 例题2</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-7-3-%E4%BE%8B%E9%A2%983\"><span class=\"toc-text\">2.7.3 例题3</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-7-4-%E4%BE%8B%E9%A2%984\"><span class=\"toc-text\">2.7.4 例题4</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-8-for%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">2.8 for循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-8-1-%E4%BE%8B%E9%A2%981\"><span class=\"toc-text\">2.8.1 例题1</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-8-2-%E4%BE%8B%E9%A2%982\"><span class=\"toc-text\">2.8.2 例题2</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-8-3-%E4%BE%8B%E9%A2%983\"><span class=\"toc-text\">2.8.3 例题3</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-9-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\">2.9 函数重载题目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-9-1-%E4%BE%8B%E9%A2%981\"><span class=\"toc-text\">2.9.1 例题1</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-0-Java%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.0 Java对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-0-1-%E4%BE%8B%E9%A2%981\"><span class=\"toc-text\">3.0.1 例题1</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">3.1 对象继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-1-%E7%BB%A7%E6%89%BF%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.1.1 继承概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-2-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3.1.2 代码示例</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">3.2 抽象类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">3.3 接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-1-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">3.3.1 接口的声明</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-2-%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">3.3.2 接口的特性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-3-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">3.3.3 接口的实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-4-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E2%80%93%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3.3.4 代码示例–文件结构</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E6%95%B0%E7%BB%84%E5%92%8C%E5%B8%B8%E7%94%A8%E7%B1%BB\"><span class=\"toc-text\">3.4 数组和常用类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">3.5 集合框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-5-1-%E9%9B%86%E5%90%88%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">3.5.1 集合排序</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">3.6 异常处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-1-%E5%BC%82%E5%B8%B8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.6.1 异常方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-2-%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">3.6.2 捕获异常</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-3-%E5%A4%9A%E9%87%8D%E6%8D%95%E8%8E%B7%E5%9D%97\"><span class=\"toc-text\">3.6.3 多重捕获块</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-4-throws-x2F-throw-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">3.6.4 throws &#x2F; throw 关键字</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-5-finally-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">3.6.5 finally 关键字</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-6-%E5%A3%B0%E6%98%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">3.6.6 声明自定义异常</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">3.7 多线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">3.7.1 线程的生命周期</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-2-%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">3.7.2 线程的优先级</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-3-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">3.7.3 线程的创建</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-8-%E6%96%87%E4%BB%B6IO\"><span class=\"toc-text\">3.8 文件IO</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-8-1-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">3.8.1 代码示例：</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":{"img":"/img/fh.png"},"link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"https://twitter.com/nUCFA2659We0pmu","stackoverflow":"https://stackoverflow.com/users/20173508/user20173508","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"汇编_辅助C++","uid":"a6ccd9fe4a40d3d3e4e5ed99b6f169f1","slug":"11_汇编_辅助C++_01","date":"2022-10-06T07:28:25.978Z","updated":"2021-12-05T10:27:40.410Z","comments":true,"path":"api/articles/11_汇编_辅助C++_01.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN/Post_Img_mini/postImg_23.jpg","text":"汇编_辅助C++ 汇编语言种类：x64汇编（64bit） 书写格式：intel 汇编不区分大小写 1. 汇编格式了解 项目 intel 说明 寄存器命名 eax intel不带% 操作数顺序 mov edx, eax 将eax的值赋值给edx 常数\\立即数 mov eax, 3m...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"Assemly","slug":"Assemly","count":2,"path":"api/tags/Assemly.json"},{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":{"img":"/img/fh.png"},"link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"https://twitter.com/nUCFA2659We0pmu","stackoverflow":"https://stackoverflow.com/users/20173508/user20173508","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Dart基础","uid":"9db7fbf272adb83d4da91baa664ab4df","slug":"9.Dart基础_01","date":"2022-10-06T07:28:25.973Z","updated":"2021-04-22T07:34:00.078Z","comments":true,"path":"api/articles/9.Dart基础_01.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN/Post_Img_mini/postImg_16.jpg","text":"Dart1. Dart 安装 配套Flutter使用，安装Flutter SDK 1.21之后的版本，默认包含了最新的Dart SDK，不需要再额外安装Dart SDK 运行命令 PS C:\\Windows\\System32&gt; dart --version Dart SDK...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"Dart","slug":"Dart","count":1,"path":"api/tags/Dart.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":{"img":"/img/fh.png"},"link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"https://twitter.com/nUCFA2659We0pmu","stackoverflow":"https://stackoverflow.com/users/20173508/user20173508","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}