{"title":"UE5字符匹配插件","uid":"f52313d227afc03c4ee84d484027810d","slug":"7_21_UE5字符匹配插件","date":"2024-02-29T06:19:33.437Z","updated":"2024-02-29T06:18:48.328Z","comments":true,"path":"api/articles/7_21_UE5字符匹配插件.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (43).webp","content":"<h1 id=\"UE5字符匹配插件\"><a href=\"#UE5字符匹配插件\" class=\"headerlink\" title=\"UE5字符匹配插件\"></a>UE5字符匹配插件</h1><p>[toc]</p>\n<h3 id=\"0-github\"><a href=\"#0-github\" class=\"headerlink\" title=\"0. github\"></a>0. github</h3><p><a href=\"https://github.com/FHangH/FH_StringSimilarity\">UE5字符匹配插件</a></p>\n<h3 id=\"1-功能介绍\"><a href=\"#1-功能介绍\" class=\"headerlink\" title=\"1. 功能介绍\"></a>1. 功能介绍</h3><h4 id=\"1-1-字符匹配\"><a href=\"#1-1-字符匹配\" class=\"headerlink\" title=\"1.1 字符匹配\"></a>1.1 字符匹配</h4><ul>\n<li>支持<code>莱温斯特编辑距离</code>和<code>Jaccard</code>两种字符匹配算法</li>\n<li>正常情况下，推荐<code>莱温斯特编辑距离</code></li>\n</ul>\n<h4 id=\"1-2-匹配方式\"><a href=\"#1-2-匹配方式\" class=\"headerlink\" title=\"1.2 匹配方式\"></a>1.2 匹配方式</h4><ul>\n<li><code>StringSimilarity</code>选择匹配类型，进行两个字符串匹配，返回匹配率</li>\n<li><code>StrArraySimilarity</code>选择匹配类型，将一组字符串和一个字符串进行匹配，，返回匹配率和匹配率最高的字符串</li>\n</ul>\n<h4 id=\"1-3-清除中英文标点符号和空格\"><a href=\"#1-3-清除中英文标点符号和空格\" class=\"headerlink\" title=\"1.3 清除中英文标点符号和空格\"></a>1.3 清除中英文标点符号和空格</h4><ul>\n<li><code>RemoveSpacesAndSymbolsByString</code>可以移除字符串中的<ul>\n<li>英文标点符号和空格</li>\n<li>中文标点符号和空格</li>\n</ul>\n</li>\n<li><code>IsChinesePunctuationOrSpace</code>可以拓展</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">UFuncLib_StringSimilarity::IsChinesePunctuationOrSpace</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">wchar_t</span> C)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (C == <span class=\"string\">L&#x27;，&#x27;</span> || C == <span class=\"string\">L&#x27;。&#x27;</span> || C == <span class=\"string\">L&#x27;！&#x27;</span> || C == <span class=\"string\">L&#x27;？&#x27;</span> || C == <span class=\"string\">L&#x27; &#x27;</span> || C == <span class=\"string\">L&#x27;：&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-API\"><a href=\"#2-API\" class=\"headerlink\" title=\"2. API\"></a>2. API</h3><p><code>FuncLib_StringSimilarity.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;CoreMinimal.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;FuncLib_StringSimilarity.generated.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UENUM</span>(BlueprintType)</span><br><span class=\"line\"><span class=\"keyword\">enum class</span> <span class=\"title class_\">ESimilarityType</span> : uint8</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"function\">EST_Levenshtein\t\t<span class=\"title\">UMETA</span><span class=\"params\">(Displayname=<span class=\"string\">&quot;莱温斯特编辑距离&quot;</span>)</span>,</span></span><br><span class=\"line\"><span class=\"function\">\tEST_Jaccard\t\t\t<span class=\"title\">UMETA</span><span class=\"params\">(Displayname=<span class=\"string\">&quot;Jaccard&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UCLASS</span>(BlueprintType)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FH_STRINGSIMILARITY_API</span> UFuncLib_StringSimilarity : <span class=\"keyword\">public</span> UBlueprintFunctionLibrary</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">GENERATED_BODY</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">LevenshteinDistance</span><span class=\"params\">(<span class=\"type\">const</span> FString&amp; Str1, <span class=\"type\">const</span> FString&amp; Str2)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>(BlueprintPure, Category=<span class=\"string\">&quot;FH|Similarity&quot;</span>, meta=(ToolTip=<span class=\"string\">&quot;比较两个字符串的相似度，中英文数字都能算，莱温斯特编辑距离精</span></span><br><span class=\"line\"><span class=\"string\">                                                             准(考虑顺序)， Jaccard(不考虑顺序，只考虑是否包含)&quot;</span>))</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">float</span> <span class=\"title\">StringSimilarity</span><span class=\"params\">(<span class=\"type\">const</span> ESimilarityType EST, <span class=\"type\">const</span> FString&amp; Str1, <span class=\"type\">const</span> FString&amp; Str2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>(BlueprintPure, Category=<span class=\"string\">&quot;FH|Similarity&quot;</span>, meta=(ToolTip=<span class=\"string\">&quot;一组字符串和待比较的字符串，计算所有的相似度，返回最大相似度</span></span><br><span class=\"line\"><span class=\"string\">                                                             和字符串，中英文数字都能算，莱温斯特编辑距离精准(考虑顺序)， </span></span><br><span class=\"line\"><span class=\"string\">                                                             Jaccard(不考虑顺序，只考虑是否包含)&quot;</span>))</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> FString <span class=\"title\">StrArraySimilarity</span><span class=\"params\">(<span class=\"type\">const</span> ESimilarityType EST, <span class=\"type\">const</span> TArray&lt;FString&gt;&amp; CompareStrArr, <span class=\"type\">const</span> FString&amp; </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                      NewStr, <span class=\"type\">float</span>&amp; Similarity)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">bool</span> <span class=\"title\">IsChinesePunctuationOrSpace</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">wchar_t</span> C)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">UFUNCTION</span>(BlueprintPure, Category=<span class=\"string\">&quot;FH|Similarity&quot;</span>, meta=(ToolTip=<span class=\"string\">&quot;删除字符串中的空格和标点符号&quot;</span>))</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> FString <span class=\"title\">RemoveSpacesAndSymbolsByString</span><span class=\"params\">(<span class=\"type\">const</span> FString&amp; Str)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>FuncLib_StringSimilarity.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;FuncLib_StringSimilarity.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">UFuncLib_StringSimilarity::LevenshteinDistance</span><span class=\"params\">(<span class=\"type\">const</span> FString&amp; Str1, <span class=\"type\">const</span> FString&amp; Str2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Str1 == Str2)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> m = Str1.<span class=\"built_in\">Len</span>();</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> n = Str2.<span class=\"built_in\">Len</span>();</span><br><span class=\"line\">\t<span class=\"function\">std::vector <span class=\"title\">T</span><span class=\"params\">(m + <span class=\"number\">1</span>, std::vector(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tT[i][<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tT[<span class=\"number\">0</span>][j] = j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">const</span> <span class=\"type\">int</span> Weight = Str1[i - <span class=\"number\">1</span>] == Str2[j - <span class=\"number\">1</span>] ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tT[i][j] = std::<span class=\"built_in\">min</span>(std::<span class=\"built_in\">min</span>(T[i<span class=\"number\">-1</span>][j] + <span class=\"number\">1</span>, T[i][j<span class=\"number\">-1</span>] + <span class=\"number\">1</span>), T[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] + Weight);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> T[m][n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">UFuncLib_StringSimilarity::StringSimilarity</span><span class=\"params\">(<span class=\"type\">const</span> ESimilarityType EST, <span class=\"type\">const</span> FString&amp; Str1, <span class=\"type\">const</span> FString&amp; Str2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (EST == ESimilarityType::EST_Jaccard)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">std::string <span class=\"title\">S1</span><span class=\"params\">(TCHAR_TO_UTF8(*Str1))</span></span>;</span><br><span class=\"line\">\t\t<span class=\"function\">std::string <span class=\"title\">S2</span><span class=\"params\">(TCHAR_TO_UTF8(*Str2))</span></span>;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">const</span> std::unordered_set <span class=\"title\">Set_S1</span><span class=\"params\">(S1.begin(), S1.end())</span></span>;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">const</span> std::unordered_set <span class=\"title\">Set_S2</span><span class=\"params\">(S2.begin(), S2.end())</span></span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> Intersection = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> c : Set_S1)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Set_S2.<span class=\"built_in\">find</span>(c) != Set_S2.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t++Intersection;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(Intersection) / (Set_S1.<span class=\"built_in\">size</span>() + Set_S2.<span class=\"built_in\">size</span>() - Intersection);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (EST == ESimilarityType::EST_Levenshtein)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">const</span> <span class=\"type\">int</span> Distance = <span class=\"built_in\">LevenshteinDistance</span>(Str1, Str2);</span><br><span class=\"line\">\t\t<span class=\"type\">const</span> <span class=\"type\">int</span> MaxLength = std::<span class=\"built_in\">max</span>(Str1.<span class=\"built_in\">Len</span>(), Str2.<span class=\"built_in\">Len</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (MaxLength == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1.0f</span> - <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(Distance) / <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(MaxLength);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0.f</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FString <span class=\"title\">UFuncLib_StringSimilarity::StrArraySimilarity</span><span class=\"params\">(<span class=\"type\">const</span> ESimilarityType EST, <span class=\"type\">const</span> TArray&lt;FString&gt;&amp; CompareStrArr, <span class=\"type\">const</span> FString&amp; NewStr, <span class=\"type\">float</span>&amp; Similarity)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (CompareStrArr.<span class=\"built_in\">Num</span>() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> Index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">float</span> Temp = <span class=\"number\">0.f</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; CompareStrArr.<span class=\"built_in\">Num</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">StringSimilarity</span>(EST, CompareStrArr[i], NewStr) &gt; Temp)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tIndex = i;</span><br><span class=\"line\">\t\t\tTemp = <span class=\"built_in\">StringSimilarity</span>(EST, CompareStrArr[i], NewStr);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSimilarity = Temp;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> CompareStrArr[Index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">UFuncLib_StringSimilarity::IsChinesePunctuationOrSpace</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">wchar_t</span> C)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (C == <span class=\"string\">L&#x27;，&#x27;</span> || C == <span class=\"string\">L&#x27;。&#x27;</span> || C == <span class=\"string\">L&#x27;！&#x27;</span> || C == <span class=\"string\">L&#x27;？&#x27;</span> || C == <span class=\"string\">L&#x27; &#x27;</span> || C == <span class=\"string\">L&#x27;：&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FString <span class=\"title\">UFuncLib_StringSimilarity::RemoveSpacesAndSymbolsByString</span><span class=\"params\">(<span class=\"type\">const</span> FString&amp; Str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::wstring NewStr = <span class=\"built_in\">TCHAR_TO_WCHAR</span>(*Str);</span><br><span class=\"line\">\tNewStr.<span class=\"built_in\">erase</span>(</span><br><span class=\"line\">\t\tstd::<span class=\"built_in\">remove_if</span>(</span><br><span class=\"line\">\t\t\tNewStr.<span class=\"built_in\">begin</span>(), NewStr.<span class=\"built_in\">end</span>(), <span class=\"built_in\">static_cast</span>&lt;<span class=\"built_in\">int</span>(*)(<span class=\"type\">int</span>)&gt;(&amp;ispunct)),</span><br><span class=\"line\">\t\t\tNewStr.<span class=\"built_in\">end</span>()</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tNewStr.<span class=\"built_in\">erase</span>(</span><br><span class=\"line\">\t\tstd::<span class=\"built_in\">remove_if</span>(</span><br><span class=\"line\">\t\t\tNewStr.<span class=\"built_in\">begin</span>(), NewStr.<span class=\"built_in\">end</span>(), <span class=\"built_in\">static_cast</span>&lt;<span class=\"built_in\">int</span>(*)(<span class=\"type\">int</span>)&gt;(&amp;isspace)),</span><br><span class=\"line\">\t\t\tNewStr.<span class=\"built_in\">end</span>()</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tNewStr.<span class=\"built_in\">erase</span>(</span><br><span class=\"line\">\t\tstd::<span class=\"built_in\">remove_if</span>(</span><br><span class=\"line\">\t\t\tNewStr.<span class=\"built_in\">begin</span>(), NewStr.<span class=\"built_in\">end</span>(), IsChinesePunctuationOrSpace),</span><br><span class=\"line\">\t\t\tNewStr.<span class=\"built_in\">end</span>()</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">WCHAR_TO_TCHAR</span>(NewStr.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","text":"UE5字符匹配插件[toc] 0. githubUE5字符匹配插件 1. 功能介绍1.1 字符匹配 支持莱温斯特编辑距离和Jaccard两种字符匹配算法 正常情...","permalink":"/post/7_21_UE5字符匹配插件","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"},{"name":"Plugin","slug":"UnrealEngine/Plugin","count":7,"path":"api/categories/UnrealEngine/Plugin.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"},{"name":"Plugin","slug":"Plugin","count":9,"path":"api/tags/Plugin.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UE5%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">UE5字符匹配插件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0-github\"><span class=\"toc-text\">0. github</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1. 功能介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">1.1 字符匹配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E5%8C%B9%E9%85%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">1.2 匹配方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E6%B8%85%E9%99%A4%E4%B8%AD%E8%8B%B1%E6%96%87%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7%E5%92%8C%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\">1.3 清除中英文标点符号和空格</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-API\"><span class=\"toc-text\">2. API</span></a></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"UE4 RPC","uid":"01b2c0831f95e39e5fd56ec4f69b86cb","slug":"7_04_UE4_RPC","date":"2022-10-06T07:28:25.953Z","updated":"2023-01-10T01:10:19.445Z","comments":true,"path":"api/articles/7_04_UE4_RPC.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (20).webp","text":"UE4 RPC[toc] 1. RPC 架构1.1 架构简介 一个服务器， 一个或多个客户端 不能信任客户端，所有重要信息都需要通过服务器验证 Listen S...","permalink":"/post/7_04_UE4_RPC","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"UE5运行环境和平台判断插件","uid":"5c74a20a1969a2b5474b8c37c94903b1","slug":"7_20_UE5运行环境和平台判断插件","date":"2024-02-29T06:19:33.435Z","updated":"2024-02-29T06:18:40.297Z","comments":true,"path":"api/articles/7_20_UE5运行环境和平台判断插件.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (42).webp","text":"UE5运行环境和平台判断插件[toc] 0. githubUE5运行环境和平台判断插件 1. 结构设计Platform.h 123456789101112131...","permalink":"/post/7_20_UE5运行环境和平台判断插件","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"},{"name":"Plugin","slug":"UnrealEngine/Plugin","count":7,"path":"api/categories/UnrealEngine/Plugin.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"},{"name":"Plugin","slug":"Plugin","count":9,"path":"api/tags/Plugin.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}