{"title":"C++面试总结","uid":"93ae189cc435dab0c29dab59ae5e0773","slug":"1_09_C++面试总结","date":"2023-03-21T11:39:12.197Z","updated":"2024-02-22T08:25:08.341Z","comments":true,"path":"api/articles/1_09_C++面试总结.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (33).webp","content":"<h1 id=\"C-面试\"><a href=\"#C-面试\" class=\"headerlink\" title=\"C++面试\"></a>C++面试</h1><h3 id=\"1-线程和进程的区别\"><a href=\"#1-线程和进程的区别\" class=\"headerlink\" title=\"1. 线程和进程的区别\"></a>1. 线程和进程的区别</h3><ul>\n<li><p>线程和进程是操作系统中的两个基本概念。</p>\n</li>\n<li><p>线程是进程的一部分，它是操作系统调度的基本单位，而进程是一个具有一定独立功能的程序关于某个数据集合上的一次运行活动。</p>\n</li>\n<li><p>线程比进程更小，它可以更快地响应，并且更容易被操作系统调度。</p>\n</li>\n<li><p>线程可以共享进程的资源，如内存，文件句柄等，而进程之间不能共享资源。</p>\n</li>\n<li><p>此外，线程的上下文切换比进程的上下文切换更快，因为线程的上下文切换只需要保存和恢复少量的寄存器内容，而进程的上下文切换需要保存和恢复大量的内存内容。</p>\n</li>\n</ul>\n<h3 id=\"2-进程间通信方式\"><a href=\"#2-进程间通信方式\" class=\"headerlink\" title=\"2. 进程间通信方式\"></a>2. 进程间通信方式</h3><ul>\n<li>管道( pipe )</li>\n<li>有名管道 (named pipe)</li>\n<li>信号量( semophore )</li>\n<li>消息队列( message queue )</li>\n<li>信号 ( signal )</li>\n<li>套接字( socket )</li>\n</ul>\n<h3 id=\"3-线程间通信方式\"><a href=\"#3-线程间通信方式\" class=\"headerlink\" title=\"3. 线程间通信方式\"></a>3. 线程间通信方式</h3><ul>\n<li>事件(Event); </li>\n<li>信号量(semaphore); </li>\n<li>互斥量(mutex); </li>\n<li>临界区(Critical section)</li>\n</ul>\n<h3 id=\"4-什么时候用进程或线程\"><a href=\"#4-什么时候用进程或线程\" class=\"headerlink\" title=\"4. 什么时候用进程或线程\"></a>4. 什么时候用进程或线程</h3><ul>\n<li>在多任务系统中，进程和线程都可以用来实现并发执行。</li>\n<li>进程是一个独立的执行单元，它有自己的内存空间和资源，可以被操作系统调度执行。</li>\n<li>而线程是进程的一个执行单元，它可以共享进程的资源，但是比进程更小，更轻量，可以更快地被操作系统调度执行。</li>\n<li>一般来说，如果需要多任务处理，可以使用进程；如果需要多线程处理，可以使用线程。此外，进程和线程也可以用来实现并发IO，以提高系统的性能。</li>\n</ul>\n<h3 id=\"5-栈和堆的区别\"><a href=\"#5-栈和堆的区别\" class=\"headerlink\" title=\"5. 栈和堆的区别\"></a>5. 栈和堆的区别</h3><p>栈（stack）: </p>\n<ul>\n<li>它由编译器自动管理，无需我 们手工控制</li>\n<li>1M大小</li>\n<li>计算机会在底层对栈提供支持：分配专门的寄存器存放 栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。但程序员无法对其进行控制。</li>\n</ul>\n<p>堆（heap）: </p>\n<ul>\n<li>申请和释放由程序员控制</li>\n<li>32 位系统下，堆内存可以达到 4G 的空间</li>\n<li>由 new 或 malloc 分配的内存，一般速度比较慢，而且容易产生内 存碎片</li>\n</ul>\n<h3 id=\"6-C-和-C-的区别\"><a href=\"#6-C-和-C-的区别\" class=\"headerlink\" title=\"6. C++和 C 的区别\"></a>6. C++和 C 的区别</h3><p>C 是一个结构化语言，它的重点在于算法和数据结构。</p>\n<p>C++中引入了重 载、内联函数、异常处理等。C++更是拓展了面向对象设计的内容，如类、继承、虚函数、模板和包容器类 等。</p>\n<h3 id=\"7-产生死锁的必要条件\"><a href=\"#7-产生死锁的必要条件\" class=\"headerlink\" title=\"7. 产生死锁的必要条件\"></a>7. 产生死锁的必要条件</h3><ul>\n<li>互斥条件：一个进程对共享资源的排他性使用，即一个资源在一段时间内只能被一个进程使用</li>\n<li>请求与保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源已被其他进程占有</li>\n<li>不剥夺条件：进程已经获得的资源在未使用完之前，不能被其他进程强行剥夺，只有在资源使用完之后才能被释放</li>\n<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</li>\n</ul>\n<h3 id=\"8-预防死锁\"><a href=\"#8-预防死锁\" class=\"headerlink\" title=\"8. 预防死锁\"></a>8. 预防死锁</h3><ol>\n<li>避免死锁：可以通过研究系统资源分配图来避免死锁，即在分配资源之前先检查是否会发生死锁。</li>\n<li>预防死锁：可以通过设置资源分配次序来预防死锁，即按照一定的顺序分配资源，以避免出现死锁。</li>\n<li>检测死锁：可以通过定期检测系统中是否存在死锁来及时发现死锁，并采取相应的措施来解决。</li>\n<li>解除死锁：可以通过撤销进程或释放资源来解除死锁，以便让系统恢复正常运行。</li>\n</ol>\n<h3 id=\"9-TCP-和-UDP-的区别\"><a href=\"#9-TCP-和-UDP-的区别\" class=\"headerlink\" title=\"9. TCP 和 UDP 的区别\"></a>9. TCP 和 UDP 的区别</h3><p>TCP（传输控制协议）</p>\n<ul>\n<li>是一种面向连接的、可靠的、基于字节流的传输层通信协议。</li>\n<li>它主要用于在两台计算机之间传输数据，并且能够确保数据的正确传输。</li>\n<li>它可以提供可靠的、有序的、双向的数据流，以及可靠的数据传输服务。</li>\n<li>它是一种面向连接的协议，因此在传输数据之前，它需要建立一个连接。</li>\n<li>它使用三次握手确认连接，然后才能传输数据。它还提供了流量控制、拥塞控制和可靠性等功能。</li>\n</ul>\n<p>TCP三次握手：</p>\n<ol>\n<li>客户端发送一个SYN（synchronize）信号给服务器</li>\n<li>服务器收到后，回复一个SYN&#x2F;ACK（synchronize-acknowledge）信号</li>\n<li>客户端收到后，再回复一个ACK（acknowledge）信号，这样就完成了一次三次握手</li>\n</ol>\n<p>TCP四次挥手：</p>\n<ol>\n<li>客户端发送一个FIN（finish）信号给服务器</li>\n<li>服务器收到后，回复一个ACK（acknowledge）信号</li>\n<li>客户端收到后，再发送一个FIN</li>\n<li>服务器收到后，回复一个ACK，这样就完成了一次四次挥手</li>\n</ol>\n<p> UDP</p>\n<ul>\n<li>是一种无连接的传输层协议，它不需要建立连接就可以发送数据，可以提供非常快速的数据传输。</li>\n<li>它提供了不可靠的服务，因为它不能保证数据的完整性和可靠性，但是它可以提供高速的数据传输。</li>\n</ul>\n<h3 id=\"10-static-关键字\"><a href=\"#10-static-关键字\" class=\"headerlink\" title=\"10. static 关键字\"></a>10. static 关键字</h3><p>静态变量：</p>\n<ul>\n<li><p>是在程序的整个生命周期中只存在一份拷贝，它的值在程序的整个生命周期中保持不变。它可以被所有函数所访问，在程序结束时才被释放。</p>\n</li>\n<li><p>静态变量和函数是指在程序的整个生命周期内都存在的变量和函数。</p>\n</li>\n<li><p>静态变量和函数可以在程序的任何地方被调用，而不必担心它们被重新定义或重新声明。</p>\n</li>\n<li><p>静态变量和函数可以用来存储和访问全局变量，这些变量可以在程序的任何地方被访问。</p>\n</li>\n<li><p>此外，静态变量和函数可以用来提供程序的私有函数，这些函数只能在程序的特定位置被调用。</p>\n</li>\n</ul>\n<h3 id=\"11-const-关键字\"><a href=\"#11-const-关键字\" class=\"headerlink\" title=\"11. const 关键字\"></a>11. const 关键字</h3><ol>\n<li><code>const</code> 关键字用于声明常量，即只读变量，它的值一旦被赋值，就不能再改变。</li>\n<li><code>const</code> 关键字还可以用于修饰指针，以保证指针所指向的内容不被修改。</li>\n<li>在一个函数声明中，const 可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值</li>\n<li>对于类的成员函数，若指定其为 const 类型，则表明其是一个常函数，不能修改类的 成员变量</li>\n<li>对于类的成员函数，有时候必须指定其返回值为 const 类型，以使得其返回值不为“左值”</li>\n</ol>\n<h3 id=\"12-指针和引用的区别\"><a href=\"#12-指针和引用的区别\" class=\"headerlink\" title=\"12. 指针和引用的区别\"></a>12. 指针和引用的区别</h3><p>指针和引用都可以用来指向变量或者对象</p>\n<ol>\n<li>指针是一个变量，可以在程序中被赋值和改变，而引用是一个别名，它的值不能被改变。</li>\n<li>指针可以指向不同的对象，而引用只能指向它初始化时指定的对象。</li>\n<li>指针可以为空，而引用不能为空。</li>\n<li>指针可以在函数间传递，而引用不能。</li>\n</ol>\n<h3 id=\"13-哈希表\"><a href=\"#13-哈希表\" class=\"headerlink\" title=\"13. 哈希表\"></a>13. 哈希表</h3><p>哈希表（Hash Table）是一种数据结构，它将键映射到值，使得查找和插入操作的时间复杂度都是O(1)。它的基本思想是：通过计算一个关键字的哈希值，可以直接定位到相关联的值，从而提高查找效率。</p>\n<h3 id=\"14-哈希表处理冲突\"><a href=\"#14-哈希表处理冲突\" class=\"headerlink\" title=\"14. 哈希表处理冲突\"></a>14. 哈希表处理冲突</h3><p>链地址法：是指把所有的冲突关键字存储在一个线性链表中，这个链表由其散列地址唯一标识</p>\n<p>开放定址法：指可存放新表项的空闲地址，既向它的同义词表项开放，又向它的非同义词表项开放</p>\n<p>再散列法：利用另一个哈希函数再次计算一个地址。直到冲突不再发生</p>\n<p>建立一个公共溢出区：一旦由哈希函数得到的地址冲突，就都填入溢出表</p>\n<h3 id=\"15-面向对象的三大特性和五个原则\"><a href=\"#15-面向对象的三大特性和五个原则\" class=\"headerlink\" title=\"15. 面向对象的三大特性和五个原则\"></a>15. 面向对象的三大特性和五个原则</h3><p>C++面向对象的三大特性：</p>\n<ul>\n<li><strong>封装</strong>、<strong>继承</strong>和<strong>多态</strong>。这三个特性共同构成了面向对象编程的基础。</li>\n</ul>\n<p>C++面向对象的五个原则是：</p>\n<ul>\n<li><strong>单一职责原则</strong>：每个类只负责一项职责</li>\n<li><strong>开放封闭原则</strong>：软件实体应该可以扩展，但不可修改</li>\n<li><strong>里氏替换原则</strong>：子类可以替换父类</li>\n<li><strong>依赖倒置原则</strong>：程序依赖抽象而不是具体实现</li>\n<li><strong>接口隔离原则</strong>：接口应该尽量小，只包含客户端需要的方法</li>\n</ul>\n<p>C++多态基于虚函数和虚继承实现：</p>\n<ul>\n<li>用一个更通用的基类指针指向 不同的子类实例</li>\n<li>为了能调用正确的方法，我们需要用到虚函数和虚继承。</li>\n<li>在内存中，通过虚函数表来实 现子类方法的正确调用；</li>\n<li>通过虚基类指针，仅保留一份基类的内存结构，避免冲突。</li>\n</ul>\n<h3 id=\"16-深拷贝和浅拷贝\"><a href=\"#16-深拷贝和浅拷贝\" class=\"headerlink\" title=\"16. 深拷贝和浅拷贝\"></a>16. 深拷贝和浅拷贝</h3><ul>\n<li><p>浅拷贝只是对指针的拷贝，拷贝后两个指针指向同一个内存空间</p>\n</li>\n<li><p>深拷贝不但对指针进行拷贝， 而且对指针指向的内容进行拷贝，经深拷贝后的指针是指向两个不同地址的指针。</p>\n</li>\n</ul>\n<h3 id=\"17-vector-的实现原理\"><a href=\"#17-vector-的实现原理\" class=\"headerlink\" title=\"17. vector 的实现原理\"></a>17. vector 的实现原理</h3><ul>\n<li><code>vector</code>的实现原理是基于动态数组的，它可以自动调整大小，以适应不断变化的数据量。</li>\n<li>它使用一个连续的内存空间来存储元素，并且可以在不重新分配内存的情况下添加或删除元素。</li>\n<li>它的实现原理是：<ul>\n<li>当添加元素时，<code>vector</code>会检查它的容量，如果容量不足，它会自动重新分配内存，以容纳新元素；</li>\n<li>当删除元素时，<code>vector</code>会自动调整它的容量，以释放多余的内存空间。</li>\n</ul>\n</li>\n</ul>\n<p>​\t</p>\n<h3 id=\"18-C-源代码到可执行代码的详细过程\"><a href=\"#18-C-源代码到可执行代码的详细过程\" class=\"headerlink\" title=\"18. C++ 源代码到可执行代码的详细过程\"></a>18. C++ 源代码到可执行代码的详细过程</h3><p>编译：将高级语言指令转换为功能等效 的汇编代码，再由汇编程序转换为机器语言，并且按照操作系统对可执行文件格式的要求链接生成可执行 程序</p>\n<p>源代码－－&gt;预处理－－&gt;编译－－&gt;优化－－&gt;汇编－－&gt;链接–&gt;可执行文件</p>\n<ol>\n<li>预处理：将源代码中的宏定义和条件编译指令处理成可供编译器处理的形式，使用预处理器（如cpp）将源代码中的宏定义和条件编译指令处理成可供编译器处理的形式。</li>\n<li>编译：将预处理后的源代码编译成汇编代码，使用编译器（如GCC）将源代码编译为汇编代码，汇编代码是机器可以识别的代码。</li>\n<li>优化：对汇编代码进行优化，使用优化器（如GCC）对汇编代码进行优化，以提高程序的执行效率。</li>\n<li>汇编：将优化后的汇编代码翻译成机器代码，使用汇编器（如GAS）将汇编代码翻译成机器代码，机器代码是机器可以直接执行的代码。</li>\n<li>链接：将多个机器代码文件链接成可执行文件，使用链接器（如LD）将多个机器代码文件链接成可执行文件，可执行文件是机器可以直接运行的文件。</li>\n</ol>\n<h3 id=\"19-虚函数和纯虚函数的区别\"><a href=\"#19-虚函数和纯虚函数的区别\" class=\"headerlink\" title=\"19. 虚函数和纯虚函数的区别\"></a>19. 虚函数和纯虚函数的区别</h3><p>虚函数：</p>\n<ul>\n<li><p>虚函数为了重载和多态的需要，在基类中定义的，即便定义为空；纯虚函数是在基类中声明 的虚函数，它可以再基类中有定义，且派生类必须定义自己的实现方法</p>\n</li>\n<li><p>一旦父类的成员函数声明 virtual，其子类的函数不管有没有声明为 virtual，都是虚函数</p>\n</li>\n<li><p>基类定义虚函数（可以实现，也可以不实现）</p>\n</li>\n<li><p>子类（可以重载和不重载）</p>\n</li>\n</ul>\n<p>纯虚函数：</p>\n<ul>\n<li>是基类只定义了函数体，没有实现过程（类似接口）</li>\n<li>纯虚必须在子类去实现</li>\n</ul>\n<p>普通函数如果不被使用，可以只有声明没有定义，虚函数必须要有定义，即使是一个空实现,因为编译 器无法确定会使用哪个函数</p>\n<h3 id=\"20-overload-override-overwrite-的区别\"><a href=\"#20-overload-override-overwrite-的区别\" class=\"headerlink\" title=\"20. overload,override,overwrite 的区别\"></a>20. overload,override,overwrite 的区别</h3><p><strong>Overload(重载)：</strong>在 C++程序中，可以将语义、功能相似的几个函数用同一个名字表示，但参数或返回值不同（包括类型、顺序不同），即函数重载</p>\n<ul>\n<li>（1）相同的范围（在同一个类中）； </li>\n<li>（2）函数名字相同；</li>\n<li>（3）参数不同； </li>\n<li>（4）virtual 关键字可有可无。</li>\n</ul>\n<p><strong>Override(覆盖)：</strong>是指派生类函数覆盖基类函数，特征是： </p>\n<ul>\n<li>（1）不同的范围（分别位于派生类与基类）； </li>\n<li>（2）函数名字相同； </li>\n<li>（3）参数相同； </li>\n<li>（4）基类函数必须有 virtual 关键字</li>\n</ul>\n<p><strong>Overwrite(重写)：</strong>是指派生类的函数屏蔽了与其同名的基类函数，规则如下： </p>\n<ul>\n<li>（1）如果派生类的函数与基类的函数同名，但是参数不同。此时，不论有无 virtual 关键字， 基类的函数将被隐藏。 </li>\n<li>（2）如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有 virtual 关 键字。此时，基类的函数被隐藏。</li>\n</ul>\n<h3 id=\"21-强制类型转换\"><a href=\"#21-强制类型转换\" class=\"headerlink\" title=\"21. 强制类型转换\"></a>21. 强制类型转换</h3><ol>\n<li><code>static_cast</code>：用于基本类型之间的转换，可以安全地执行数据类型转换。<ul>\n<li>a、用于类层次结构中基类和派生类之间指针或引用的转换 上行转换（派生类—-&gt;基类）是安全的； 下行转换（基类—-&gt;派生类）由于没有动态类型检查，所以是不安全的。 </li>\n<li>b、用于基本数据类型之间的转换，如把 int 转换为 char，这种带来安全性问题由程序员来保证 </li>\n<li>c、把空指针转换成目标类型的空指针 </li>\n<li>d、把任何类型的表达式转为 void 类型</li>\n</ul>\n</li>\n<li><code>const_cast</code>：用于去除常量属性，可以把常量转换成非常量。</li>\n<li><code>reinterpret_cast</code>：用于指针和引用之间的转换，可以把指针和引用转换成其他指针和引用类型。</li>\n<li><code>dynamic_cast</code>：用于多态类型之间的转换，可以把多态类型转换成其他多态类型。</li>\n</ol>\n<h3 id=\"22-malloc-free，new-delete\"><a href=\"#22-malloc-free，new-delete\" class=\"headerlink\" title=\"22. malloc&#x2F;free，new&#x2F;delete\"></a>22. malloc&#x2F;free，new&#x2F;delete</h3><ul>\n<li><code>malloc</code>&#x2F;<code>free</code>是C语言中的内存分配函数，它们只能用于分配和释放内存，不能调用构造函数和析构函数，因此不能用于管理类对象</li>\n<li><code>new</code>&#x2F;<code>delete</code>是C++语言中的内存分配函数，它们不仅可以用于分配和释放内存，还可以调用构造函数和析构函数，因此可以用于管理类对象。</li>\n</ul>\n<p>对于非内部数据类型的对象而言，对象的消亡之前要自动执行析构函数。由于 malloc&#x2F;free 是库函数 而不是运算符，不在编译器控制权限之内，不能把执行构造函数和析构函数的任务强加于 malloc&#x2F;free，因 此只有使用 new&#x2F;delete 运算符</p>\n<h3 id=\"23-c-11-特性\"><a href=\"#23-c-11-特性\" class=\"headerlink\" title=\"23.  c++11 特性\"></a>23.  c++11 特性</h3><p><strong>nullptr</strong></p>\n<ul>\n<li>传统 C++ 会把 NULL、0 视为同一种东西，这取决于编译器如何定义 NULL，有些 编译器会将 NULL 定义为 ((void*)0)，有些则会直接将其定义为 0</li>\n<li>C++ 不允许直接将 <code>void *</code> 隐式转换到其他类型，但如果 NULL 被定义为<code> ((void*)0)</code>，那么当编译<code>char *ch = NULL</code>;时，NULL 只好被定义为 0，而这依然会产生问题，将导致了 C++ 中重载特性会发生混乱<ul>\n<li><code>void foo(char *)</code></li>\n<li><code>void foo(int)</code></li>\n</ul>\n</li>\n<li>NULL 又被定义为了 0 那么 <code>foo(NULL)</code>; 这个语句将会去调用 <code>foo(int)</code>， 从而导致代码违反直观</li>\n<li>nullptr 的类型为 <code>nullptr_t</code>，能够隐式的转换为任何指针或成员指针的类型，也能和他们进行相等 或者不等的比较</li>\n</ul>\n<p><strong>ChatGPT:</strong></p>\n<ul>\n<li><code>nullptr</code> 和 <code>NULL</code> 是C++中的两个特殊值，它们都表示空指针，但是它们之间有一些重要的区别：<ol>\n<li><code>nullptr</code> 是一个特殊的指针类型，它可以被用来表示任何类型的指针，而 <code>NULL</code> 只能表示原始指针类型。</li>\n<li><code>nullptr</code> 是一个新的C++11特性，而 <code>NULL</code> 是C++98中的一个宏定义，它可以被用来表示空指针。</li>\n<li><code>nullptr</code> 可以被用来调用重载函数，而 <code>NULL</code> 不能。</li>\n<li><code>nullptr</code> 可以被用来初始化指针，而 <code>NULL</code> 不能。</li>\n</ol>\n</li>\n</ul>\n<p><strong>auto</strong></p>\n<ul>\n<li><code>auto</code> 是C++11中的一个关键字，它可以被用来自动推断变量的类型，从而简化程序的书写。它的主要用途有：<ol>\n<li>简化变量的声明：使用<code>auto</code>可以更简单地声明变量，而不必指定变量的类型，从而简化程序的书写。</li>\n<li>提高代码的可读性：使用<code>auto</code>可以更有效地表达变量的意图，从而提高代码的可读性。</li>\n<li>更有效地使用模板：使用<code>auto</code>可以更有效地使用模板，从而提高代码的可读性和可维护性。</li>\n</ol>\n</li>\n</ul>\n<p>C++11 还引入了一个叫做拖尾返回类型（trailing return type），利用 auto 关键字将返回类型后置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T x, U y)</span> -&gt; <span class=\"title\">decltype</span><span class=\"params\">(x+y)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C++14 开始是可以直接让普通函数具备返回值推导，因此下面的写法变得合法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T x, U y)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>区间迭代</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &amp; 启用了引用</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : arr) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>&amp;i</code>可以更有效地处理数组中的每一个元素，因为它可以直接引用数组中的元素，而不必创建新的变量来存储数组中的元素，从而提高程序的性能</li>\n<li>使用<code>const auto &amp;i</code>可以保证数组中的每一个元素在循环中不会被修改，从而提高程序的可读性和可维护性。但是，使用<code>const auto &amp;i</code>会使程序的性能略有下降，因为它会多消耗一些内存。</li>\n<li>因为它会多消耗一些内存，因为它会创建一个新的变量来存储数组中的元素，而不是直接引用数组中的元素，从而消耗更多的内存。</li>\n</ul>\n<p><strong>模板增强</strong></p>\n<p>**外部模板 **</p>\n<ul>\n<li><p>传统 C++ 中，模板只有在使用时才会被编译器实例化，只要在每个编译单元（文件）中编译的代码中遇到了被完整定义的模板，都会实例化。这就产生了重复实例化而导致的编译时 间的增加。<code>没有办法通知编译器不要触发模板实例化</code></p>\n</li>\n<li><p>C++11 引入了外部模板，扩充了原来的强制编译器在特定位置实例化模板的语法，使得能 够显式的告诉编译器何时进行模板的实例化：</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class</span> <span class=\"title class_\">std</span>::vector; <span class=\"comment\">// 强行实例化 </span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">template</span> <span class=\"keyword\">class</span> <span class=\"title class_\">std</span>::vector; <span class=\"comment\">// 不在该编译文件中实例化模板</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>类型别名模板</strong></p>\n<ul>\n<li><p>在传统 C++中，typedef 可以为类型定义一个新的名称，但是却没有办法为模板定义一个新的名称。 因为，模板不是类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt; <span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> SuckType&lt;std::vector&lt;<span class=\"type\">int</span>&gt;, U, <span class=\"number\">1</span>&gt; NewType; <span class=\"comment\">// 不合法</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>C++11 使用 using 引入了下面这种形式的写法，并且同时支持对传统 typedef 相同的功效： </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>  <span class=\"keyword\">using</span> NewType = SuckType; <span class=\"comment\">// 合法</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>默认模板参数</strong></p>\n<ul>\n<li><p>C++11 中提供了一种便利，可以指定模板的默认参数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T </span>= <span class=\"type\">int</span>, <span class=\"keyword\">typename</span> U = <span class=\"type\">int</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> <span class=\"built_in\">add</span>(T x, U y) -&gt; <span class=\"keyword\">decltype</span>(x+y) <span class=\"comment\">// C++ 11中， C++14 直接写成：auto add(T x, U y)即可</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>构造函数</strong></p>\n<p><strong>委托构造</strong></p>\n<ul>\n<li><p>C++11 引入了委托构造的概念，这使得构造函数可以在同一个类中一个构造函数调用另一个构造函数， 从而达到简化代码的目的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> value1;</span><br><span class=\"line\">\t<span class=\"type\">int</span> value2;</span><br><span class=\"line\">\t<span class=\"built_in\">Base</span>() </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvalue1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Base</span>(<span class=\"type\">int</span> value) : <span class=\"built_in\">Base</span>() </span><br><span class=\"line\">\t&#123; <span class=\"comment\">// 委托 Base() 构造函数</span></span><br><span class=\"line\">\t\tvalue2 = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>继承构造</strong></p>\n<ul>\n<li><p>派生类想要使用基类的构造函数，需要在构造函数中显式声明</p>\n</li>\n<li><p>C++11中：如果一个继承构造函数不被相关的代码使用，编译器不会为之产生真正的函数代码，这样比透传基类 各种构造函数更加节省目标代码空间</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C++<span class=\"number\">11</span> 的继承构造：</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \t<span class=\"built_in\">A</span>(<span class=\"type\">int</span> i) &#123;&#125;</span><br><span class=\"line\"> \t<span class=\"built_in\">A</span>(<span class=\"type\">double</span> d,<span class=\"type\">int</span> i)&#123;&#125;</span><br><span class=\"line\"> \t<span class=\"built_in\">A</span>(<span class=\"type\">float</span> f,<span class=\"type\">int</span> i,<span class=\"type\">const</span> <span class=\"type\">char</span>* c)&#123;&#125;</span><br><span class=\"line\"> \t<span class=\"comment\">//...等等系列的构造函数版本</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span>:A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">using</span> A::A;</span><br><span class=\"line\"> \t<span class=\"comment\">//关于基类各构造函数的继承一句话搞定</span></span><br><span class=\"line\"> \t<span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>Lambda 表达式</strong></p>\n<ul>\n<li><p>实际上就是提供了一个类似匿名函数的特性，而匿名函数则是在需要一 个函数，但是又不想费力去命名一个函数的情况下去使用的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ caputrue ] ( parameters ) options -&gt; returnType</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    body; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>capture 是可选的，用于捕获外部变量；</p>\n</li>\n<li><p>parameters 是可选的，用于接收参数；</p>\n</li>\n<li><p>returnType 是可选的，用于指定返回值类型；</p>\n</li>\n<li><p>body 是必需的，用于定义 lambda 表达式的函数体。</p>\n</li>\n<li><p>options 是函数选项；可以填 mutable,exception,attribute（选填） :</p>\n<ul>\n<li>mutable 说明 lambda 表达式体内的代码可以修改被捕获的变量，并且可以访问被捕获的对象的 non-const 方法。</li>\n<li>exception 说明 lambda 表达式是否抛出异常以及何种异常。</li>\n<li>attribute 用来声明属性。</li>\n</ul>\n</li>\n</ul>\n<p><strong>捕获列表</strong></p>\n<ul>\n<li><p>lambda 表达式的捕获列表精细控制了 lambda 表达式能够访问的外部变量，以 及如何访问这些变量</p>\n<ul>\n<li><code>[]</code>不捕获任何变量</li>\n<li>捕获外部变量：可以使用 <code>&amp;</code> 或 <code>=</code> 来捕获外部变量。(按值捕获)且被捕获的变量在 lambda 表达式被创建时拷贝，而非调用时才拷 贝</li>\n<li>捕获 this 指针：可以使用 <code>this</code> 来捕获 this 指针。捕获 this 的目的是可以在 lamda 中使 用当前类的成员函数和成员变量</li>\n<li>捕获外部类成员：可以使用 <code>&amp;</code> 来捕获外部类成员。</li>\n<li><code>[=,&amp;foo]</code>按值捕获外部作用域中所有变量，并按引用捕获 foo 变量。</li>\n<li><code>[bar]</code>按值捕获 bar 变量，同时不捕获其他变量。</li>\n</ul>\n</li>\n<li><p>如果希望去修改按值捕获的外部变量，需 要显示指明 lambda 表达式为 mutable。被 mutable 修饰的 lambda 表达式就算没有参数也要写 明参数列表</p>\n</li>\n<li><p>捕获列表捕获住 的任何外部变量，最终会变为闭包类型的成员变量，按照 C++标准，lambda 表达式的operator() 默认是 const 的，而 mutable 的作用，就在 于取消 operator()的 const</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> f1 = [=] &#123; <span class=\"keyword\">return</span> a++; &#125;; <span class=\"comment\">//error</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f2 = [=] () <span class=\"keyword\">mutable</span> &#123; <span class=\"keyword\">return</span> a++; &#125;; <span class=\"comment\">//OK</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Lambda原理：</p>\n<ul>\n<li>定义一个 lambda 表达式后，编译器会自动生成一个匿 名类（这个类重载了()运算符），我们称为闭包类型</li>\n<li>运行时，这个 lambda 表达式就会返回一个匿名的闭包实例，是一个右值</li>\n<li>对于复制传值捕捉方式，类中会相应添加对应类型的非静态数据成 员。在运行时，会用复制的值初始化这些成员变量，从而生成闭包</li>\n<li>引用捕获方式，无论 是否标记 mutable，都可以在 lambda 表达式中修改捕获的值</li>\n</ul>\n</li>\n<li><p>lambda 表达式是不能被赋值的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> a = [] &#123; cout &lt;&lt; <span class=\"string\">&quot;A&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> b = [] &#123; cout &lt;&lt; <span class=\"string\">&quot;B&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class=\"line\">a = b; <span class=\"comment\">// 非法，lambda 无法赋值</span></span><br><span class=\"line\">zauto c = a; <span class=\"comment\">// 合法，生成一个副本</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>闭包类型禁用了赋值操作符，但是没有禁用复制构造函数，所以你仍然可以用一个 lambda 表达式去初 始化另外一个 lambda 表达式而产生副本</p>\n</li>\n<li><p>悬挂引用：引用捕获不会 延长引用的变量的生命周期</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::function&lt;<span class=\"title\">int</span><span class=\"params\">(<span class=\"type\">int</span>)</span>&gt; <span class=\"title\">add_x</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> [&amp;](<span class=\"type\">int</span> a) &#123; <span class=\"keyword\">return</span> x + a; &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 参数 x 仅是一个临时变量，函数 add_x 调用后就被销毁了，但是返回的 lambda 表达式却引用了该变量，当调用这个表达式时，引用的是一个垃圾值，会产生没有意义的结果</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Lambda函数指针：</p>\n<ul>\n<li><p>STL 定义在&lt; functional &gt;头文件提供了一个多态的函数对象封装 std::function，其类似于函数指针。它可以绑定任何 类函数对象，只要参数与返回类型相同</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::function&lt;<span class=\"type\">bool</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; wrapper = [](<span class=\"type\">int</span> x, <span class=\"type\">int</span> y) &#123; <span class=\"keyword\">return</span> x &lt; y; &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重要应用：作为参数传递，实现函数回调</p>\n</li>\n<li><p>最常用的是在 STL 算法中：<code>count_if()</code>，<code>generate()</code>，<code>for_each()</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>新增容器</strong></p>\n<p><strong>std::array</strong></p>\n<ul>\n<li><p>保存在栈内存中，相比堆内存中的 std::vector，我们能够灵活的访问这里面的元素，从 而获得更高的性能</p>\n</li>\n<li><p>在编译时创建一个固定大小的数组，std::array 不能够被隐式的转换成指针，使用 std::array 只需指定其类型和大小即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::array&lt;<span class=\"type\">int</span>, 4&gt; arr= &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> len = <span class=\"number\">4</span>;</span><br><span class=\"line\">std::array&lt;<span class=\"type\">int</span>, len&gt; arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;; <span class=\"comment\">// 非法, 数组大小参数必须是常量表达式</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>std::forward_list</strong></p>\n<ul>\n<li><code>std::list</code>是双向链表</li>\n<li><code>std::forward_list</code>是单向链表</li>\n<li>提供了 O(1) 复杂度 的元素插入，不支持快速随机访问（这也是链表的特点），也是标准库容器中唯一一个不提供 size() 方法 的容器</li>\n<li>不需要双向迭代时，具有比 std::list 更高的空间利用率</li>\n</ul>\n<p><strong>无序容器</strong></p>\n<p>包括 <code>unordered_set</code>、<code>unordered_map</code>、<code>unordered_multiset</code> 和 <code>unordered_multimap</code></p>\n<p>特点：</p>\n<ul>\n<li>它们使用哈希函数来存储元素，而不是使用比较函数。</li>\n<li>它们提供了更快的查找性能，因为它们可以在常数时间内查找元素。</li>\n<li>它们支持更快的插入和删除操作，因为它们不需要移动元素来维护有序性。</li>\n</ul>\n<p><strong>元组 std::tuple</strong></p>\n<p>三个核心的函数：</p>\n<ul>\n<li><code>std::make_tuple</code>: 构造元组 </li>\n<li><code>std::get</code>: 获得元组某个位置的值 </li>\n<li><code>std::tie</code>: 元组拆包</li>\n</ul>\n<p>合并两个元组，可以通过 <code>std::tuple_cat</code>:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> new_tuple = std::<span class=\"built_in\">tuple_cat</span>(<span class=\"built_in\">get_student</span>(<span class=\"number\">1</span>), std::<span class=\"built_in\">move</span>(t));</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>语言级线程支持</strong></p>\n<p>代码编译需要使用 -pthread 选项</p>\n<ul>\n<li><code>std::thread</code> 类，用于创建和控制线程。</li>\n<li><code>std::mutex</code> 类，用于控制线程之间的互斥访问。</li>\n<li><code>std::condition_variable</code> 类，用于实现线程间的同步。</li>\n<li><code>std::future</code> 类，用于获取异步操作的结果。</li>\n<li><code>std::atomic</code> 类，用于实现原子操作。</li>\n</ul>\n<p>线程同步：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;condition_variable&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">std::mutex m;</span><br><span class=\"line\">std::condition_variable cv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread_func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">    cv.<span class=\"built_in\">wait</span>(lock);</span><br><span class=\"line\">    <span class=\"comment\">// Do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::thread <span class=\"title\">t</span><span class=\"params\">(thread_func)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// Do something</span></span><br><span class=\"line\">    cv.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">    t.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>右值引用和 move 语义</strong></p>\n<p><strong>右值引用</strong></p>\n<p>通过重载直接使用右值参数。 我们所要做的就是写一个以右值引用为参数的构造函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>(string&amp;&amp; that) <span class=\"comment\">// string&amp;&amp; is an rvalue reference to a string</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdata = that.data;</span><br><span class=\"line\">\tthat.data = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>没有深度拷贝堆内存的数据，而是复制了指针，并把源对象的指针置空</p>\n<p>由于源对象是一个右值，不会再被使用，因此 客户并不会觉察到源对象被改变了<code>转移构造函数</code></p>\n<p>类别：</p>\n<ul>\n<li><code>var&amp;</code>：左值引用</li>\n<li><code>var&amp;&amp;</code>：右值引用</li>\n</ul>\n<p>示例：</p>\n<ul>\n<li><p>C++ 11 中，<code>std::auto_ptr&lt; T &gt;</code>已经被 <code>std::unique_ptr&lt; T &gt;</code>所取代，后者就是利用的右值引用</p>\n</li>\n<li><p>其转移构造函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unique_ptr</span>(unique_ptr&amp;&amp; source) <span class=\"comment\">// note the rvalue reference</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \tptr = source.ptr;</span><br><span class=\"line\"> \tsource.ptr = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">unique_ptr&lt;Shape&gt; <span class=\"title\">a</span><span class=\"params\">(<span class=\"keyword\">new</span> Triangle)</span></span>;</span><br><span class=\"line\"><span class=\"function\">unique_ptr&lt;Shape&gt; <span class=\"title\">b</span><span class=\"params\">(a)</span></span>; <span class=\"comment\">// error</span></span><br><span class=\"line\"><span class=\"function\">unique_ptr&lt;Shape&gt; <span class=\"title\">c</span><span class=\"params\">(make_triangle())</span></span>; <span class=\"comment\">// okay</span></span><br></pre></td></tr></table></figure>\n\n<p>第二行不能编译通过，因为 a 是左值，但是参数 unique_ptr&amp;&amp; source 只能接受右值，这正是我们所 需要的，杜绝危险的隐式转移</p>\n</li>\n</ul>\n<p><strong>转移左值</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">unique_ptr&lt;Shape&gt; <span class=\"title\">a</span><span class=\"params\">(<span class=\"keyword\">new</span> Triangle)</span></span>;</span><br><span class=\"line\"><span class=\"function\">unique_ptr&lt;Shape&gt; <span class=\"title\">b</span><span class=\"params\">(a)</span></span>; <span class=\"comment\">// still an error</span></span><br><span class=\"line\"><span class=\"function\">unique_ptr&lt;Shape&gt; <span class=\"title\">c</span><span class=\"params\">(std::move(a))</span></span>; <span class=\"comment\">// okay</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>std::move 仅仅是简单地将左值转换为 右值，它本身并没有转移任何东西。它仅仅是让对象可以转移</li>\n<li>注意：第三行之后，a 不再拥有 Triangle 对象。不过这没有关系，因为通过明确的写 出 std::move(a)，我们很清楚我们的意图</li>\n</ul>\n<h3 id=\"24-STL-resize与reserve\"><a href=\"#24-STL-resize与reserve\" class=\"headerlink\" title=\"24. STL resize与reserve\"></a>24. STL resize与reserve</h3><p><code>resize()</code> 和 <code>reserve()</code> 都是用于管理容器大小的函数，但它们的作用不同</p>\n<ul>\n<li><code>resize()</code> <ul>\n<li>用于更改容器的大小，并且创建对象，因此，调用这个函数之后，就可以引用容器 内的对象了</li>\n<li>resize 函数可以有两个参数，第一个参数是容器新的大小，第二个参数是要加入容器 中的新元素，如果这个参数被省略，那么就调用元素对象的默认构造函数</li>\n</ul>\n</li>\n<li><code>reserve()</code> <ul>\n<li>用于预留容器的存储空间间，但并不真正创建元素对象，在创建对象之前，不能引用容器内 的元素</li>\n<li>reserve 函数之后一个参数，即需要预留的容器的空间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"25-vector与deque\"><a href=\"#25-vector与deque\" class=\"headerlink\" title=\"25. vector与deque\"></a>25. vector与deque</h3><p><strong>vector</strong></p>\n<p>vector是动态容器，随着内容的添加，容器大小会在内部自行扩容，相较于array，array是静态空间，扩容的需要自行扩容</p>\n<p><code>vector 的数据结构</code>：</p>\n<ul>\n<li>线性线性空间。它以两个迭代器 start 和 finish 分别指向配置得 来的连续空间中目前已经被使用的范围，并以迭代器 end_of_storage 指向整块连续空间的尾端</li>\n</ul>\n<p><code>vector 的构造与内存管理</code>：</p>\n<ul>\n<li>插入元素时，如果空间不够，会另开辟一块更大的空间，让容器迭代器指向新的空间</li>\n</ul>\n<p><strong>deque</strong></p>\n<p>deque 是一种双向开口的连续线性空间（<code>双端队列</code>）。所谓双向开口，意思是可以在头尾两端分别做元素的插入和删 除操作</p>\n<p><code>deque 的中控器</code>：</p>\n<ul>\n<li>deque是由一段一段的定量连续空间构成，一旦有必要在 deque 的前端或尾端增加新空间，便配置一段 定量连续空间，串接在整个 deque 的头端或尾端</li>\n<li>deque便是在这些分段的定量连续空间上， 维护其整体连续的假象，并提供随机存取的接口，避开了“重新配置、复制、释放”的轮回，代价则是复 杂的迭代器架构</li>\n<li>deque 采用一块所谓的 map(注意,不是 STL 的 map 容器)作为主控。这里所谓 map 是一小块连续空间 ， 其中每个元素(此处称为一个节点, node)都是指针，指向另一段(较大的) 连续线性空间，称为缓冲区。缓 冲区才是 deque 的存储空间主体</li>\n</ul>\n<p><code>deque 的构造与内存管理</code>：</p>\n<ul>\n<li>果申请的 map 空间不够时，也需要重新配置更大的空间，将原来 map 里的指针拷贝过来，最后释放 原来的空间</li>\n</ul>\n<p><code>vector 和 deque 的区别</code>：</p>\n<ul>\n<li>vector 是单向开口的连续线性空间， dequeu 是一种双向开口的连续线性定</li>\n<li>deque 允许于常数时间内对起头端进行元素的插入或移除操作</li>\n<li>deque 没有所谓容量(capacity)观念，因为它是动态地以分段连续空间组合而成，随时可以增加一段新 的空间并链接起来</li>\n</ul>\n<h3 id=\"26-大端小端\"><a href=\"#26-大端小端\" class=\"headerlink\" title=\"26. 大端小端\"></a>26. 大端小端</h3><p>示例：</p>\n<ul>\n<li>值：123456</li>\n<li>地址：从右往左（默认） 或 从下往上（地址由小增大）</li>\n</ul>\n<p>大端：654321</p>\n<p>小端：123456</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">checkCPU</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">union</span> <span class=\"title class_\">w</span></span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\"> \t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\"> \t\t<span class=\"type\">char</span> b;</span><br><span class=\"line\"> \t&#125;c;</span><br><span class=\"line\"> \tc.a = <span class=\"number\">1</span>;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> (c.b == <span class=\"number\">1</span>);<span class=\"comment\">//小端返回 1，大端返回 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"27-malloc-原理\"><a href=\"#27-malloc-原理\" class=\"headerlink\" title=\"27. malloc 原理\"></a>27. malloc 原理</h3><p>堆的介绍：</p>\n<ul>\n<li>堆块由一个字的头部、有效载荷、填充以及一个字的脚部组成，空闲块是通过头部中的大小 字段隐含地连接在一起形成一个隐式空闲链表，分配器可以通过遍历堆中所有的块，从而间接遍历整个空 闲块的集合</li>\n</ul>\n<p>malloc()步骤：</p>\n<ul>\n<li><code>放置</code>、<code>分割</code>、<code>合并</code></li>\n</ul>\n<p><strong>放置</strong></p>\n<p>用请求一个 k 字节的块时，分配器搜索空闲链表，查找一个足够大可以放置所请求块的空闲 块，分配器执行这种搜索的方式是放置策略确定的</p>\n<p>常见的策略：</p>\n<ul>\n<li>首次适配：从头开始搜索空闲链表，选择第一个适合的空闲块。 </li>\n<li>下一次适配：从上一次查询结束的地方开始搜索空闲链表，选择第一个适合的空闲块。 </li>\n<li>最佳适配：检查每个空闲块，选择适合所需请求大小的最小空闲块。</li>\n</ul>\n<p><strong>分割</strong></p>\n<p>一旦分配器找到一个匹配的空闲块，它就必须做另一个策略决定，那就是分配这个空块中多少空间。 一个选择是用整个空闲块，另一个选择是将这个空闲块分割成两部分</p>\n<p>果分配器不能为请求块找到合适的空闲块将发生什么：</p>\n<ul>\n<li>选择是通过合并那些在内存中物理上相邻 的空闲块来创建一些更大的空闲块</li>\n<li>还是不能生成一个足够大的块，或者如果空闲块已经 最大程度地合并了，那么分配器就会通过调用 sbrk 函数，向内核请求额外的堆内存，分配器将额外的内存 转化成一个大的空闲块，将这个块插入到空闲链表中，然后将被请求的块放置在这个新的空闲块中</li>\n</ul>\n<p><strong>合并</strong></p>\n<p>边界标记：允许在常数时间内进行对前面的块合并</p>\n<ul>\n<li>每个块的结尾处添加一个脚部，其中脚部就是头部的一个副本</li>\n<li>如果每个块包括这样一个脚部， 那么分配器就可以通过检查它的脚部，判断前面一个块的起始位置和状态</li>\n<li>这个脚部总是在当前块开始位 置一个字的距离</li>\n</ul>\n<h3 id=\"28-构造、析构函数的虚函数\"><a href=\"#28-构造、析构函数的虚函数\" class=\"headerlink\" title=\"28. 构造、析构函数的虚函数\"></a>28. 构造、析构函数的虚函数</h3><p>构造函数不能声明为虚函数：</p>\n<ul>\n<li>构造一个对象，必须知道对象的类型</li>\n<li>当对象还没有构造完成时，编译器无法确定对象是类本身，还是派生类</li>\n<li>虚函数的执行依赖于虚函数表，虚函数表在构造函数中完成，如果构造函数声明为虚函数，调用构造函数时，虚函数表没有初始化，构造将无法进行</li>\n</ul>\n<p>析构函数可以：</p>\n<ul>\n<li>调用析构函数时，对象已经确定，虚函数表也已经存在，可以正常使用</li>\n<li>在类的继承中，基类指针指向子类对象，基类delete，析构函数如果不是虚函数，子类对象不会执行析构函数</li>\n<li>析构时，先从最下面的子类开始逐层向父类析构</li>\n</ul>\n<h3 id=\"29-STL-unordered-map-和-map\"><a href=\"#29-STL-unordered-map-和-map\" class=\"headerlink\" title=\"29. STL unordered_map 和 map\"></a>29. STL unordered_map 和 map</h3><p>unordered_map：</p>\n<ul>\n<li>键值对形式</li>\n<li>hashMap</li>\n<li>无序存储</li>\n<li>不存重复的键</li>\n</ul>\n<p><strong>hash_map 与 unordered_map</strong></p>\n<ul>\n<li><p>unordered_map 在 C++11 的时候被引入标准库</p>\n</li>\n<li><p>查询平均时间是 O(1)，unordered，就是无序了，数据是按散列函数 插入到槽里面去的，数据之间无顺序可言</p>\n</li>\n<li><p>有些时候我只要访问而不需要顺序，因此可以选择哈希表</p>\n</li>\n</ul>\n<p><strong>unordered_map 与 map</strong></p>\n<ul>\n<li>map 的内部结构是 R-B-tree 来实现的，所以保证了一个稳定的动态操作时间，查询、插入、删除都是 O（logn），最坏和平均都是</li>\n<li>是并不是 unordered_map 查询时间一定比 map 短，因为实际情况中还要考虑到数据量</li>\n<li>unordered_map 的 hash 函数的构造速度也没那么快</li>\n</ul>\n<p><strong>unordered_map 与 unordered_set</strong></p>\n<ul>\n<li>unordered_set：value 就是它自己的 key，而不是像之前的 unordered_map 那样 有键-值对</li>\n</ul>\n<p>题目：</p>\n<ul>\n<li>A,B 两组数， 由整数组成，然后把 B 中在 A 中出现的数字取出来，要求用线性时间完成，用 unordered_set 来存放 A 的数</li>\n</ul>\n<p>分析：</p>\n<ul>\n<li>可以使用 <code>unordered_set</code> 来存放 A 中的数字，然后遍历 B 中的每个数字，判断它是否在 A 中出现过。由于 <code>unordered_set</code> 的查找操作是平均 O(1) 时间复杂度的，所以整个算法的时间复杂度是线性的</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">find_common_elements</span><span class=\"params\">(<span class=\"type\">const</span> std::vector&lt;<span class=\"type\">int</span>&gt;&amp; A, <span class=\"type\">const</span> std::vector&lt;<span class=\"type\">int</span>&gt;&amp; B)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unordered_set&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">setA</span><span class=\"params\">(A.begin(), A.end())</span></span>;  <span class=\"comment\">// 将 A 中的数字存入 unordered_set</span></span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; result;  <span class=\"comment\">// 存放结果的 vector</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> num : B) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (setA.<span class=\"built_in\">count</span>(num) &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">        &#123;  <span class=\"comment\">// 如果 num 在 setA 中出现过，说明它在 A 中也出现过</span></span><br><span class=\"line\">            result.<span class=\"built_in\">push_back</span>(num);  <span class=\"comment\">// 将 num 加入结果 vector</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; A = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; B = &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; result = <span class=\"built_in\">find_common_elements</span>(A, B);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出结果：[3, 4, 5]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> num : result) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; num &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"30-C-C-中-extern\"><a href=\"#30-C-C-中-extern\" class=\"headerlink\" title=\"30. C&#x2F;C++中 extern\"></a>30. C&#x2F;C++中 extern</h3><p><code>extern</code> 用于在一个文件中引用在另一个文件中定义的全局变量或函数</p>\n<p><code>extern</code> 声明的变量或函数只是一个声明，而不是定义。这意味着在当前文件或函数中使用</p>\n<p><code>extern</code> 声明的变量或函数时，编译器不会为其分配内存空间或生成代码。相反，编译器会在链接时查找该变量或函数的定义，并将其与声明进行匹配。</p>\n<p><strong>extern 修饰变量的声明</strong></p>\n<ul>\n<li>如果文件 a.c 需要引用 b.c 中变量 int v，就可 以在 a.c 中声明 extern int v，然后就可以引用变量 v</li>\n</ul>\n<p><strong>extern 修饰函数声明</strong></p>\n<ul>\n<li>从本质上来讲，变量和函数没有区别。函数名是指向函数二进 制块开头处的指针</li>\n<li>文件 a.c 需要引用 b.c 中的函数，比如在 b.c 中原型是 int fun(int mu)，那么就可以在 a.c 中声明 extern int fun（int mu），然后就能使用 fun 来做任何事情</li>\n</ul>\n<p><strong>使用 extern 和包含头文件来引用函数有什么区别</strong></p>\n<ul>\n<li>extern 的引用方式比包含头文件要简洁得多</li>\n<li>加速程序的编译（确切的说是预处理）的过程，节省时间</li>\n</ul>\n<p><strong>extern 修饰符可用于指示 C 或者 C++函数的调用规范</strong></p>\n<ul>\n<li><p>在 C++中调用 C 库 函数，就需要在 C++程序中用 extern “C”声明要引用的函数</p>\n</li>\n<li><p>这是给链接器用的，告诉链接 器在链接的时候用 C 函数规范来链接</p>\n</li>\n<li><p>主要原因是 C++和 C 程序编译完成后在目标代码中命名 规则不同</p>\n</li>\n<li><p>示例：</p>\n<ul>\n<li><p>我们要在C++中包含一个名为 <code>example.h</code> 的C头文件</p>\n</li>\n<li><p>example.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* C语言代码 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>index.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;example.h&quot;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"31-C-类的四个缺省函数\"><a href=\"#31-C-类的四个缺省函数\" class=\"headerlink\" title=\"31.  C++类的四个缺省函数\"></a>31.  C++类的四个缺省函数</h3><ul>\n<li>默认构造函数</li>\n<li>拷贝构造函数</li>\n<li>析构函数</li>\n<li>赋值函数</li>\n</ul>\n<h3 id=\"32-重写拷贝构造函数\"><a href=\"#32-重写拷贝构造函数\" class=\"headerlink\" title=\"32. 重写拷贝构造函数\"></a>32. 重写拷贝构造函数</h3><p>当构造函数涉及到动态存储分配空间时，要自己写拷贝构造函数，并且要深拷贝</p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>(<span class=\"type\">int</span> size) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分配内存</span></span><br><span class=\"line\">        m_size = size;</span><br><span class=\"line\">        m_data = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[m_size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>(<span class=\"type\">const</span> MyClass&amp; other) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 复制成员变量</span></span><br><span class=\"line\">        m_size = other.m_size;</span><br><span class=\"line\">        m_data = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[m_size];</span><br><span class=\"line\">        std::<span class=\"built_in\">memcpy</span>(m_data, other.m_data, m_size * <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">    ~<span class=\"built_in\">MyClass</span>() </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 释放内存</span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] m_data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> m_size;</span><br><span class=\"line\">    <span class=\"type\">int</span>* m_data;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<ul>\n<li>拷贝构造函数的参数是一个 <code>const MyClass&amp;</code> 类型的引用，这意味着它接受一个常量引用。</li>\n<li>在拷贝构造函数中，我们创建一个新的对象，并将其成员变量设置为与另一个对象相同的值。</li>\n<li>对于指向动态内存分配的指针成员变量 <code>m_data</code>，我们使用 <code>new</code> 运算符为它分配新的内存，并使用 <code>std::memcpy</code> 函数将原始数据复制到新的内存中。</li>\n<li>这确保了新对象和原对象的指针成员变量都指向不同的内存地址，从而实现了深拷贝。最后，在析构函数中，我们释放了 <code>m_data</code> 指向的内存</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>如果类中有其他指针成员变量，也需要在拷贝构造函数中进行深拷贝，以确保新对象和原对象的指针成员变量都指向不同的内存地址</li>\n</ul>\n<h3 id=\"33-调用拷贝构造函数\"><a href=\"#33-调用拷贝构造函数\" class=\"headerlink\" title=\"33. 调用拷贝构造函数\"></a>33. 调用拷贝构造函数</h3><ul>\n<li>创建对象时</li>\n<li>当类的一个对象去初始化该类的另一个对象时</li>\n<li>如果函数的形参是类的对象，调用函数进行形参和实参结合时</li>\n<li>如果函数的返回值是类对象，函数调用完成返回时</li>\n</ul>\n<h3 id=\"34-构造函数的特征\"><a href=\"#34-构造函数的特征\" class=\"headerlink\" title=\"34. 构造函数的特征\"></a>34. 构造函数的特征</h3><ul>\n<li>专门用来初始化对象成员变量的</li>\n<li>构造函数的名字必须与类名相同</li>\n<li>它不具有任何类型</li>\n<li>不返回任何值</li>\n</ul>\n<h3 id=\"35-类外访问类非公有成员\"><a href=\"#35-类外访问类非公有成员\" class=\"headerlink\" title=\"35. 类外访问类非公有成员\"></a>35. 类外访问类非公有成员</h3><ul>\n<li>友元</li>\n<li>继承</li>\n<li>公有成员函数</li>\n<li>父类 protected</li>\n</ul>\n<h3 id=\"36-不允许重载的运算符\"><a href=\"#36-不允许重载的运算符\" class=\"headerlink\" title=\"36. 不允许重载的运算符\"></a>36. 不允许重载的运算符</h3><p><code>*</code>（成员指针访问运算符号）</p>\n<p><code>::</code>域运算符</p>\n<p><code>sizeof</code> 长度运算符号</p>\n<p><code>?</code>条件运算符号</p>\n<p><code>.</code>（成员访问符）</p>\n","text":"C++面试1. 线程和进程的区别 线程和进程是操作系统中的两个基本概念。 线程是进程的一部分，它是操作系统调度的基本单位，而进程是一个具有一定独立功能的程序关于...","permalink":"/post/1_09_C++面试总结","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"C++","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E9%9D%A2%E8%AF%95\"><span class=\"toc-text\">C++面试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1. 线程和进程的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 进程间通信方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3. 线程间通信方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%E8%BF%9B%E7%A8%8B%E6%88%96%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">4. 什么时候用进程或线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%A0%88%E5%92%8C%E5%A0%86%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">5. 栈和堆的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-C-%E5%92%8C-C-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">6. C++和 C 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%BA%A7%E7%94%9F%E6%AD%BB%E9%94%81%E7%9A%84%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">7. 产生死锁的必要条件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E9%A2%84%E9%98%B2%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">8. 预防死锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-TCP-%E5%92%8C-UDP-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">9. TCP 和 UDP 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-static-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">10. static 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-const-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">11. const 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">12. 指针和引用的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E5%93%88%E5%B8%8C%E8%A1%A8\"><span class=\"toc-text\">13. 哈希表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-%E5%93%88%E5%B8%8C%E8%A1%A8%E5%A4%84%E7%90%86%E5%86%B2%E7%AA%81\"><span class=\"toc-text\">14. 哈希表处理冲突</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E5%92%8C%E4%BA%94%E4%B8%AA%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">15. 面向对象的三大特性和五个原则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">16. 深拷贝和浅拷贝</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-vector-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">17. vector 的实现原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-C-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">18. C++ 源代码到可执行代码的详细过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#19-%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">19. 虚函数和纯虚函数的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#20-overload-override-overwrite-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">20. overload,override,overwrite 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">21. 强制类型转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22-malloc-free%EF%BC%8Cnew-delete\"><span class=\"toc-text\">22. malloc&#x2F;free，new&#x2F;delete</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-c-11-%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">23.  c++11 特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24-STL-resize%E4%B8%8Ereserve\"><span class=\"toc-text\">24. STL resize与reserve</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-vector%E4%B8%8Edeque\"><span class=\"toc-text\">25. vector与deque</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#26-%E5%A4%A7%E7%AB%AF%E5%B0%8F%E7%AB%AF\"><span class=\"toc-text\">26. 大端小端</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#27-malloc-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">27. malloc 原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#28-%E6%9E%84%E9%80%A0%E3%80%81%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%99%9A%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">28. 构造、析构函数的虚函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29-STL-unordered-map-%E5%92%8C-map\"><span class=\"toc-text\">29. STL unordered_map 和 map</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#30-C-C-%E4%B8%AD-extern\"><span class=\"toc-text\">30. C&#x2F;C++中 extern</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#31-C-%E7%B1%BB%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%BC%BA%E7%9C%81%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">31.  C++类的四个缺省函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#32-%E9%87%8D%E5%86%99%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">32. 重写拷贝构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#33-%E8%B0%83%E7%94%A8%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">33. 调用拷贝构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#34-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">34. 构造函数的特征</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#35-%E7%B1%BB%E5%A4%96%E8%AE%BF%E9%97%AE%E7%B1%BB%E9%9D%9E%E5%85%AC%E6%9C%89%E6%88%90%E5%91%98\"><span class=\"toc-text\">35. 类外访问类非公有成员</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#36-%E4%B8%8D%E5%85%81%E8%AE%B8%E9%87%8D%E8%BD%BD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">36. 不允许重载的运算符</span></a></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"UE5增强输入","uid":"87c0c031df7f79bbfd15a7ef58b4eb65","slug":"7_12_UE5增强输入","date":"2024-02-22T08:26:40.571Z","updated":"2024-02-22T08:28:36.187Z","comments":true,"path":"api/articles/7_12_UE5增强输入.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (34).webp","text":"EnhancedInput使用增强输入完成Character的输入 [toc] 1. 创建InputAction创建IA_Jump： 默认值类型：数字（布尔） ...","permalink":"/post/7_12_UE5增强输入","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"UE4_UE5源码编译及发布LinuxServer","uid":"f9596c511588d1107b8c7f2d14ce64a6","slug":"7_10_UE4_UE5源码编译及发布LinuxServer","date":"2023-01-11T02:01:11.553Z","updated":"2023-01-11T02:00:37.308Z","comments":true,"path":"api/articles/7_10_UE4_UE5源码编译及发布LinuxServer.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (30).webp","text":"UE4&#x2F;UE5 发布LinuxServer12023-01-11 更新了UE5.1源码编译以及打包 LinuxServer的内容 [toc] 情景内容...","permalink":"/post/7_10_UE4_UE5源码编译及发布LinuxServer","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"UnrealEngine","slug":"UnrealEngine","count":22,"path":"api/tags/UnrealEngine.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}