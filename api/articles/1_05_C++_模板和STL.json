{"title":"C++_模板和STL","uid":"85a2acfa491d3e6f2208fd787a774695","slug":"1_05_C++_模板和STL","date":"2022-10-06T07:28:25.920Z","updated":"2023-01-10T01:10:19.449Z","comments":true,"path":"api/articles/1_05_C++_模板和STL.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (5).webp","content":"<h1 id=\"C-模板和STL\"><a href=\"#C-模板和STL\" class=\"headerlink\" title=\"C++_模板和STL\"></a>C++_模板和STL</h1><p>[toc]</p>\n<ul>\n<li>记录C++泛型编程和STL的使用和原理</li>\n</ul>\n<h3 id=\"1-模板-Template\"><a href=\"#1-模板-Template\" class=\"headerlink\" title=\"1. 模板-Template\"></a>1. 模板-Template</h3><h4 id=\"1-1-模板概念\"><a href=\"#1-1-模板概念\" class=\"headerlink\" title=\"1.1 模板概念\"></a>1.1 模板概念</h4><ul>\n<li>作用：建立通用的模具，提高编程的复用性</li>\n<li>特点：<ul>\n<li>模板在实际项目中不可直接使用，它只是一个框架，需根据实际情况进行使用</li>\n<li>模板的通用不是万能的</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-2-函数模板\"><a href=\"#1-2-函数模板\" class=\"headerlink\" title=\"1.2 函数模板\"></a>1.2 函数模板</h4><ul>\n<li>C++提供了另一种编程思想，<code>泛型编程</code>，主要利用的技术就是模板<code>template</code></li>\n<li>C++提供了两种模板机制：<code>函数模板</code>和<code>类模板</code></li>\n</ul>\n<h5 id=\"1-2-1-函数模板语法\"><a href=\"#1-2-1-函数模板语法\" class=\"headerlink\" title=\"1.2.1 函数模板语法\"></a>1.2.1 函数模板语法</h5><ol>\n<li><p>函数模板的作用：</p>\n<ul>\n<li><p>建立一个通用函数，其函数返回值类型和形参类型可以不确定，是一个<code>虚拟的类型</code></p>\n</li>\n<li><p>当需要使用时，再根据实际情况进行声明或由编译器自行判断数据类型</p>\n</li>\n</ul>\n</li>\n<li><p>语法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">函数的声明或定义</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>解释：</p>\n<ul>\n<li><code>template</code>：声明创建模板</li>\n<li><code>typename</code>：表面后面的符号，代表着是一种数据类型，但不确定是哪种，也可以用<code>class</code>来代替</li>\n<li><code>T</code>：通用数据类型，是一个符号，可以换成别的代替，通常大写，并习惯写成<code>T</code></li>\n</ul>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/9 13:35</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数模板</span></span><br><span class=\"line\"><span class=\"comment\">// 声明一个模板，通用数据符号 T， 防止编译器报错</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap_T</span><span class=\"params\">(T &amp;num1, T &amp;num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T tempNum = num1;</span><br><span class=\"line\">    num1 = num2;</span><br><span class=\"line\">    num2 = tempNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> num2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 自动类型推导</span></span><br><span class=\"line\">    <span class=\"built_in\">swap_T</span>(num1, num2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;自动类型: &quot;</span> ;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;num1: &quot;</span> &lt;&lt; num1 &lt;&lt; <span class=\"string\">&quot; -&quot;</span> &lt;&lt; <span class=\"string\">&quot; num2: &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指定类型</span></span><br><span class=\"line\">    <span class=\"built_in\">swap_T</span>&lt;<span class=\"type\">int</span>&gt;(num1, num2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;指定类型: &quot;</span> ;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;num1: &quot;</span> &lt;&lt; num1 &lt;&lt; <span class=\"string\">&quot; -&quot;</span> &lt;&lt; <span class=\"string\">&quot; num2: &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>总结：</p>\n<ul>\n<li>函数模板的创建利用关键字<code>template</code></li>\n<li>使用函数模板有两种方式：<code>自动类型推导</code>和<code>显示指定类型</code></li>\n<li>模板的目的是提高复用性，将类型参数化</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"1-2-2-函数模板注意事项\"><a href=\"#1-2-2-函数模板注意事项\" class=\"headerlink\" title=\"1.2.2 函数模板注意事项\"></a>1.2.2 函数模板注意事项</h5><p>注意事项：</p>\n<ul>\n<li>自动类型推导：通用数据类型 <code>T</code> 必须推导出一致的类型，才能使用</li>\n<li>模板函数在使用时，无论哪种方式，必须确定了使用的数据类型，才能使用</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/9 13:55</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap_T</span><span class=\"params\">(T &amp;num1, T &amp;num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T tempNum = num1;</span><br><span class=\"line\">    num1 = num2;</span><br><span class=\"line\">    num2 = tempNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> num2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c1 = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 自动类型推导</span></span><br><span class=\"line\">    <span class=\"comment\">// num1 和 num2 都是 int 类型，可以自动推导出是一致类型</span></span><br><span class=\"line\">    <span class=\"built_in\">swap_T</span>(num1, num2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// c1是char类型，是错误的使用方式</span></span><br><span class=\"line\">    <span class=\"comment\">// swap_T(c1, num2);</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;自动类型: &quot;</span> ;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;num1: &quot;</span> &lt;&lt; num1 &lt;&lt; <span class=\"string\">&quot; -&quot;</span> &lt;&lt; <span class=\"string\">&quot; num2: &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"1-2-3-函数模板案例\"><a href=\"#1-2-3-函数模板案例\" class=\"headerlink\" title=\"1.2.3 函数模板案例\"></a>1.2.3 函数模板案例</h5><ul>\n<li><p>案例描述：</p>\n<ul>\n<li>利用函数模板封装一个排序函数，可以对不同类型数据进行排序</li>\n<li>排序规则：从大到小，排序算法为<code>选择排序</code></li>\n<li>分别利用<code>char</code>数组和<code>int</code>数组进行测试</li>\n</ul>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/9 14:01</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap_T</span><span class=\"params\">(T &amp;a, T &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T temp = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sort_T</span><span class=\"params\">(T arr[], <span class=\"type\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; length; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 假设最大值的下标，后面进行比较</span></span><br><span class=\"line\">        <span class=\"type\">int</span> max = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; length; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将假设的下标对应的值和后面的值，比较</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[max] &lt; arr[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                max = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 上面的循环结束后，检查一开始假设的下标，是否是循环检查出的最大值下标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max != i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap_T</span>(arr[max], arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print_T</span><span class=\"params\">(T arr, <span class=\"type\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;从大到小排序后：&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; length; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; arr[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sortCharDemo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c_Array[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> c_Length;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;输入字符(a - z) &gt;&gt; &quot;</span>;</span><br><span class=\"line\">    cin &gt;&gt; c_Array;</span><br><span class=\"line\">    <span class=\"comment\">// 实际的字符后面有一个 `\\0`收尾,这获取长度方法不好</span></span><br><span class=\"line\">    <span class=\"comment\">//c_Length = (sizeof(c_Array) / sizeof(char));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// strlen() 获取长度，读到`\\0`，就不读，适合这个项目的需求</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要包含 &lt;cstring&gt;</span></span><br><span class=\"line\">    c_Length = <span class=\"built_in\">strlen</span>(c_Array);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">sort_T</span>(c_Array, c_Length);</span><br><span class=\"line\">    <span class=\"built_in\">print_T</span>(c_Array, c_Length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sortIntDemo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i_Array[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i_Length;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;输入数字(0 - 9) &gt;&gt; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin.<span class=\"built_in\">peek</span>() != <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; i_Array[i++];</span><br><span class=\"line\">        i_Length = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">sort_T</span>(i_Array, i_Length);</span><br><span class=\"line\">    <span class=\"built_in\">print_T</span>(i_Array, i_Length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// sortCharDemo();</span></span><br><span class=\"line\">    <span class=\"built_in\">sortIntDemo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"1-2-4-普通和模板函区别\"><a href=\"#1-2-4-普通和模板函区别\" class=\"headerlink\" title=\"1.2.4 普通和模板函区别\"></a>1.2.4 普通和模板函区别</h5><ul>\n<li><p>区别：</p>\n<ol>\n<li>普通函数调用时，可以发生自动类型转换 <code>(隐式类型转换)</code></li>\n<li>函数模板调用时，利用自动类型转换，不会发生<code>(隐式类型转换)</code></li>\n<li>如果利用显示指定类型的方式，可以发生<code>(隐式类型转换)</code></li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/9 15:54</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,  <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">add_T</span><span class=\"params\">(T a, T b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">// c -&gt; ASCII = 97</span></span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 普通函数 可以隐式类型转换</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">add</span>(a, c) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 模板函数 自动类型转换 无法隐式类型转换</span></span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; add_T(a, c) &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">// 指定类型转换 可以隐式类型转换</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">add_T</span>&lt;<span class=\"type\">int</span>&gt;(a, c) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：建议使用<code>显示指定类型</code>的方式调用函数模板，可以自己确定通用类型<code>T</code></p>\n</li>\n</ul>\n<h5 id=\"1-2-5-普通和模板函数调用\"><a href=\"#1-2-5-普通和模板函数调用\" class=\"headerlink\" title=\"1.2.5 普通和模板函数调用\"></a>1.2.5 普通和模板函数调用</h5><ul>\n<li><p>调用规则：</p>\n<ol>\n<li>如果函数模板和普通函数都能实现，优先调用普通函数</li>\n<li>可以通过空模板参数列表来，强制调用函数模板</li>\n<li>函数模板可以发生重载</li>\n<li>如果函数模板可以产生更好的匹配，优先调用函数模板</li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/9 16:18</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;普通函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">print</span><span class=\"params\">(T a, T b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;模板函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">print</span><span class=\"params\">(T a, T b, T c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;模板函数重载调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 如果函数模板和普通函数都能实现，优先调用普通函数</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 可以通过空模板参数列表来，强制调用函数模板</span></span><br><span class=\"line\">    print&lt;&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 函数模板可以发生重载</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. 如果函数模板可以产生更好的匹配，优先调用函数模板</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为 a， b为char，隐式类型转换调用普通函数，不如直接自动类型转换调用模板函数调用来的方便</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：如果需要使用模板函数，就不用提供声明普通函数，以免产生<code>二义性</code></p>\n</li>\n</ul>\n<h5 id=\"1-2-6-模板的局限性\"><a href=\"#1-2-6-模板的局限性\" class=\"headerlink\" title=\"1.2.6 模板的局限性\"></a>1.2.6 模板的局限性</h5><ul>\n<li><p>局限性：模板的通用性，并非万能</p>\n</li>\n<li><p>代码示例_1：如果传入的 <code>a</code> 和 <code>b</code>是数组，该模板函数无法实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(T a, T b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码示例_2：传入的是自定义类型数据，同样无法实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(T a, T b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b)</span><br><span class=\"line\">    &#123;......&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>解决方法：C++为了解决这个问题，提供模板的重载，可以为<code>特定的类型</code>提供<code>具体化的模板</code></p>\n</li>\n<li><p>代码示例_3：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/9 16:44</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义的结构体数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age, string name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">compare_T</span><span class=\"params\">(T &amp;a, T &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a == b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体化模板函数的实现，当传入参数类型为 Person，优先调用这个模板函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">compare_T</span><span class=\"params\">(Person &amp;p1, Person &amp;p2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p1.age == p2.age &amp;&amp; p1.name == p2.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span> rel = <span class=\"built_in\">compare_T</span>(a, b);</span><br><span class=\"line\">    string printInfo = rel ? <span class=\"string\">&quot;a = b&quot;</span> : <span class=\"string\">&quot;a != b&quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; printInfo &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"string\">&quot;fh&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"string\">&quot;fh&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span> rel = <span class=\"built_in\">compare_T</span>(p1, p2);</span><br><span class=\"line\">    string printInfo = rel ? <span class=\"string\">&quot;p1 = p2&quot;</span> : <span class=\"string\">&quot;p1 != p2&quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; printInfo &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：</p>\n<ol>\n<li>利用具体化模板函数，可以解决自定义类型的通用化</li>\n<li>学习模板并非是为了写模板，而是能够在STL中使用系统提供的模板</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"1-3-类模板\"><a href=\"#1-3-类模板\" class=\"headerlink\" title=\"1.3 类模板\"></a>1.3 类模板</h4><h5 id=\"1-3-1-类模板语法\"><a href=\"#1-3-1-类模板语法\" class=\"headerlink\" title=\"1.3.1 类模板语法\"></a>1.3.1 类模板语法</h5><ul>\n<li><p>类模板作用：建立一个通用类，类的成员数据类型可以不具体声明，用<code>虚拟类型</code>代替</p>\n</li>\n<li><p>类模板语法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> 类名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    name_T name;</span><br><span class=\"line\">    age_T age;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码示例：<code>类</code>和<code>结构体</code>都可以</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/9 17:17</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类和结构体都可以这么用</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    name_T name;</span><br><span class=\"line\">    age_T age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(name_T name, age_T age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Person</span>&lt;string, <span class=\"type\">int</span>&gt;(<span class=\"string\">&quot;fh&quot;</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"1-3-2-类和模板区别\"><a href=\"#1-3-2-类和模板区别\" class=\"headerlink\" title=\"1.3.2 类和模板区别\"></a>1.3.2 类和模板区别</h5><ul>\n<li><p>区别：</p>\n<ol>\n<li>类模板没有自动类型推导的使用方式</li>\n<li>类模板在模板参数列表中，可以有默认参数</li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/11 7:40</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Person01</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    name_T name;</span><br><span class=\"line\">    age_T age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person01</span>(name_T name, age_T age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Person01</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用结构体来代替类了</span></span><br><span class=\"line\"><span class=\"comment\">// 类模板中，可以在参数列表中，指明默认参数类型，生成对象时，不需要再显示指定类型</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span> = string, <span class=\"keyword\">class</span> age_T = <span class=\"type\">int</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> Person02</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    name_T name;</span><br><span class=\"line\">    age_T age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person02</span>(name_T name, age_T age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Person02</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo_P1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类模板没有自动类型推导，所以这个写法是错误的</span></span><br><span class=\"line\">    <span class=\"comment\">// Person01&lt;&gt; person01(&quot;FH&quot;, 24);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 需要显示指定类型</span></span><br><span class=\"line\">    <span class=\"function\">Person01&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">person01</span><span class=\"params\">(<span class=\"string\">&quot;FH&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo_P2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Person02&lt;&gt; <span class=\"built_in\">person02</span>(<span class=\"string\">&quot;XX&quot;</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo_P1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo_P2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"1-3-3-类模板中成员函数创建时机\"><a href=\"#1-3-3-类模板中成员函数创建时机\" class=\"headerlink\" title=\"1.3.3 类模板中成员函数创建时机\"></a>1.3.3 类模板中成员函数创建时机</h5><ul>\n<li><p>类模板中和普通类中的成员函数创建时机存在区别</p>\n<ol>\n<li>普通类中的成员函数一开始就可以创建</li>\n<li>类模板中的成员函数在调用时才会创建</li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/12 13:51</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPerson1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Show Person 1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPerson2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Show Person 2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">class_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person_T</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    class_T person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传入的类型不确定，所以默认情况下，编译器不会保错</span></span><br><span class=\"line\">    <span class=\"comment\">// 此时，类模板中的函数不会被创建，当正确调用类模板时，才会创建</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showFunc1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        person.<span class=\"built_in\">showPerson1</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showFunc2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        person.<span class=\"built_in\">showPerson2</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Person_T&lt;Person1&gt; p1;</span><br><span class=\"line\">    p1.<span class=\"built_in\">showFunc1</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 传入的是Person1，所以编译时，编译器创建类模板内的成员函数时，找不到可以调用的showPerson2()</span></span><br><span class=\"line\">    <span class=\"comment\">// p1.showFunc2();</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 传入Person2，才能调用showPerson2()，但同样也找不到showPerson1()</span></span><br><span class=\"line\">    Person_T&lt;Person2&gt; p2;</span><br><span class=\"line\">    p2.<span class=\"built_in\">showFunc2</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"1-3-4-类模板对象做函数参数\"><a href=\"#1-3-4-类模板对象做函数参数\" class=\"headerlink\" title=\"1.3.4 类模板对象做函数参数\"></a>1.3.4 类模板对象做函数参数</h5><ul>\n<li><p>说明：类模板实例化出对象，向函数传参的方式</p>\n</li>\n<li><p>三种传入方式：</p>\n<ol>\n<li>指定传入类型：直接显示对象的数据类型</li>\n<li>参数模板化：将对象中的参数变为模板进行传递</li>\n<li>整个类模板化：将对象类型模板化进行传递</li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/12 14:08</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    name_T name;</span><br><span class=\"line\">    age_T age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(name_T name, age_T age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPerson</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;name &lt;&lt; <span class=\"string\">&quot; -- &quot;</span> &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 指定传入类型：直接显示对象的数据类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print1</span><span class=\"params\">(Person&lt;string, <span class=\"type\">int</span>&gt; &amp;person)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    person.<span class=\"built_in\">showPerson</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(<span class=\"string\">&quot;FH&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">print1</span>(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 参数模板化：将对象中的参数变为模板进行传递</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">string_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">int_T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print2</span><span class=\"params\">(Person&lt;string_T, int_T&gt; &amp;person)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    person.<span class=\"built_in\">showPerson</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(<span class=\"string\">&quot;FF&quot;</span>, <span class=\"number\">22</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">print2</span>(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 整个类模板化：将对象类型模板化进行传递</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">person_T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print3</span><span class=\"params\">(person_T &amp;person)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    person.<span class=\"built_in\">showPerson</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(<span class=\"string\">&quot;HH&quot;</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">print3</span>(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo3</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"1-3-5-类模板与继承\"><a href=\"#1-3-5-类模板与继承\" class=\"headerlink\" title=\"1.3.5 类模板与继承\"></a>1.3.5 类模板与继承</h5><ul>\n<li><p>当类模板遇到需要继承时，需注意：</p>\n<ol>\n<li>当子类继承的父类是模板时，子类在声明时，需要指出父类中 <code>T</code> 的类型</li>\n<li>如果不指定，编译器无法给子类分配内存</li>\n<li>如果要灵活指定父类中的 <code>T</code> 类型，子类也需变成类模板</li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/12 14:34</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">class_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    class_T base_Info;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived_1</span> : Base&lt;<span class=\"type\">int</span>&gt; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">deClass_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">baseClass_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived_2</span> : Base&lt;baseClass_T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    deClass_T derived_Info;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Derived_2</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;deClass_T: &quot;</span> &lt;&lt; <span class=\"built_in\">typeid</span>(deClass_T).<span class=\"built_in\">name</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;baseClass_T: &quot;</span> &lt;&lt; <span class=\"built_in\">typeid</span>(baseClass_T).<span class=\"built_in\">name</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived_2&lt;<span class=\"type\">int</span>, <span class=\"type\">char</span>&gt; derived2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"1-3-6-类模板成员函数类外实现\"><a href=\"#1-3-6-类模板成员函数类外实现\" class=\"headerlink\" title=\"1.3.6 类模板成员函数类外实现\"></a>1.3.6 类模板成员函数类外实现</h5><ul>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/12 15:04</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    name_T name;</span><br><span class=\"line\">    age_T age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 类模板 内 声明</span></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(name_T name, age_T age);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPerson</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类模板 外 实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\">Person&lt;name_T, age_T&gt;::<span class=\"built_in\">Person</span>(name_T name, age_T age)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Person&lt;name_T, age_T&gt;::<span class=\"built_in\">showPerson</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;name &lt;&lt; <span class=\"string\">&quot; -- &quot;</span> &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(<span class=\"string\">&quot;fh&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    person.<span class=\"built_in\">showPerson</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"1-3-7-类模板分文件编写\"><a href=\"#1-3-7-类模板分文件编写\" class=\"headerlink\" title=\"1.3.7 类模板分文件编写\"></a>1.3.7 类模板分文件编写</h5><ul>\n<li><p>说明：掌握类模板成员函数分文件编写产生的问题及解决方式</p>\n</li>\n<li><p>问题：类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</p>\n</li>\n<li><p>解决：</p>\n<ol>\n<li>直接包含 <code>.cpp</code>文件</li>\n<li>将声明和实现写在同一个文件中，并改名为<code>.hpp</code>，是约定的标准名称，并非强制要求</li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<ol>\n<li><p>第一种：直接包含 <code>.cpp</code>文件</p>\n<p><code>person.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/7/12.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> TEMPLATE_STL_PERSON_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TEMPLATE_STL_PERSON_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    name_T name;</span><br><span class=\"line\">    age_T age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(name_T name, age_T age);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPerson</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//TEMPLATE_STL_PERSON_H</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>person.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/7/12.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;person.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\">Person&lt;name_T, age_T&gt;::<span class=\"built_in\">Person</span>(name_T name, age_T age)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Person&lt;name_T, age_T&gt;::<span class=\"built_in\">showPerson</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;name &lt;&lt; <span class=\"string\">&quot; -- &quot;</span> &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>person_Main.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/12 15:30</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包含头文件 不管用 因为类模板的成员函数 只在调用时创建 所以编译时无法链接到外部文件</span></span><br><span class=\"line\"><span class=\"comment\">// #include &quot;person.h&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种：直接包含 .cpp 文件</span></span><br><span class=\"line\"><span class=\"comment\">// 直接包含 源文件 源文件中包含头文件 同时实现了 类模板的成员函数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;person.cpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(<span class=\"string\">&quot;fh&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    person.<span class=\"built_in\">showPerson</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种：将声明和实现写在同一个文件中，并改名为<code>.hpp</code></p>\n<p><code>person.hpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/7/12.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> TEMPLATE_STL_PERSON_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TEMPLATE_STL_PERSON_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    name_T name;</span><br><span class=\"line\">    age_T age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(name_T name, age_T age);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPerson</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\">Person&lt;name_T, age_T&gt;::<span class=\"built_in\">Person</span>(name_T name, age_T age)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Person&lt;name_T, age_T&gt;::<span class=\"built_in\">showPerson</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;name &lt;&lt; <span class=\"string\">&quot; -- &quot;</span> &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//TEMPLATE_STL_PERSON_H</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>person_Main.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/12 15:47</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;person.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(<span class=\"string\">&quot;fh&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    person.<span class=\"built_in\">showPerson</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h5 id=\"1-3-8-类模板与友元\"><a href=\"#1-3-8-类模板与友元\" class=\"headerlink\" title=\"1.3.8 类模板与友元\"></a>1.3.8 类模板与友元</h5><ul>\n<li><p>说明：类模板配合友元函数的类内和类外实现</p>\n</li>\n<li><p>实现：</p>\n<ol>\n<li>全局函数类内实现：直接在类内声明友元</li>\n<li>全局函数类外实现：需要让编译器提前知道全局函数的存在</li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/12 15:57</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局函数 类外实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPerson_2</span><span class=\"params\">(Person&lt;name_T, age_T&gt; &amp;person)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; person.name &lt;&lt; <span class=\"string\">&quot; -- &quot;</span> &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt;person.age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">name_T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">age_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 全局函数 类内实现</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">showPerson_1</span><span class=\"params\">(Person&lt;name_T, age_T&gt; &amp;person)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; person.name &lt;&lt; <span class=\"string\">&quot; -- &quot;</span> &lt;&lt; <span class=\"string\">&quot;Age: &quot;</span> &lt;&lt;person.age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全局函数 类外实现</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"type\">void</span> showPerson_2&lt;&gt;(Person&lt;name_T, age_T&gt; &amp;person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    name_T name;</span><br><span class=\"line\">    age_T age;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(name_T name, age_T age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;全局函数，类内实现: &quot;</span>;</span><br><span class=\"line\">    <span class=\"function\">Person&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(<span class=\"string\">&quot;FH&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">showPerson_1</span>(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;全局函数，类外实现: &quot;</span>;</span><br><span class=\"line\">    <span class=\"function\">Person&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(<span class=\"string\">&quot;fh&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">showPerson_2</span>(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"1-3-9-类模板案例\"><a href=\"#1-3-9-类模板案例\" class=\"headerlink\" title=\"1.3.9 类模板案例\"></a>1.3.9 类模板案例</h5><ul>\n<li><p>案例要求：实现一个通用的数组类</p>\n</li>\n<li><p>案例功能：</p>\n<ol>\n<li>可以对内置类型和自定义类型进行存储</li>\n<li>将数组的数据存储到堆区</li>\n<li>构造函数可以传入数组的容量</li>\n<li>提供拷贝函数及<code>operator=</code>防止浅拷贝问题</li>\n<li>提供尾差法和尾删法对数组中的数据进行增删</li>\n<li>通过下标访问数组中的元素</li>\n<li>获取数组中的元素个数和数组容量</li>\n</ol>\n</li>\n<li><p>代码示例：(初期)</p>\n<p><code>fArray.hpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/7/13.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> TEMPLATE_STL_FARRAY_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TEMPLATE_STL_FARRAY_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">array_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    array_T *arrayAddress; <span class=\"comment\">// 指针指向堆区开辟的数组首地址</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arrayCapacity; <span class=\"comment\">// 数组容量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arraySize; <span class=\"comment\">// 数组大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 数组的容量 大小 和 在堆区创建</span></span><br><span class=\"line\">    <span class=\"built_in\">FArray</span>(<span class=\"type\">int</span> capacity)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayCapacity = capacity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arraySize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"keyword\">new</span> array_T[<span class=\"keyword\">this</span>-&gt;arrayCapacity];</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 释放堆区的数组</span></span><br><span class=\"line\">    ~<span class=\"built_in\">FArray</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;arrayAddress != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] <span class=\"keyword\">this</span>-&gt;arrayAddress;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造函数，解决浅拷贝问题</span></span><br><span class=\"line\">    <span class=\"built_in\">FArray</span>(<span class=\"type\">const</span> FArray &amp;fArray)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayCapacity = fArray.arrayCapacity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arraySize = fArray.arraySize;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这是编译器默认的浅拷贝，在析构函数执行后，因为地址始终不为null，所以会重复释放</span></span><br><span class=\"line\">        <span class=\"comment\">// this-&gt;arrayAddress = fArray.arrayAddress;</span></span><br><span class=\"line\">        <span class=\"comment\">// 重新开辟空间，解决浅拷贝问题</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"keyword\">new</span> array_T[<span class=\"keyword\">this</span>-&gt;arrayCapacity];</span><br><span class=\"line\">        <span class=\"comment\">// 将 fArray的数据拷贝进新的空间中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;arraySize; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayAddress[i] = fArray.arrayAddress[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;拷贝函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// operator= 解决浅拷贝问题</span></span><br><span class=\"line\">    FArray &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> FArray &amp;fArray)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先判断堆区是否存在，存在就先释放</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;arrayAddress != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] <span class=\"keyword\">this</span>-&gt;arrayAddress;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayCapacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arraySize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 深拷贝</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayCapacity = fArray.arrayCapacity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arraySize = fArray.arraySize;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"keyword\">new</span> array_T[<span class=\"keyword\">this</span>-&gt;arrayCapacity];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;arraySize; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayAddress[i] = fArray.arrayAddress[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;operator=函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//TEMPLATE_STL_FARRAY_HPP</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>fArray_Main.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/13 14:36</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;fArray.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 测试 初期，创建一个容量5的int类型数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 测试 构造函数和析构函数</span></span><br><span class=\"line\">    <span class=\"function\">FArray&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fArray1</span><span class=\"params\">(<span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试 拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"function\">FArray&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fArray2</span><span class=\"params\">(fArray1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试 operator= 函数</span></span><br><span class=\"line\">    <span class=\"function\">FArray&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fArray3</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    fArray3 = fArray1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>代码示例：（后期）</p>\n<p><code>fArray.hpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Admin on 2021/7/13.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> TEMPLATE_STL_FARRAY_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TEMPLATE_STL_FARRAY_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">array_T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    array_T *arrayAddress; <span class=\"comment\">// 指针指向堆区开辟的数组首地址</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arrayCapacity; <span class=\"comment\">// 数组容量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arraySize; <span class=\"comment\">// 数组大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 数组的容量 大小 和 在堆区创建</span></span><br><span class=\"line\">    <span class=\"built_in\">FArray</span>(<span class=\"type\">int</span> capacity)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayCapacity = capacity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arraySize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"keyword\">new</span> array_T[<span class=\"keyword\">this</span>-&gt;arrayCapacity];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;构造函数调用&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 释放堆区的数组</span></span><br><span class=\"line\">    ~<span class=\"built_in\">FArray</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;arrayAddress != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] <span class=\"keyword\">this</span>-&gt;arrayAddress;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; &quot;析构函数调用&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造函数，解决浅拷贝问题</span></span><br><span class=\"line\">    <span class=\"built_in\">FArray</span>(<span class=\"type\">const</span> FArray &amp;fArray)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayCapacity = fArray.arrayCapacity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arraySize = fArray.arraySize;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这是编译器默认的浅拷贝，在析构函数执行后，因为地址始终不为null，所以会重复释放</span></span><br><span class=\"line\">        <span class=\"comment\">// this-&gt;arrayAddress = fArray.arrayAddress;</span></span><br><span class=\"line\">        <span class=\"comment\">// 重新开辟空间，解决浅拷贝问题</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"keyword\">new</span> array_T[<span class=\"keyword\">this</span>-&gt;arrayCapacity];</span><br><span class=\"line\">        <span class=\"comment\">// 将 fArray的数据拷贝进新的空间中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;arraySize; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayAddress[i] = fArray.arrayAddress[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;拷贝函数调用&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// operator= 解决浅拷贝问题</span></span><br><span class=\"line\">    FArray &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> FArray &amp;fArray)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先判断堆区是否存在，存在就先释放</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;arrayAddress != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] <span class=\"keyword\">this</span>-&gt;arrayAddress;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayCapacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arraySize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 深拷贝</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayCapacity = fArray.arrayCapacity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arraySize = fArray.arraySize;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayAddress = <span class=\"keyword\">new</span> array_T[<span class=\"keyword\">this</span>-&gt;arrayCapacity];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;arraySize; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;arrayAddress[i] = fArray.arrayAddress[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;operator=函数调用&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回数组大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getArraySize</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;arraySize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回数组容量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getArrayCapacity</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;arrayCapacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 尾插法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tail_Insertion</span><span class=\"params\">(<span class=\"type\">const</span> array_T &amp;arrayValue)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先判断数组容量是否够</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;arrayCapacity == <span class=\"keyword\">this</span>-&gt;arraySize)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arrayAddress[<span class=\"keyword\">this</span>-&gt;arraySize] = arrayValue; <span class=\"comment\">// 将数据插入到数组的尾部</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arraySize++; <span class=\"comment\">// 更新数组的大小</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 尾删法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tail_Deletion</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 让用户无法访问最后一个元素，逻辑删除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;arraySize == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;arraySize--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过小标访问数组元素 自定义的数据类型，内置的[]不能用，需要重载[]</span></span><br><span class=\"line\">    array_T &amp;<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> fArray_Index)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;arrayAddress[fArray_Index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//TEMPLATE_STL_FARRAY_HPP</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>fArray.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/13 14:36</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;fArray.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> arrayIntCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> arrayPersonCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印int类型数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printIntArray</span><span class=\"params\">(FArray&lt;<span class=\"type\">int</span>&gt; &amp;fArray)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    arrayIntCount++;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;数组&quot;</span> &lt;&lt; arrayIntCount &lt;&lt; <span class=\"string\">&quot;：[ &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; fArray.<span class=\"built_in\">getArraySize</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; fArray[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前期测试：创建到堆区，拷贝构造函数，operator= 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 测试 初期，创建一个容量5的int类型数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 测试 构造函数和析构函数</span></span><br><span class=\"line\">    <span class=\"function\">FArray&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fArray1</span><span class=\"params\">(<span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试 拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"function\">FArray&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fArray2</span><span class=\"params\">(fArray1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试 operator= 函数</span></span><br><span class=\"line\">    <span class=\"function\">FArray&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fArray3</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    fArray3 = fArray1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后期测试：尾插法，容量，大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建数组 和 容量</span></span><br><span class=\"line\">    <span class=\"function\">FArray&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fArray1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用尾插法插入数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fArray1.<span class=\"built_in\">tail_Insertion</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 打印数组</span></span><br><span class=\"line\">    <span class=\"built_in\">printIntArray</span>(fArray1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查看数组 容量 大小</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;数组容量：&quot;</span> &lt;&lt; fArray1.<span class=\"built_in\">getArrayCapacity</span>() &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;数组大小：&quot;</span> &lt;&lt; fArray1.<span class=\"built_in\">getArraySize</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 尾删法 测试</span></span><br><span class=\"line\">    <span class=\"function\">FArray&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fArray2</span><span class=\"params\">(fArray1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printIntArray</span>(fArray2);</span><br><span class=\"line\"></span><br><span class=\"line\">    fArray2.<span class=\"built_in\">tail_Deletion</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;数组容量：&quot;</span> &lt;&lt; fArray2.<span class=\"built_in\">getArrayCapacity</span>() &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;数组大小：&quot;</span> &lt;&lt; fArray2.<span class=\"built_in\">getArraySize</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后期测试 自定义数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>()&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(string name, <span class=\"type\">int</span> age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印Person类型数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printPersonArray</span><span class=\"params\">(FArray&lt;Person&gt; &amp;fArray)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    arrayPersonCount++;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;数组&quot;</span> &lt;&lt; arrayPersonCount &lt;&lt; <span class=\"string\">&quot;：[ &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; fArray.<span class=\"built_in\">getArraySize</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; fArray[i].name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; fArray[i].age &lt;&lt; <span class=\"string\">&quot; - &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">FArray&lt;Person&gt; <span class=\"title\">fArray</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person1</span><span class=\"params\">(<span class=\"string\">&quot;FH&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person2</span><span class=\"params\">(<span class=\"string\">&quot;HH&quot;</span>, <span class=\"number\">22</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    fArray.<span class=\"built_in\">tail_Insertion</span>(person1);</span><br><span class=\"line\">    fArray.<span class=\"built_in\">tail_Insertion</span>(person2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printPersonArray</span>(fArray);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;数组容量：&quot;</span> &lt;&lt; fArray.<span class=\"built_in\">getArrayCapacity</span>() &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;数组大小：&quot;</span> &lt;&lt; fArray.<span class=\"built_in\">getArraySize</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// test1();</span></span><br><span class=\"line\">    <span class=\"comment\">// test2();</span></span><br><span class=\"line\">    <span class=\"built_in\">test3</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-STL基础\"><a href=\"#2-STL基础\" class=\"headerlink\" title=\"2. STL基础\"></a>2. STL基础</h3><h4 id=\"2-1-STL的诞生\"><a href=\"#2-1-STL的诞生\" class=\"headerlink\" title=\"2.1 STL的诞生\"></a>2.1 STL的诞生</h4><ul>\n<li>C++的面向对象和泛型编程思想，目的是复用性</li>\n<li>大多数情况下，数据结构和算法都未能有一套标准，导致被迫从事大量重复工作</li>\n<li>为了建立数据结构和算法的标准，诞生了STL</li>\n</ul>\n<h4 id=\"2-2-STL基本概念\"><a href=\"#2-2-STL基本概念\" class=\"headerlink\" title=\"2.2 STL基本概念\"></a>2.2 STL基本概念</h4><ul>\n<li>STL(Standard Template Library，标准模板库)</li>\n<li>STL广义上分为：<code>容器(container)</code>，<code>算法(algorithm)</code>，<code>迭代器(iterator)</code></li>\n<li>容器和算法之间通过迭代器进行连接</li>\n<li>STL激活所有的代码都采用了模板类或模板函数</li>\n</ul>\n<h4 id=\"2-3-STL六大组件\"><a href=\"#2-3-STL六大组件\" class=\"headerlink\" title=\"2.3 STL六大组件\"></a>2.3 STL六大组件</h4><ul>\n<li>STL大体分为六个组件：<ul>\n<li>容器</li>\n<li>算法</li>\n<li>迭代器</li>\n<li>仿函数</li>\n<li>适配器(配接器)</li>\n<li>空间配置器</li>\n</ul>\n</li>\n<li>组件介绍：<ol>\n<li>容器：各种数据结构，如<code>vector</code>、<code>list</code>、<code>deque</code>、<code>set</code>、<code>map</code>等，用来存放数据</li>\n<li>算法：各种常用的算法，如<code>sort</code>、<code>find</code>、<code>copy</code>、<code>for_each</code>等</li>\n<li>迭代器：扮演了容器和算法之间的胶合剂</li>\n<li>仿函数：行为类似函数，可作为算法的某种策略</li>\n<li>适配器：一种修饰容器或仿函数或迭代器接口</li>\n<li>空间配置器：负责空间的配置和管理</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"2-4-STL容器-算法-迭代器\"><a href=\"#2-4-STL容器-算法-迭代器\" class=\"headerlink\" title=\"2.4 STL容器\\算法\\迭代器\"></a>2.4 STL容器\\算法\\迭代器</h4><ul>\n<li><p>容器：存放数据，将运用最广泛的一些数据结构实现出来</p>\n<ul>\n<li>常用数据结构：数组，链表，树，栈，队列，集合，映射表 等</li>\n<li>容器分为：<code>序列式容器</code>和<code>关联式容器</code><ul>\n<li>序列式容器：强调值的排序，序列容器中的每个元素均有固定的位置</li>\n<li>关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>算法：解决问题，有限的步骤，解决逻辑或数学上的问题</p>\n<ul>\n<li>算法分为：<code>质变算法</code>和<code>非质变算法</code><ul>\n<li>质变算法：值运算过程中会更改区间内的元素的内容，例如：拷贝，替换，删除等</li>\n<li>非质变算法：值运算过程中不会更改区间内的元素内容，例如：查找，计数，遍历，寻找极值等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>迭代器：容器和算法之间胶合剂</p>\n<ul>\n<li><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而无需暴露该容器的内部表示方式</p>\n</li>\n<li><p>每个容器都有自己的专属迭代器</p>\n</li>\n<li><p>迭代器使用类似指针</p>\n</li>\n<li><p>迭代器的种类：</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>功能</th>\n<th>支持算法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>输入迭代器</td>\n<td>对数据只读访问</td>\n<td>只读，支持 ++，&#x3D;&#x3D;，!&#x3D;</td>\n</tr>\n<tr>\n<td>输出迭代器</td>\n<td>对数据只写访问</td>\n<td>只写，支持 ++</td>\n</tr>\n<tr>\n<td>前向迭代器</td>\n<td>读写操作，并能向前推进迭代器</td>\n<td>读写，支持 ++，&#x3D;&#x3D;，!&#x3D;</td>\n</tr>\n<tr>\n<td>双向迭代器</td>\n<td>读写操作，并能向前和向后操作</td>\n<td>读写，支持 ++，–</td>\n</tr>\n<tr>\n<td>随机访问迭代器</td>\n<td>读写操作，可以跳跃访问任意数据</td>\n<td>读写，支持 ++，–，[n]，-n，&lt;，&lt;&#x3D;，&gt;，&gt;&#x3D;</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>常用的容器这迭代器种类为<code>双向迭代器</code>和<code>随机访问迭代器</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-5-容器-算法-迭代器基础\"><a href=\"#2-5-容器-算法-迭代器基础\" class=\"headerlink\" title=\"2.5 容器\\算法\\迭代器基础\"></a>2.5 容器\\算法\\迭代器基础</h4><h5 id=\"2-5-1-vector存放内置数据类型\"><a href=\"#2-5-1-vector存放内置数据类型\" class=\"headerlink\" title=\"2.5.1 vector存放内置数据类型\"></a>2.5.1 vector存放内置数据类型</h5><ul>\n<li><p>容器：<code>vector</code></p>\n</li>\n<li><p>算法：<code>for_each</code></p>\n</li>\n<li><p>迭代器：<code>vector&lt;int&gt;::iterator</code></p>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/19 14:23</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fPrint</span><span class=\"params\">(<span class=\"type\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个vector容器</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入数据</span></span><br><span class=\"line\">    v.<span class=\"built_in\">push_back</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    v.<span class=\"built_in\">push_back</span>(<span class=\"number\">11</span>);</span><br><span class=\"line\">    v.<span class=\"built_in\">push_back</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\">    v.<span class=\"built_in\">push_back</span>(<span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过创建迭代器访问容器中的数据</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt;::iterator iBegin = v.<span class=\"built_in\">begin</span>(); <span class=\"comment\">// 起始地迭代器 指向容器中的第一个元素</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt;::iterator iEnd = v.<span class=\"built_in\">end</span>(); <span class=\"comment\">// 指向容器最后一个元素 之后的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第一种遍历方式</span></span><br><span class=\"line\"><span class=\"comment\">//    while (iBegin != iEnd)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        cout &lt;&lt; *iBegin &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//        iBegin++;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第二种遍历方式</span></span><br><span class=\"line\"><span class=\"comment\">//    for (vector&lt;int&gt;::iterator i = v.begin(); i != v.end(); ++i)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        cout &lt;&lt; *i &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第三种遍历方式</span></span><br><span class=\"line\">    for_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), fPrint);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"2-5-2-vector存放自定义数据类型\"><a href=\"#2-5-2-vector存放自定义数据类型\" class=\"headerlink\" title=\"2.5.2 vector存放自定义数据类型\"></a>2.5.2 vector存放自定义数据类型</h5><ul>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/19 14:49</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(string name, <span class=\"type\">int</span> age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt; --demo1-- &gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    vector&lt;Person&gt; v_P;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">&quot;fh&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">&quot;ff&quot;</span>, <span class=\"number\">22</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">&quot;hh&quot;</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v_P.<span class=\"built_in\">push_back</span>(p1);</span><br><span class=\"line\">    v_P.<span class=\"built_in\">push_back</span>(p2);</span><br><span class=\"line\">    v_P.<span class=\"built_in\">push_back</span>(p3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;Person&gt;::iterator it_P = v_P.<span class=\"built_in\">begin</span>(); it_P != v_P.<span class=\"built_in\">end</span>(); ++it_P)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; it_P-&gt;name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; it_P-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt; --demo2-- &gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    vector&lt;Person *&gt; v_P;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">&quot;fh&quot;</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">&quot;ff&quot;</span>, <span class=\"number\">22</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">&quot;hh&quot;</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v_P.<span class=\"built_in\">push_back</span>(&amp;p1);</span><br><span class=\"line\">    v_P.<span class=\"built_in\">push_back</span>(&amp;p2);</span><br><span class=\"line\">    v_P.<span class=\"built_in\">push_back</span>(&amp;p3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;Person *&gt;::iterator it_P = v_P.<span class=\"built_in\">begin</span>(); it_P != v_P.<span class=\"built_in\">end</span>(); ++it_P)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; (*it_P)-&gt;name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; (*it_P)-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"2-5-3-vector容器嵌套容器\"><a href=\"#2-5-3-vector容器嵌套容器\" class=\"headerlink\" title=\"2.5.3 vector容器嵌套容器\"></a>2.5.3 vector容器嵌套容器</h5><ul>\n<li><p>容器中嵌套容器，将数据进行遍历打印</p>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/19 15:07</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建大容器</span></span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; v_Big;</span><br><span class=\"line\">    <span class=\"comment\">// 创建小容器</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v_S1;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v_S2;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v_S3;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v_S4;</span><br><span class=\"line\">    <span class=\"comment\">// 向小容器中添加数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v_S1.<span class=\"built_in\">push_back</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        v_S2.<span class=\"built_in\">push_back</span>(i + <span class=\"number\">2</span>);</span><br><span class=\"line\">        v_S3.<span class=\"built_in\">push_back</span>(i + <span class=\"number\">3</span>);</span><br><span class=\"line\">        v_S4.<span class=\"built_in\">push_back</span>(i + <span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将小容器插入大容器</span></span><br><span class=\"line\">    v_Big.<span class=\"built_in\">push_back</span>(v_S1);</span><br><span class=\"line\">    v_Big.<span class=\"built_in\">push_back</span>(v_S2);</span><br><span class=\"line\">    v_Big.<span class=\"built_in\">push_back</span>(v_S3);</span><br><span class=\"line\">    v_Big.<span class=\"built_in\">push_back</span>(v_S4);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历大容器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;::iterator it_Big = v_Big.<span class=\"built_in\">begin</span>(); it_Big != v_Big.<span class=\"built_in\">end</span>(); ++it_Big)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// (*it_Big)是小容器 vector&lt;int&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历小容器</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it_Small = (*it_Big).<span class=\"built_in\">begin</span>(); it_Small != (*it_Big).<span class=\"built_in\">end</span>(); ++it_Small)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; *it_Small &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-STL常用容器\"><a href=\"#3-STL常用容器\" class=\"headerlink\" title=\"3. STL常用容器\"></a>3. STL常用容器</h3><h4 id=\"3-1-string容器\"><a href=\"#3-1-string容器\" class=\"headerlink\" title=\"3.1 string容器\"></a>3.1 string容器</h4><h5 id=\"3-1-1-string基本概念\"><a href=\"#3-1-1-string基本概念\" class=\"headerlink\" title=\"3.1.1 string基本概念\"></a>3.1.1 string基本概念</h5><ul>\n<li>本质：<code>string</code>是C++的风格字符串，而<code>string</code>本质是一个类</li>\n<li><code>string</code>和<code>char *</code> 区别：<ol>\n<li><code>char *</code> 是指针</li>\n<li><code>string</code> 是指针，内部封装了 <code>char *</code> ，管理这个字符串，是一个 <code>char * </code>的容器</li>\n</ol>\n</li>\n<li>特点：<ol>\n<li><code>string</code>内部封装了很多的成员方法</li>\n<li>查找 <code>find</code>，拷贝 <code>copy</code>，删除 <code>delete</code>，替换 <code>replace</code>，插入 <code>insert</code></li>\n<li><code>string</code>管理 <code>char *</code> 所分配的内存，不用担心复制越界和取值越界，由类内部进行负责</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"3-1-2-string构造函数\"><a href=\"#3-1-2-string构造函数\" class=\"headerlink\" title=\"3.1.2 string构造函数\"></a>3.1.2 string构造函数</h5><ul>\n<li><p>构造函数原型：</p>\n<table>\n<thead>\n<tr>\n<th><code>string();</code></th>\n<th>创建一个空的字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>string(const char *s);</code></td>\n<td>使字符串初始化</td>\n</tr>\n<tr>\n<td><code>string(const string &amp;s);</code></td>\n<td>用一个string对象初始化另一个string对象</td>\n</tr>\n<tr>\n<td><code>string(int n, char c);</code></td>\n<td>使用n个字符c，初始化</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/7/20 9:43</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个空的字符串</span></span><br><span class=\"line\">    string string1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使字符串初始化</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *str = <span class=\"string\">&quot;HelloWorld&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">string2</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;string2 = &quot;</span> &lt;&lt; string2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用一个string对象初始化另一个string对象</span></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">string3</span><span class=\"params\">(string2)</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;string3 = &quot;</span> &lt;&lt; string3 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用n个字符c，初始化</span></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">string4</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"string\">&#x27;a&#x27;</span>)</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;string4 = &quot;</span> &lt;&lt; string4 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-1-3-string赋值操作\"><a href=\"#3-1-3-string赋值操作\" class=\"headerlink\" title=\"3.1.3 string赋值操作\"></a>3.1.3 string赋值操作</h5><ul>\n<li><p>功能描述：给<code>string</code>字符串赋值</p>\n<table>\n<thead>\n<tr>\n<th>赋值的函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>string &amp;operator=(const char *s)</code>;</td>\n<td>char *类型字符串，赋值给当前的字符串</td>\n</tr>\n<tr>\n<td><code>string &amp;operator=(const string &amp;s);</code></td>\n<td>字符串s，赋值给当前的字符串</td>\n</tr>\n<tr>\n<td><code>string &amp;operator=(char c);</code></td>\n<td>字符，赋值给当前字符串</td>\n</tr>\n<tr>\n<td><code>string &amp;assign(const char *s);</code></td>\n<td>字符串s，赋值给当前的字符串</td>\n</tr>\n<tr>\n<td><code>string &amp;assign(const char *s, int n);</code></td>\n<td>字符串s的前n个字符，赋值给当前的字符串</td>\n</tr>\n<tr>\n<td><code>string &amp;assign(const string &amp;s);</code></td>\n<td>字符串s，赋值给当前的字符串</td>\n</tr>\n<tr>\n<td><code>string &amp;assign(int n, char c);</code></td>\n<td>用n个字符c，赋值给当前字符串</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/9/21 14:56</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string string1;</span><br><span class=\"line\">    string1 = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;string1 = &quot;</span> &lt;&lt; string1 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string2;</span><br><span class=\"line\">    string2 = string1;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;string2 = &quot;</span> &lt;&lt; string2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string3;</span><br><span class=\"line\">    string3 = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;string3 = &quot;</span> &lt;&lt; string3 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string4;</span><br><span class=\"line\">    string4.<span class=\"built_in\">assign</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;string4 = &quot;</span> &lt;&lt; string4 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string5;</span><br><span class=\"line\">    string5.<span class=\"built_in\">assign</span>(<span class=\"string\">&quot;hello world&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;string5 = &quot;</span> &lt;&lt; string5 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string6;</span><br><span class=\"line\">    string6.<span class=\"built_in\">assign</span>(<span class=\"number\">6</span>, <span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;string6 = &quot;</span> &lt;&lt; string6 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-1-4-string字符拼接\"><a href=\"#3-1-4-string字符拼接\" class=\"headerlink\" title=\"3.1.4 string字符拼接\"></a>3.1.4 string字符拼接</h5><ul>\n<li><p>功能描述：实现字符串末尾拼接字符串</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>string &amp;operator+=(const char *str);</code></td>\n<td>重载+&#x3D;操作符</td>\n</tr>\n<tr>\n<td><code>string &amp;operator+=(const char c);</code></td>\n<td>重载+&#x3D;操作符</td>\n</tr>\n<tr>\n<td><code>string &amp;operator+=(const string &amp;str);</code></td>\n<td>重载+&#x3D;操作符</td>\n</tr>\n<tr>\n<td><code>string &amp;append(const char *s);</code></td>\n<td>字符串s，连接到当前字符串的末尾</td>\n</tr>\n<tr>\n<td><code>string &amp;append(const char *s, int n);</code></td>\n<td>字符串s的前n个字符，连接到当前字符串的末尾</td>\n</tr>\n<tr>\n<td><code>string &amp;append(const string &amp;s);</code></td>\n<td>等同于，<code>string &amp;operator+=(const string &amp;str);</code></td>\n</tr>\n<tr>\n<td><code>string &amp;append(const string &amp;s, int pos, int n);</code></td>\n<td>字符串s中从pos开始取n个字符，连接到当前字符串的末尾</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/9/21 15:12</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string string1 = <span class=\"string\">&quot;Hello &quot;</span>;</span><br><span class=\"line\">    string1 += <span class=\"string\">&quot;World&quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;String1 = &quot;</span> &lt;&lt; string1 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string2 = <span class=\"string\">&quot;Hi &quot;</span>;</span><br><span class=\"line\">    string2 += string1;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;String2 = &quot;</span> &lt;&lt; string2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string3 = <span class=\"string\">&quot;Age &quot;</span>;</span><br><span class=\"line\">    string3 += <span class=\"string\">&#x27;8&#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;String3 = &quot;</span> &lt;&lt; string3 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string4 = <span class=\"string\">&quot;Hello &quot;</span>;</span><br><span class=\"line\">    string4.<span class=\"built_in\">append</span>(<span class=\"string\">&quot;World&quot;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;String4 = &quot;</span> &lt;&lt; string4 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string5 = <span class=\"string\">&quot;Hi &quot;</span>;</span><br><span class=\"line\">    string5.<span class=\"built_in\">append</span>(string4);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;String5 = &quot;</span> &lt;&lt; string5 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string6;</span><br><span class=\"line\">    string6.<span class=\"built_in\">append</span>(<span class=\"string\">&quot;Hello World&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;String6 = &quot;</span> &lt;&lt; string6 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string string7 = string5;</span><br><span class=\"line\">    string7.<span class=\"built_in\">append</span>(<span class=\"string\">&quot;Hello World&quot;</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;String7 = &quot;</span> &lt;&lt; string7 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-1-5-string查找替换\"><a href=\"#3-1-5-string查找替换\" class=\"headerlink\" title=\"3.1.5 string查找替换\"></a>3.1.5 string查找替换</h5><ul>\n<li><p>功能描述：</p>\n<ol>\n<li><p>查找：查找指定字符串是否存在</p>\n</li>\n<li><p>替换：在指定的位置替换字符串</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>int find(const string &amp;str, int pos = 0) const;</code></td>\n<td>查找str第一次出现的位置，默认pos从头开始</td>\n</tr>\n<tr>\n<td><code>int find(const char *s, int pos = 0) const;</code></td>\n<td>查找s第一次出现的位置，默认pos从头开始</td>\n</tr>\n<tr>\n<td><code>int find(const char *s, int pos, int n) const;</code></td>\n<td>从pos查找s的前n个字符第一次位置</td>\n</tr>\n<tr>\n<td><code>int find(const char *c, int pos = 0) const;</code></td>\n<td>查找字符c第一次出现位置</td>\n</tr>\n<tr>\n<td><code>int rfind(const string &amp;str, int pos = npos) const;</code></td>\n<td>查找str最后一次位置，从pos开始找</td>\n</tr>\n<tr>\n<td><code>int rfind(const char *s, int pos = npos) const;</code></td>\n<td>查找s最后一次位置，从pos开始找</td>\n</tr>\n<tr>\n<td><code>int rfind(const char *s, int pos, int n) const;</code></td>\n<td>从pos查找s的前n个字符最后一次位置</td>\n</tr>\n<tr>\n<td><code>int rfind(const char *c, int pos = 0) const;</code></td>\n<td>查找字符c最后一次出现位置</td>\n</tr>\n<tr>\n<td><code>string &amp;replace(int pos, int n, const string &amp;str) const;</code></td>\n<td>替换从pos开始n个字符为字符串str</td>\n</tr>\n<tr>\n<td><code>string &amp;replace(int pos, int n, const char *s) const;</code></td>\n<td>替换从pos开始n个字符为字符串s</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/9/21 15:46</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">findString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string string1 = <span class=\"string\">&quot;AABBCCBBAA&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> pos1 = string1.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;BB&quot;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;BB pos1 = &quot;</span> &lt;&lt; pos1 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> pos2 = string1.<span class=\"built_in\">rfind</span>(<span class=\"string\">&quot;BB&quot;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;BB pos2 = &quot;</span> &lt;&lt; pos2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">replaceString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string string1 = <span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\">    string1.<span class=\"built_in\">replace</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;String1 = &quot;</span> &lt;&lt; string1 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">findString</span>();</span><br><span class=\"line\">    <span class=\"built_in\">replaceString</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>总结：</p>\n<ul>\n<li><code>find</code>是从左往右查，<code>rfind</code>是从右往左查</li>\n<li><code>find</code>查到字符后，返回字符的位置，找不到返回-1</li>\n<li><code>replace</code>在替换时，需指定起始位置，替换字符数，替换字符</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-1-6-string字符比较\"><a href=\"#3-1-6-string字符比较\" class=\"headerlink\" title=\"3.1.6 string字符比较\"></a>3.1.6 string字符比较</h5><ul>\n<li><p>功能描述：字符串之间比较</p>\n</li>\n<li><p>比较方式：按照字符编码ACSII进行比较</p>\n<ul>\n<li><code>=</code> 返回 <code>0</code></li>\n<li><code>&gt;</code> 返回 <code>1</code></li>\n<li><code>&lt;</code> 返回 <code>-1</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>int compare(const string &amp;str) const;</code></td>\n<td>与字符串str比较</td>\n</tr>\n<tr>\n<td><code>int compare(const char *s) const;</code></td>\n<td>与字符串s比较</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/9/21 16:12</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string string1 = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    string string2 = <span class=\"string\">&quot;World&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (string1.<span class=\"built_in\">compare</span>(string2) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;string1 string2&quot;</span> &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;string1 string2&quot;</span> &lt;&lt; <span class=\"string\">&quot; != &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-1-7-string字符存取\"><a href=\"#3-1-7-string字符存取\" class=\"headerlink\" title=\"3.1.7 string字符存取\"></a>3.1.7 string字符存取</h5><ul>\n<li><p><code>string</code>中单个字符串存取方式有两种：</p>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>char &amp;operator[](int n);</code></td>\n<td>通过<code>[]</code>方式取字符</td>\n</tr>\n<tr>\n<td><code>char &amp;at(int n);</code></td>\n<td>通过<code>at</code>取字符</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/9/21 16:23</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">string string1 = <span class=\"string\">&quot;ABCDEFG&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; string1.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; string1[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; string1.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; string1.<span class=\"built_in\">at</span>(i) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-1-8-string插入删除\"><a href=\"#3-1-8-string插入删除\" class=\"headerlink\" title=\"3.1.8 string插入删除\"></a>3.1.8 string插入删除</h5><ul>\n<li><p>功能描述：对<code>string</code>字符串进行<code>插入</code>和<code>删除</code>字符操作</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>string &amp;insert(int pos, const char *s);</code></td>\n<td>插入字符串</td>\n</tr>\n<tr>\n<td><code>string &amp;insert(int pos, const string &amp;str);</code></td>\n<td>插入字符串</td>\n</tr>\n<tr>\n<td><code>string &amp;insert(int pos, int n, char c);</code></td>\n<td>在指定位置插入n个字符c</td>\n</tr>\n<tr>\n<td><code>string &amp;erase(int pos, int n = npos);</code></td>\n<td>删除从pos开始的n个字符</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/9/21 16:35</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demoInsert</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str1 = <span class=\"string\">&quot;Hello &quot;</span>;</span><br><span class=\"line\">    string str2 = <span class=\"string\">&quot;world &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    str1.<span class=\"built_in\">insert</span>(<span class=\"number\">6</span>, <span class=\"string\">&quot;world &quot;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    str1.<span class=\"built_in\">insert</span>(<span class=\"number\">12</span>, str2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    str1.<span class=\"built_in\">insert</span>(<span class=\"number\">18</span>, <span class=\"number\">6</span>, <span class=\"string\">&#x27;!&#x27;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demoDelete</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str3 = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">    str3.<span class=\"built_in\">erase</span>(<span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demoInsert</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demoDelete</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：插入<code>insert()</code>和删除<code>erase()</code>都是从下标0开始的</p>\n</li>\n</ul>\n<h5 id=\"3-1-9-string获取字串\"><a href=\"#3-1-9-string获取字串\" class=\"headerlink\" title=\"3.1.9 string获取字串\"></a>3.1.9 string获取字串</h5><ul>\n<li><p>功能描述：从字符串中获得想要的一段子字符串</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>string substr(int pos = 0, int n = npos) const;</code></td>\n<td>返回由pos开始的n个字符组成的字符串</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/5 14:59</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">subStringDemo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str1 = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    str1 = str1.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getEmailTypeInfo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str2 = <span class=\"string\">&quot;752972182@qq.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> pos = str2.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;@&quot;</span>);</span><br><span class=\"line\">    string str3 = str2.<span class=\"built_in\">substr</span>(pos + <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    str2 = str2.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, pos);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;str2 email user = &quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;str3 email type = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">subStringDemo</span>();</span><br><span class=\"line\">    <span class=\"built_in\">getEmailTypeInfo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-2-vector容器\"><a href=\"#3-2-vector容器\" class=\"headerlink\" title=\"3.2 vector容器\"></a>3.2 vector容器</h4><h5 id=\"3-2-1-vector基本概念\"><a href=\"#3-2-1-vector基本概念\" class=\"headerlink\" title=\"3.2.1 vector基本概念\"></a>3.2.1 vector基本概念</h5><ul>\n<li><p>功能：<code>vector</code>数据结构和<code>数组</code>非常相似，也称为<code>单端数组</code></p>\n</li>\n<li><p>与数组的区别：<code>数组</code>是静态空间，<code>vector</code>可以动态扩展</p>\n</li>\n<li><p>动态扩展：并非是在原有的空间后面，连续开辟新空间；而是在另一个更大的内存空间中<code>重新开辟</code>，并<code>拷贝</code>原来的容器数据，同时<code>释放原容器</code></p>\n</li>\n<li><p><code>vector</code>容器的迭代器是支持随机访问的迭代器</p>\n<table>\n<thead>\n<tr>\n<th>vector迭代器方法介绍 <code>vector&lt;T&gt; v;</code></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>v.rend();</code></td>\n<td>容器第一个元素之前的地址</td>\n</tr>\n<tr>\n<td><code>v.end();</code></td>\n<td>容器最后一个元素之后的地址</td>\n</tr>\n<tr>\n<td><code>v.begin();</code></td>\n<td>容器第一个元素自身的地址</td>\n</tr>\n<tr>\n<td><code>v.rbegin();</code></td>\n<td>容器最后一个元素之前的地址</td>\n</tr>\n<tr>\n<td><code>v.insert();</code></td>\n<td>容器中插入一个元素</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h5 id=\"3-2-2-vector构造函数\"><a href=\"#3-2-2-vector构造函数\" class=\"headerlink\" title=\"3.2.2 vector构造函数\"></a>3.2.2 vector构造函数</h5><ul>\n<li><p>功能描述：创建<code>vector</code>容器</p>\n<table>\n<thead>\n<tr>\n<th>函数原型 <code>vector&lt;T&gt; v;</code></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>vector&lt;T&gt; v;</code></td>\n<td>采用模板类实现，默认构造函数</td>\n</tr>\n<tr>\n<td><code>vector(v.begin(), v.end());</code></td>\n<td>将 <code>[ v.begin(), v.end() )</code> 之间的元素拷贝给自身<code> [闭 开)区间</code></td>\n</tr>\n<tr>\n<td><code>vector(n, elem);</code></td>\n<td>构造函数将 n个 元素拷贝给自身</td>\n</tr>\n<tr>\n<td><code>vector(const vector &amp;vec);</code></td>\n<td>拷贝构造函数</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/5 15:37</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认构造（无参）</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过 [ ) 构造</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(v1.begin(), v1.end())</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// n个 elem构造</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v3</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v4</span><span class=\"params\">(v1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-2-3-vector赋值操作\"><a href=\"#3-2-3-vector赋值操作\" class=\"headerlink\" title=\"3.2.3 vector赋值操作\"></a>3.2.3 vector赋值操作</h5><ul>\n<li><p>功能描述：给容器赋值</p>\n<table>\n<thead>\n<tr>\n<th>函数原型 <code>vector&lt;T&gt; v;</code></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>vetor &amp;operator=(const vector &amp;vec);</code></td>\n<td>重载<code>=</code> 操作符</td>\n</tr>\n<tr>\n<td><code>v.assign(v.begin, v.end);</code></td>\n<td>将 <code>[begin, end)</code>区间中的数据拷贝到自身</td>\n</tr>\n<tr>\n<td><code>v.assign(n, elem);</code></td>\n<td>将 n个 elem拷贝赋值给自身</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/5 16:08</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v2 = v1;</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v3</span><span class=\"params\">(v1.begin(), v1.end())</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v4</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-2-4-vector容量大小\"><a href=\"#3-2-4-vector容量大小\" class=\"headerlink\" title=\"3.2.4 vector容量大小\"></a>3.2.4 vector容量大小</h5><ul>\n<li><p>功能描述：对<code>vector</code>容器的容量和大小进行操作</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>empty();</code></td>\n<td>判断容器是否为空</td>\n</tr>\n<tr>\n<td><code>capacity();</code></td>\n<td>获取容器的容量</td>\n</tr>\n<tr>\n<td><code>size();</code></td>\n<td>获取容器中的元素个数</td>\n</tr>\n<tr>\n<td><code>resize(int num);</code></td>\n<td>重新指定容器长度，若变长，默认填充；若变短，删除末尾超出容器长度的元素</td>\n</tr>\n<tr>\n<td><code>resize(int num, elem);</code></td>\n<td>重新指定容器长度，若变长，elem填充；若变短，删除末尾超出容器长度的元素</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/5 16:18</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v1.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;v1 is empty&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;v1 not empty&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;v1 size = &quot;</span> &lt;&lt; v1.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;v1 capacity = &quot;</span> &lt;&lt; v1.<span class=\"built_in\">capacity</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    v1.<span class=\"built_in\">resize</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    v1.<span class=\"built_in\">resize</span>(<span class=\"number\">15</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    v1.<span class=\"built_in\">resize</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-2-5-vector插入删除\"><a href=\"#3-2-5-vector插入删除\" class=\"headerlink\" title=\"3.2.5 vector插入删除\"></a>3.2.5 vector插入删除</h5><ul>\n<li><p>功能描述：对<code>vector</code>容器进行插入、删除操作</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push_back(elem);</code></td>\n<td>尾部插入元素 <code>elem</code></td>\n</tr>\n<tr>\n<td><code>pop_back();</code></td>\n<td>删除最后一个元素</td>\n</tr>\n<tr>\n<td><code>insert(const_iterator pos, elem);</code></td>\n<td>迭代器指向位置<code>pos</code>，插入元素<code>elem</code></td>\n</tr>\n<tr>\n<td><code>insert(const_iterator pos, int count, elem);</code></td>\n<td>迭代器指向位置<code>pos</code>，插入<code>count</code>个元素<code>elem</code></td>\n</tr>\n<tr>\n<td><code>erase(const_iterator pos);</code></td>\n<td>删除迭代器指向位置<code>pos</code>的元素</td>\n</tr>\n<tr>\n<td><code>erase(const_iterator start, const_iterator end);</code></td>\n<td>删除迭代器选择的<code>start</code>到<code>end</code>之间的元素</td>\n</tr>\n<tr>\n<td><code>clear();</code></td>\n<td>清空容器</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/10 15:56</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator iterator = v.<span class=\"built_in\">begin</span>(); iterator != v.<span class=\"built_in\">end</span>(); ++iterator)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *iterator &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 尾插入</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v1;</span><br><span class=\"line\">    v1.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    v1.<span class=\"built_in\">push_back</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    v1.<span class=\"built_in\">push_back</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    v1.<span class=\"built_in\">push_back</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    v1.<span class=\"built_in\">push_back</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 尾删除</span></span><br><span class=\"line\">    v1.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代器指定位置插入</span></span><br><span class=\"line\">    v1.<span class=\"built_in\">insert</span>(v1.<span class=\"built_in\">begin</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代器指定位置插入 指定数量 元素</span></span><br><span class=\"line\">    v1.<span class=\"built_in\">insert</span>(v1.<span class=\"built_in\">end</span>(), <span class=\"number\">3</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除迭代器指向位置的元素</span></span><br><span class=\"line\">    v1.<span class=\"built_in\">erase</span>(v1.<span class=\"built_in\">end</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除迭代器选择的start到end之间的元素</span></span><br><span class=\"line\">    v1.<span class=\"built_in\">erase</span>(v1.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, v1.<span class=\"built_in\">end</span>() - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// clear</span></span><br><span class=\"line\">    v1.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-2-6-vector数据存取\"><a href=\"#3-2-6-vector数据存取\" class=\"headerlink\" title=\"3.2.6 vector数据存取\"></a>3.2.6 vector数据存取</h5><ul>\n<li><p>功能描述：<code>vector</code>中的数据存取操作</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>at(int index);</code></td>\n<td>返回索引<code>index</code>所指的数据</td>\n</tr>\n<tr>\n<td><code>operator[];</code></td>\n<td>返回索引<code>index</code>所指的数据</td>\n</tr>\n<tr>\n<td><code>front();</code></td>\n<td>返回容器中第一个数据元素</td>\n</tr>\n<tr>\n<td><code>back();</code></td>\n<td>返回容器中最后一个数据元素</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/10 16:20</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; v[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; v.<span class=\"built_in\">at</span>(i) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Vector Front Elem: &quot;</span> &lt;&lt; v.<span class=\"built_in\">front</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Vector Back Elem: &quot;</span> &lt;&lt; v.<span class=\"built_in\">back</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-2-7-vector互换容器\"><a href=\"#3-2-7-vector互换容器\" class=\"headerlink\" title=\"3.2.7 vector互换容器\"></a>3.2.7 vector互换容器</h5><ul>\n<li><p>功能描述：实现两个容器内元素的互换</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>swap(otherVector);</code></td>\n<td>将otherVector与本身的元素互换</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/10 16:30</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">debugVector</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">debugVectorInfo</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Vector Capacity: &quot;</span> &lt;&lt; v.<span class=\"built_in\">capacity</span>() &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Vector Size: &quot;</span> &lt;&lt; v.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v1;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">5</span>; i &gt; <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v2.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    v1.<span class=\"built_in\">swap</span>(v2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">debugVector</span>(v1);</span><br><span class=\"line\">    <span class=\"built_in\">debugVector</span>(v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v3;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v3.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">debugVectorInfo</span>(v3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 巧用 swap() 收缩容器的容量大小0</span></span><br><span class=\"line\">    v3.<span class=\"built_in\">resize</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(v3).<span class=\"built_in\">swap</span>(v3);</span><br><span class=\"line\">    <span class=\"built_in\">debugVectorInfo</span>(v3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：swap还可以收缩容器的容量大小</p>\n</li>\n</ul>\n<h5 id=\"3-2-8-vector预留空间\"><a href=\"#3-2-8-vector预留空间\" class=\"headerlink\" title=\"3.2.8 vector预留空间\"></a>3.2.8 vector预留空间</h5><ul>\n<li><p>功能描述：减少<code>vector</code>在动态扩展容器时的扩展次数</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>reserve(int length);</code></td>\n<td>容器预留<code>length</code>个元素长度，预留位置不初始化，元素不可访问</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/10 16:54</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p != &amp;v[<span class=\"number\">0</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = &amp;v[<span class=\"number\">0</span>];</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Number Of Extensions: &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">    v.<span class=\"built_in\">reserve</span>(<span class=\"number\">10000001</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p != &amp;v[<span class=\"number\">0</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = &amp;v[<span class=\"number\">0</span>];</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Reserve Number Of Extensions: &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：如果一开始容器需要插入足够大的数据时，可以通过<code>reserve</code>的方式提前预留，已减少容器扩展的次数</p>\n</li>\n</ul>\n<h4 id=\"3-3-deque容器\"><a href=\"#3-3-deque容器\" class=\"headerlink\" title=\"3.3 deque容器\"></a>3.3 deque容器</h4><h5 id=\"3-3-1-deque基本概念\"><a href=\"#3-3-1-deque基本概念\" class=\"headerlink\" title=\"3.3.1 deque基本概念\"></a>3.3.1 deque基本概念</h5><ul>\n<li><p>功能：双端数组，可以对容器头端进行<code>插入</code>、<code>删除</code>操作</p>\n</li>\n<li><p><code>deque</code>与<code>vector</code>的区别：</p>\n<ol>\n<li><code>vector</code>头部插入、删除效率低，数据量越大，效率越低</li>\n<li><code>vector</code>访问元素比<code>deque</code>快，源于内部实现的区别</li>\n</ol>\n</li>\n<li><p><code>deque</code>功能介绍：</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push_front();</code></td>\n<td>头部插入</td>\n</tr>\n<tr>\n<td><code>pop_front();</code></td>\n<td>头部删除</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><code>deque</code>内部工作原理：</p>\n<ul>\n<li><code>deque</code>内部有一个<code>中控器</code>，维护每段<code>缓冲区</code>的内容，缓冲区存放真实数据</li>\n<li>中控器维护的是<code>缓冲区的地址</code>，使得<code>deque</code>在使用时，像是<code>连续的内存空间</code></li>\n<li><code>deque</code>容器的<code>迭代器</code>支持<code>随机访问</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-3-2-deque构造函数\"><a href=\"#3-3-2-deque构造函数\" class=\"headerlink\" title=\"3.3.2 deque构造函数\"></a>3.3.2 deque构造函数</h5><ul>\n<li><p>功能描述：<code>deque</code>容器构造</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>deque&lt;T&gt; dequeT;</code></td>\n<td>默认构造形式</td>\n</tr>\n<tr>\n<td><code>deque(begin, end);</code></td>\n<td>构造函数将 <code>[begin, end)</code>区间中的元素拷贝给自身</td>\n</tr>\n<tr>\n<td><code>deque(n, elem);</code></td>\n<td>构造函数将<code>n</code>个<code>elem</code>拷贝给自身</td>\n</tr>\n<tr>\n<td><code>deque(const deque &amp;deque);</code></td>\n<td>拷贝构造函数</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/14 12:27</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const 修饰 该容器为只可 读</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"type\">const</span> deque&lt;<span class=\"type\">int</span>&gt; &amp;otherDeque)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (deque&lt;<span class=\"type\">int</span>&gt;::const_iterator it = otherDeque.<span class=\"built_in\">begin</span>(); it != otherDeque.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 无参构造</span></span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; d1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        d1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(d1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 区间构造</span></span><br><span class=\"line\">    <span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">d2</span><span class=\"params\">(d1.begin(), d1.end())</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(d2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// n个元素构造</span></span><br><span class=\"line\">    <span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">d3</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(d3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">    <span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">d4</span><span class=\"params\">(d3)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(d4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：<code>deque</code>与<code>vector</code>相似，灵活使用即可</p>\n</li>\n</ul>\n<h5 id=\"3-3-3-deque赋值操作\"><a href=\"#3-3-3-deque赋值操作\" class=\"headerlink\" title=\"3.3.3 deque赋值操作\"></a>3.3.3 deque赋值操作</h5><ul>\n<li><p>功能描述：给<code>deque</code>容器赋值</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>deque &amp;operator=(const deque &amp;deque);</code></td>\n<td>重载等号操作</td>\n</tr>\n<tr>\n<td><code>assign(begin, end);</code></td>\n<td>将 <code>[begin, end)</code>区间中的数据拷贝赋值给本身</td>\n</tr>\n<tr>\n<td><code>assign(n, elem);</code></td>\n<td>将<code>n</code>个<code>elem</code>拷贝赋值给本身</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/14 13:13</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(deque&lt;<span class=\"type\">int</span>&gt; &amp;otherDeque)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (deque&lt;<span class=\"type\">int</span>&gt;::iterator it = otherDeque.<span class=\"built_in\">begin</span>(); it != otherDeque.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; deque1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deque1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// operator=</span></span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; deque2 = deque1;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// assign(begin, end)</span></span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; deque3;</span><br><span class=\"line\">    deque3.<span class=\"built_in\">assign</span>(deque1.<span class=\"built_in\">begin</span>(), deque1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// assign(n, elem)</span></span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; deque4;</span><br><span class=\"line\">    deque4.<span class=\"built_in\">assign</span>(<span class=\"number\">10</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-3-4-deque大小操作\"><a href=\"#3-3-4-deque大小操作\" class=\"headerlink\" title=\"3.3.4 deque大小操作\"></a>3.3.4 deque大小操作</h5><ul>\n<li><p>功能描述：对<code>deque</code>容器的大小进行操作</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>deque.empty();</code></td>\n<td>判断容器是否为空</td>\n</tr>\n<tr>\n<td><code>deque.size();</code></td>\n<td>获取容器中元素个数</td>\n</tr>\n<tr>\n<td><code>deque.resize(num);</code></td>\n<td>重新指定容器长度为<code>num</code>，容器过长以默认值填充，容器过短，删除末尾多余元素</td>\n</tr>\n<tr>\n<td><code>deque.resize(num, elem)</code></td>\n<td>重新指定容器长度为<code>num</code>，容器过长以<code>elem</code>填充，容器过短，删除末尾多余元素</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/17 15:17</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"type\">const</span> deque&lt;<span class=\"type\">int</span>&gt; &amp;otherDeque)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (deque&lt;<span class=\"type\">int</span>&gt;::const_iterator it = otherDeque.<span class=\"built_in\">begin</span>(); it != otherDeque.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 deque1</span></span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; deque1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deque1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断deque1是否为空，不为空，打印出容器大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (deque1.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;deque1 is empty&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;deque1 size: &quot;</span> &lt;&lt; deque1.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"comment\">// deque 没有容量的概念(capacity)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// deque1 大小重置</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">resize</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    deque1.<span class=\"built_in\">resize</span>(<span class=\"number\">15</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：</p>\n<ol>\n<li><code>deque</code>没有容量的概念</li>\n<li><code>empty</code>判断是否为空</li>\n<li><code>size</code>获取容器的大小</li>\n<li><code>resize</code>重置容器大小</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"3-3-5-deque插入删除\"><a href=\"#3-3-5-deque插入删除\" class=\"headerlink\" title=\"3.3.5 deque插入删除\"></a>3.3.5 deque插入删除</h5><ul>\n<li><p>功能描述：向<code>deque</code>容器插入和删除数据</p>\n</li>\n<li><p>函数原型：</p>\n<table>\n<thead>\n<tr>\n<th>两端插入caoz</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push_back(elem);</code></td>\n<td>容器尾部添加一个数据</td>\n</tr>\n<tr>\n<td><code>push_front(elem);</code></td>\n<td>容器头部插入一个数据</td>\n</tr>\n<tr>\n<td><code>pop_back();</code></td>\n<td>删除容器最后一个数据</td>\n</tr>\n<tr>\n<td><code>pop_front();</code></td>\n<td>删除容器开头一个数据</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>指定位置操作</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>insert(pos, elem);</code></td>\n<td>在<code>pos</code>位置插入一个<code>elem</code>元素的拷贝，返回新数据的位置</td>\n</tr>\n<tr>\n<td><code>insert(pos, n, elem);</code></td>\n<td>在<code>pos</code>位置插入<code>n</code>个<code>elem</code>元素的拷贝，无返回值</td>\n</tr>\n<tr>\n<td><code>insert(pos, begin, end);</code></td>\n<td>在<code>pos</code>位置插入<code>[begin, end)</code>区间的数据，无返回值</td>\n</tr>\n<tr>\n<td><code>clear();</code></td>\n<td>清空容器所有数据</td>\n</tr>\n<tr>\n<td><code>erase(begin, end);</code></td>\n<td>删除<code>[begin, end)</code>区间的数据，返回下一个数据的位置</td>\n</tr>\n<tr>\n<td><code>erase(pos);</code></td>\n<td>删除<code>pos</code>位置的数据，返回下一个数据的位置</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/17 15:38</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"type\">const</span> deque&lt;<span class=\"type\">int</span>&gt; &amp;otherDeque)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (deque&lt;<span class=\"type\">int</span>&gt;::const_iterator it = otherDeque.<span class=\"built_in\">begin</span>(); it != otherDeque.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; deque1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// push_back()</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    deque1.<span class=\"built_in\">push_back</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// push_front()</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">push_front</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    deque1.<span class=\"built_in\">push_front</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pop_back()</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pop_front()</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// insert(pos, elem)</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">insert</span>(deque1.<span class=\"built_in\">begin</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// insert(pos, n, elem)</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">insert</span>(deque1.<span class=\"built_in\">end</span>(), <span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// clear()</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deque1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// erase(begin, end)</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">erase</span>(deque1.<span class=\"built_in\">begin</span>(), deque1.<span class=\"built_in\">end</span>() - <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// erase(pos)</span></span><br><span class=\"line\">    deque1.<span class=\"built_in\">erase</span>(deque1.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-3-6-deque数据存取\"><a href=\"#3-3-6-deque数据存取\" class=\"headerlink\" title=\"3.3.6 deque数据存取\"></a>3.3.6 deque数据存取</h5><ul>\n<li><p>功能描述：的<code>deque</code>中的数据的存取操作</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>at(int index);</code></td>\n<td>返回索引<code>index</code>所指的数据</td>\n</tr>\n<tr>\n<td><code>operator[index];</code></td>\n<td>返回索引<code>index</code>所指的数据</td>\n</tr>\n<tr>\n<td><code>front();</code></td>\n<td>返回容器中第一个数据</td>\n</tr>\n<tr>\n<td><code>back();</code></td>\n<td>返回容器这最后一个数据</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/17 15:57</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"type\">const</span> deque&lt;<span class=\"type\">int</span>&gt; &amp;otherDeque)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (deque&lt;<span class=\"type\">int</span>&gt;::const_iterator it = otherDeque.<span class=\"built_in\">begin</span>(); it != otherDeque.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; deque1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deque1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// at(int index)</span></span><br><span class=\"line\">    cout &lt;&lt; deque1.<span class=\"built_in\">at</span>(<span class=\"number\">1</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// operator[]</span></span><br><span class=\"line\">    cout &lt;&lt; deque1[<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// front()</span></span><br><span class=\"line\">    cout &lt;&lt; deque1.<span class=\"built_in\">front</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// back()</span></span><br><span class=\"line\">    cout &lt;&lt; deque1.<span class=\"built_in\">back</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-3-7-deque容器排序\"><a href=\"#3-3-7-deque容器排序\" class=\"headerlink\" title=\"3.3.7 deque容器排序\"></a>3.3.7 deque容器排序</h5><ul>\n<li><p>功能描述：利用算法实现<code>deque</code>容器进行排序</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>sort(iterator begin, iterator end);</code></td>\n<td>对<code>begin, end</code>区间的数据进行排序</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/17 16:05</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"type\">const</span> deque&lt;<span class=\"type\">int</span>&gt; &amp;otherDeque)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (deque&lt;<span class=\"type\">int</span>&gt;::const_iterator it = otherDeque.<span class=\"built_in\">begin</span>(); it != otherDeque.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; deque1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">20</span>; i &gt; <span class=\"number\">0</span>; i -= <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deque1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(deque1.<span class=\"built_in\">begin</span>(), deque1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printDeque</span>(deque1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结：使用<code>sort</code>排序，需引入头文件<code>algorithm</code></p>\n</li>\n</ul>\n<h4 id=\"3-4-案例-评委打分\"><a href=\"#3-4-案例-评委打分\" class=\"headerlink\" title=\"3.4 案例-评委打分\"></a>3.4 案例-评委打分</h4><h5 id=\"3-4-1-案例描述\"><a href=\"#3-4-1-案例描述\" class=\"headerlink\" title=\"3.4.1 案例描述\"></a>3.4.1 案例描述</h5><ul>\n<li>5名选上ABCDE，10名评委分别对每一名选手打分，去除最高分和最低分，取平均分</li>\n</ul>\n<h5 id=\"3-4-2-实现步骤\"><a href=\"#3-4-2-实现步骤\" class=\"headerlink\" title=\"3.4.2 实现步骤\"></a>3.4.2 实现步骤</h5><ol>\n<li>创建5名选手，存入<code>vector</code>容器中</li>\n<li>遍历<code>vector</code>容器，获取每一名选手，使用<code>for</code>循环，把10名评委的打分存入<code>deque</code>容器中</li>\n<li><code>sort</code>算法对<code>deque</code>容器中分数排序，去除最高和最低分</li>\n<li><code>deque</code>容器遍历一遍，累加总分</li>\n<li>获取平均分</li>\n</ol>\n<h5 id=\"3-4-3-示例代码\"><a href=\"#3-4-3-示例代码\" class=\"headerlink\" title=\"3.4.3 示例代码\"></a>3.4.3 示例代码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/20 14:26</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Player</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string playerName;</span><br><span class=\"line\">    <span class=\"type\">int</span> playerScore;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Player</span>(string name, <span class=\"type\">int</span> score)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;playerName = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;playerScore = score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Test Code*/</span></span><br><span class=\"line\"><span class=\"comment\">/*void printVector(vector&lt;Player&gt; &amp;v_Player)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    for (vector&lt;Player&gt;::iterator it = v_Player.begin(); it != v_Player.end(); ++it)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        cout &lt;&lt; &quot;Name: &quot; &lt;&lt; (*it).playerName &lt;&lt; &quot; Score: &quot; &lt;&lt; (*it).playerScore &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    cout &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">void printPlayerScores(vector&lt;Player&gt; &amp;v_Player, deque&lt;int&gt; &amp;d_Scores)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    for (vector&lt;Player&gt;::iterator v_it = v_Player.begin(); v_it != v_Player.end(); ++v_it)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        cout &lt;&lt; v_it-&gt;playerName &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">        for (deque&lt;int&gt;::iterator d_it = d_Scores.begin(); d_it != d_Scores.end(); ++d_it)</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; *d_it &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        cout &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Program Code*/</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;Player&gt; <span class=\"title\">createPlayers</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\">    string nameSeed = <span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\">    vector&lt;Player&gt; v_Player;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string name = <span class=\"string\">&quot;player&quot;</span>;</span><br><span class=\"line\">        name += nameSeed[i];</span><br><span class=\"line\">        <span class=\"function\">Player <span class=\"title\">player</span><span class=\"params\">(name, score)</span></span>;</span><br><span class=\"line\">        v_Player.<span class=\"built_in\">push_back</span>(player);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// printVector(v_Player);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v_Player;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">playerScoreSortAndDeal</span><span class=\"params\">(deque&lt;<span class=\"type\">int</span>&gt; &amp;d_Scores)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> averageScore;</span><br><span class=\"line\">    <span class=\"type\">int</span> allScore = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(d_Scores.<span class=\"built_in\">begin</span>(), d_Scores.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    d_Scores.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">    d_Scores.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (deque&lt;<span class=\"type\">int</span>&gt;::iterator it = d_Scores.<span class=\"built_in\">begin</span>(); it != d_Scores.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        allScore += (*it);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    averageScore = allScore / d_Scores.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averageScore;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setPlayerScore</span><span class=\"params\">(vector&lt;Player&gt; &amp;v_Player)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;Player&gt;::iterator it = v_Player.<span class=\"built_in\">begin</span>(); it != v_Player.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deque&lt;<span class=\"type\">int</span>&gt; d_Scores;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> score = (<span class=\"built_in\">rand</span>() % <span class=\"number\">71</span>) + <span class=\"number\">30</span>;</span><br><span class=\"line\">            d_Scores.<span class=\"built_in\">push_back</span>(score);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        it-&gt;playerScore = <span class=\"built_in\">playerScoreSortAndDeal</span>(d_Scores);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// printPlayerScores(v_Player, d_Scores);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPlayerAverageScore</span><span class=\"params\">(vector&lt;Player&gt; &amp;v_Player)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;Player&gt;::iterator it = v_Player.<span class=\"built_in\">begin</span>(); it != v_Player.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> + it-&gt;playerName &lt;&lt; <span class=\"string\">&quot; AverageScore: &quot;</span> &lt;&lt; it-&gt;playerScore &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>) <span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;Player&gt; v_Player = <span class=\"built_in\">createPlayers</span>();</span><br><span class=\"line\">    <span class=\"built_in\">setPlayerScore</span>(v_Player);</span><br><span class=\"line\">    <span class=\"built_in\">showPlayerAverageScore</span>(v_Player);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"3-5-stack容器\"><a href=\"#3-5-stack容器\" class=\"headerlink\" title=\"3.5 stack容器\"></a>3.5 stack容器</h4><h5 id=\"3-5-1-stack基本概念\"><a href=\"#3-5-1-stack基本概念\" class=\"headerlink\" title=\"3.5.1 stack基本概念\"></a>3.5.1 stack基本概念</h5><ul>\n<li>概念：<code>stack</code>是一种<code>先进后出(First In Last out : FILO)</code>的数据结构，它只有<code>一个出口</code></li>\n<li><code>栈底</code>存放<code>首个元素</code>，后续<code>其它元素</code>都在<code>栈顶</code>依次加入</li>\n<li>栈中的元素，只有<code>栈顶的元素</code>可以<code>被外界使用</code>，也因此<code>不支持遍历</code>的行为</li>\n<li><code>push()</code>入栈，<code>pop()</code>出栈，<code>empty()</code>判断栈是否为空，<code>size()</code>获取栈大小</li>\n</ul>\n<h5 id=\"3-5-2-stack常用接口\"><a href=\"#3-5-2-stack常用接口\" class=\"headerlink\" title=\"3.5.2 stack常用接口\"></a>3.5.2 stack常用接口</h5><ul>\n<li><p>功能描述：栈容器常用的对外口</p>\n</li>\n<li><p>构造函数：</p>\n<ul>\n<li><code>stack&lt;T&gt; stk;</code> 采用<code>模板类</code>实现，<code>stack</code>对象的默认构造形式</li>\n<li><code>stack(const stack &amp;stk);</code> 拷贝构造函数</li>\n</ul>\n</li>\n<li><p>赋值操作：</p>\n<ul>\n<li><code>stack &amp;operator=(const stack &amp;stk);</code> 重载等号操作</li>\n</ul>\n</li>\n<li><p>数据存取：</p>\n<ul>\n<li><code>push(elem);</code> 向栈顶添加元素</li>\n<li><code>pop();</code> 移除栈顶的元素</li>\n<li><code>top();</code> 返回栈顶的元素</li>\n</ul>\n</li>\n<li><p>大小操作：</p>\n<ul>\n<li><code>empty();</code> 判断栈是否为空</li>\n<li><code>size()</code> 获取栈大小</li>\n</ul>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/20 16:13</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; stk;</span><br><span class=\"line\"></span><br><span class=\"line\">    stk.<span class=\"built_in\">push</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    stk.<span class=\"built_in\">push</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">    stk.<span class=\"built_in\">push</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stk.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Stack Size: &quot;</span> &lt;&lt; stk.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Stack Top Element: &quot;</span> &lt;&lt; stk.<span class=\"built_in\">top</span>() &lt;&lt; endl;</span><br><span class=\"line\">        stk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Stack Size: &quot;</span> &lt;&lt; stk.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Stack Top Element: &quot;</span> &lt;&lt; stk.<span class=\"built_in\">top</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-6-queue容器\"><a href=\"#3-6-queue容器\" class=\"headerlink\" title=\"3.6 queue容器\"></a>3.6 queue容器</h4><h5 id=\"3-6-1-queue基本概念\"><a href=\"#3-6-1-queue基本概念\" class=\"headerlink\" title=\"3.6.1 queue基本概念\"></a>3.6.1 queue基本概念</h5><ul>\n<li>概念：<code>queue</code>是<code>先进先出(First In Frist Out : FIFO)</code>的数据结构，它有两个出口</li>\n<li>队列容器只能队尾加入元素，对头删除元素</li>\n<li>队列容器只有头和尾可被外界使用，因此不支持遍历行为</li>\n<li>队列中进数据：入队<code>push</code></li>\n<li>队列中出数据：出队<code>pop</code></li>\n</ul>\n<h5 id=\"3-6-2-queue常用接口\"><a href=\"#3-6-2-queue常用接口\" class=\"headerlink\" title=\"3.6.2 queue常用接口\"></a>3.6.2 queue常用接口</h5><ul>\n<li><p>功能描述：栈容器常用的对外接口</p>\n</li>\n<li><p>构造函数：</p>\n<ul>\n<li><code>queue&lt;T&gt; que;</code> 采用<code>模板类</code>实现，<code>queue</code>对象的默认构造形式</li>\n<li><code>queue(const queue &amp;que);</code> 拷贝构造函数</li>\n</ul>\n</li>\n<li><p>赋值操作：</p>\n<ul>\n<li><code>queue&amp;operator=(const queue &amp;que);</code> 重载等号操作</li>\n</ul>\n</li>\n<li><p>数据存取：</p>\n<ul>\n<li><code>push(elem);</code> 向队尾添加元素</li>\n<li><code>pop();</code> 移除队头元素</li>\n<li><code>back();</code> 返回最后一个元素</li>\n<li><code>front();</code> 返回第一个元素</li>\n</ul>\n</li>\n<li><p>大小操作：</p>\n<ul>\n<li><code>empty();</code> 判断栈是否为空</li>\n<li><code>size()</code> 获取栈大小</li>\n</ul>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/20 16:37</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(string name, <span class=\"type\">int</span> age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;Person&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">&quot;QQ&quot;</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">&quot;WW&quot;</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">&quot;EE&quot;</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">&quot;RR&quot;</span>, <span class=\"number\">40</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(p1);</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(p2);</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(p3);</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(p4);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Queue Size: &quot;</span> &lt;&lt; q.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Front Name: &quot;</span> + q.<span class=\"built_in\">front</span>().name + <span class=\"string\">&quot; Front Age: &quot;</span> &lt;&lt; q.<span class=\"built_in\">front</span>().age &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Back Name: &quot;</span> + q.<span class=\"built_in\">back</span>().name + <span class=\"string\">&quot; Back Age: &quot;</span> &lt;&lt; q.<span class=\"built_in\">back</span>().age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Queue Size: &quot;</span> &lt;&lt; q.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-7-list容器\"><a href=\"#3-7-list容器\" class=\"headerlink\" title=\"3.7 list容器\"></a>3.7 list容器</h4><h5 id=\"3-7-1-list基本概念\"><a href=\"#3-7-1-list基本概念\" class=\"headerlink\" title=\"3.7.1 list基本概念\"></a>3.7.1 list基本概念</h5><ul>\n<li><p>功能：将数据进行<code>链式</code>存储</p>\n</li>\n<li><p>链表：是一种<code>物理存储单元</code>上<code>非连续</code>的存储结构，数据元素的<code>逻辑顺序</code>是通过链表中的<code>指针链</code>实现的</p>\n</li>\n<li><p>链表的组成：链表由一系列<code>结点</code>组成</p>\n</li>\n<li><p>结点的组成：一个是存储数据元素的<code>数据域</code>，另一个是存储下一个结点地址的<code>指针域</code></p>\n</li>\n<li><p>STL中的链表是一个<code>双向循环链表</code></p>\n</li>\n<li><p>优点：可以对任意位置进行快速插入或删除元素</p>\n</li>\n<li><p>缺点：</p>\n<ul>\n<li>链表容器遍历元素比数组慢</li>\n<li>占用空间比数组大</li>\n</ul>\n</li>\n<li><p>STL链表的结构：<code>双向循环链表</code></p>\n</li>\n<li><p>结点：</p>\n<ul>\n<li><code>data区</code>：存储数据</li>\n<li><code>pionter区</code>：(默认指向null，则是<code>不循环双向链表</code>)<ul>\n<li><code>prev</code>：指向上一个结点的首地址(第一个结点默认指向最后一个结点的首地址)</li>\n<li><code>next</code>：指向下一个结点的首地址(最后一个结点默认指向第一个结点的首地址)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方法：</p>\n<ul>\n<li><code>push_front()</code>：添加一个新结点做为首结点</li>\n<li><code>pop_front()</code>：删除首结点</li>\n<li><code>push_back()</code>：添加一个新结点做为尾结点</li>\n<li><code>pop_back()</code>：删除尾结点</li>\n</ul>\n</li>\n<li><p>迭代器：</p>\n<ul>\n<li><code>begin()</code>：获得首结点的地址</li>\n<li><code>insert()</code>：获得指定的结点的地址</li>\n<li><code>end()</code>：获得尾结点的地址</li>\n</ul>\n</li>\n<li><p>补充：由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<code>双向迭代器</code></p>\n</li>\n<li><p>list的优点：</p>\n<ul>\n<li>采用动态存储分配，不会造成内存浪费和溢出</li>\n<li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li>\n</ul>\n</li>\n<li><p>list的缺点：</p>\n<ul>\n<li>链表的灵活带来的是空间(指针域)和时间(遍历)的额外消费较大</li>\n</ul>\n</li>\n<li><p>list的重要性质：插入和删除操作都不会造成原有list容器迭代器的失效(vector中会失效)</p>\n</li>\n<li><p>总结：STL中的<code>lsit</code>和<code>vector</code>是两个常用的容器，各有优缺点</p>\n</li>\n</ul>\n<h5 id=\"3-7-2-list构造函数\"><a href=\"#3-7-2-list构造函数\" class=\"headerlink\" title=\"3.7.2 list构造函数\"></a>3.7.2 list构造函数</h5><ul>\n<li><p>功能描述：创建<code>list</code>容器</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>list&lt;T&gt; list;</code></td>\n<td>list采用模板类实现，对象的默认构造函数形式</td>\n</tr>\n<tr>\n<td><code>list(begin, end);</code></td>\n<td>构造函数将<code>[begin, end)</code>区间中的元素拷贝给自身</td>\n</tr>\n<tr>\n<td><code>list(n, elem);</code></td>\n<td>构造函数将<code>n</code>个<code>elem</code>拷贝给自身</td>\n</tr>\n<tr>\n<td><code>list(const list &amp;list);</code></td>\n<td>拷贝构造函数</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/27 14:37</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"type\">const</span> list&lt;<span class=\"type\">int</span>&gt; &amp;otherList)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (list&lt;<span class=\"type\">int</span>&gt;::const_iterator it = otherList.<span class=\"built_in\">begin</span>(); it != otherList.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    list&lt;<span class=\"type\">int</span>&gt; list1;</span><br><span class=\"line\">    list1.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    list1.<span class=\"built_in\">push_back</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    list1.<span class=\"built_in\">push_back</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    list1.<span class=\"built_in\">push_back</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 区间构造</span></span><br><span class=\"line\">    <span class=\"function\">list&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">list2</span><span class=\"params\">(list1.begin(), list1.end())</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">    <span class=\"function\">list&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">list3</span><span class=\"params\">(list2)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// n 个 elem</span></span><br><span class=\"line\">    <span class=\"function\">list&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">list4</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-7-3-list赋值交换\"><a href=\"#3-7-3-list赋值交换\" class=\"headerlink\" title=\"3.7.3 list赋值交换\"></a>3.7.3 list赋值交换</h5><ul>\n<li><p>功能描述：给<code>list</code>容器进行赋值，以及容器<code>list</code>交换</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>assign(begin, end);</code></td>\n<td>将<code>[begin, end)</code>区间中的数据拷贝赋值给自身</td>\n</tr>\n<tr>\n<td><code>assign(n, elem);</code></td>\n<td><code>n</code>个<code>elem</code>拷贝赋值给自身</td>\n</tr>\n<tr>\n<td><code>list &amp;operator=(const list &amp;list);</code></td>\n<td>重载<code>=</code>操作符</td>\n</tr>\n<tr>\n<td><code>swap(list);</code></td>\n<td>将<code>list</code>与自身的元素互换</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/27 14:49</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"type\">const</span> list&lt;<span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (list&lt;<span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Demo1 &gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"function\">list&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">l1</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// operator=</span></span><br><span class=\"line\">    list&lt;<span class=\"type\">int</span>&gt; l2 = l1;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// assign(begin, end)</span></span><br><span class=\"line\">    list&lt;<span class=\"type\">int</span>&gt; l3;</span><br><span class=\"line\">    l3.<span class=\"built_in\">assign</span>(l1.<span class=\"built_in\">begin</span>(), l1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// assign(n, elem)</span></span><br><span class=\"line\">    list&lt;<span class=\"type\">int</span>&gt; l4;</span><br><span class=\"line\">    l4.<span class=\"built_in\">assign</span>(<span class=\"number\">4</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Demo2 &gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"function\">list&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">list1</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">list&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">list2</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">9</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Swap List Before &gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list1);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list2);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Swap List Last &gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    list1.<span class=\"built_in\">swap</span>(list2);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list1);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-7-4-list大小操作\"><a href=\"#3-7-4-list大小操作\" class=\"headerlink\" title=\"3.7.4 list大小操作\"></a>3.7.4 list大小操作</h5><ul>\n<li><p>功能描述：对<code>list</code>容器的大小进行操作</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>size();</code></td>\n<td>返回容器中元素个数</td>\n</tr>\n<tr>\n<td><code>empty();</code></td>\n<td>判断容器是否为空</td>\n</tr>\n<tr>\n<td><code>resize();</code></td>\n<td>重新指定容器长度为<code>num</code>，容器过长以默认值填充，容器过短，删除末尾多余元素</td>\n</tr>\n<tr>\n<td><code>resize(num, elem);</code></td>\n<td>重新指定容器长度为<code>num</code>，容器过长以<code>elem</code>填充，容器过短，删除末尾多余元素</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/27 15:06</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"type\">const</span> list&lt;<span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (list&lt;<span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">list&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">list1</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list1.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;List1 Is Empty&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;List1 Size: &quot;</span> &lt;&lt; list1.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    list1.<span class=\"built_in\">resize</span>(<span class=\"number\">10</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list1);</span><br><span class=\"line\"></span><br><span class=\"line\">    list1.<span class=\"built_in\">resize</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-7-5-list插入删除\"><a href=\"#3-7-5-list插入删除\" class=\"headerlink\" title=\"3.7.5 list插入删除\"></a>3.7.5 list插入删除</h5><ul>\n<li><p>功能描述：对<code>list</code>容器进行数据的插入和删除</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push_back(elem);</code></td>\n<td>在容器尾部加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop_back();</code></td>\n<td>删除容器中最后一个元素</td>\n</tr>\n<tr>\n<td><code>push_front(elem);</code></td>\n<td>在容器开头加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop_front();</code></td>\n<td>删除容器开头的一个元素</td>\n</tr>\n<tr>\n<td><code>insert(pos, elem);</code></td>\n<td>在<code>pos</code>的位置插入<code>elem</code>元素的拷贝，返回新数据的位置</td>\n</tr>\n<tr>\n<td><code>insert(pos, n, elem);</code></td>\n<td>在<code>pos</code>位置插入<code>n</code>个<code>elem</code>元素，无返回值</td>\n</tr>\n<tr>\n<td><code>insert(pos, begin, end);</code></td>\n<td>在<code>pos</code>位置插入<code>[begin, end)</code>区间的数据，无返回值</td>\n</tr>\n<tr>\n<td><code>clear();</code></td>\n<td>移除容器中所有的元素</td>\n</tr>\n<tr>\n<td><code>erase(begin, end);</code></td>\n<td>删除<code>[begin, end)</code>区间的数据，返回下一个数据的位置</td>\n</tr>\n<tr>\n<td><code>erase(pos);</code></td>\n<td>删除<code>pos</code>位置的数据，返回下一个数据的位置</td>\n</tr>\n<tr>\n<td><code>remove(elem);</code></td>\n<td>删除容器中所有与<code>elem</code>元素匹配的元素</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/29 14:54</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"type\">const</span> list&lt;<span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (list&lt;<span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    list&lt;<span class=\"type\">int</span>&gt; l1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// push_back()</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// push_front()</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;<span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l1.<span class=\"built_in\">push_front</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pop_back()</span></span><br><span class=\"line\">    l1.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pop_front()</span></span><br><span class=\"line\">    l1.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// insert(pos, elem)</span></span><br><span class=\"line\">    l1.<span class=\"built_in\">insert</span>(l1.<span class=\"built_in\">begin</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// insert(pos, n, elem)</span></span><br><span class=\"line\">    l1.<span class=\"built_in\">insert</span>(l1.<span class=\"built_in\">end</span>(), <span class=\"number\">3</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// insert(pos, begin, end);</span></span><br><span class=\"line\">    <span class=\"function\">list&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">l2</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">9</span>)</span></span>;</span><br><span class=\"line\">    l1.<span class=\"built_in\">insert</span>(l1.<span class=\"built_in\">end</span>(), l2.<span class=\"built_in\">begin</span>(), l2.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// erase(pos)</span></span><br><span class=\"line\">    l1.<span class=\"built_in\">erase</span>(++l1.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// remove(elem)</span></span><br><span class=\"line\">    l1.<span class=\"built_in\">remove</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// clear()</span></span><br><span class=\"line\">    l1.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    l1.<span class=\"built_in\">push_front</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-7-6-list数据存取\"><a href=\"#3-7-6-list数据存取\" class=\"headerlink\" title=\"3.7.6 list数据存取\"></a>3.7.6 list数据存取</h5><ul>\n<li><p>功能描述：对<code>list</code>容器数据进行存取</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>front();</code></td>\n<td>返回第一个元素</td>\n</tr>\n<tr>\n<td><code>back();</code></td>\n<td>返回最后一个元素</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>补充：<code>list&lt;int&gt; l1;</code></p>\n<ul>\n<li><code>l1[0];</code></li>\n<li><code>l1.at(0);</code></li>\n<li>原因：<code>list</code>容器本质是<code>链表</code>，空间不连续，无法使用数组下标的方式获得数值，<code>迭代器</code>也不支持随机访问</li>\n</ul>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/29 15:33</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"type\">const</span> list&lt;<span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (list&lt;<span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    list&lt;<span class=\"type\">int</span>&gt; l1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;l1 first&gt;&gt; &quot;</span> &lt;&lt; l1.<span class=\"built_in\">front</span>() &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;l1 back&gt;&gt; &quot;</span> &lt;&lt; l1.<span class=\"built_in\">back</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 双向访问</span></span><br><span class=\"line\">    list&lt;<span class=\"type\">int</span>&gt;::iterator it1 = ++l1.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">    list&lt;<span class=\"type\">int</span>&gt;::iterator it2 = --l1.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    l1.<span class=\"built_in\">erase</span>(it1, it2);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(l1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-7-7-list容器排序\"><a href=\"#3-7-7-list容器排序\" class=\"headerlink\" title=\"3.7.7 list容器排序\"></a>3.7.7 list容器排序</h5><ul>\n<li><p>功能描述：将容器中的元素反转，以及元素排序</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>reverse();</code></td>\n<td>反转链表</td>\n</tr>\n<tr>\n<td><code>sort();</code></td>\n<td>链表排序</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/29 15:54</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"type\">const</span> list&lt;<span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (list&lt;<span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">upSort</span><span class=\"params\">(<span class=\"type\">int</span> &amp;list1, <span class=\"type\">int</span> &amp;list2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list1 &gt; list2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    list&lt;<span class=\"type\">int</span>&gt; list1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        list1.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reverse()</span></span><br><span class=\"line\">    list1.<span class=\"built_in\">reverse</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// sort() -- 默认从小到大</span></span><br><span class=\"line\">    list1.<span class=\"built_in\">sort</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// sort() -- 改为从大到小</span></span><br><span class=\"line\">    list1.<span class=\"built_in\">sort</span>(upSort);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(list1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-8-案例-自定义数据排序\"><a href=\"#3-8-案例-自定义数据排序\" class=\"headerlink\" title=\"3.8 案例-自定义数据排序\"></a>3.8 案例-自定义数据排序</h4><ul>\n<li><p>案例描述：将<code>Person</code>自定义数据类型进行排序，<code>Person</code>中属性有：姓名，年龄，身高</p>\n</li>\n<li><p>排序规则：按照年龄进行升序<code>(年龄小的放在前面)</code>，如果年龄相同，按照身高进行降序<code>(身高低的放在前面)</code></p>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/29 16:15</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"type\">int</span> height;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">const</span> string &amp;name, <span class=\"type\">int</span> age, <span class=\"type\">int</span> height)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Debug</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printPersonList</span><span class=\"params\">(<span class=\"type\">const</span> list&lt;Person&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (list&lt;Person&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name:&quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class=\"string\">&quot; Age:&quot;</span> &lt;&lt; it-&gt;age &lt;&lt; <span class=\"string\">&quot; Height:&quot;</span> &lt;&lt; it-&gt;height &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">sortRule</span><span class=\"params\">(Person &amp;person1, Person &amp;person2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (person1.age == person2.age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person1.height &lt; person2.height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person1.age &lt; person2.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">list&lt;Person&gt; <span class=\"title\">createPersonList</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    list&lt;Person&gt; l1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person1</span><span class=\"params\">(<span class=\"string\">&quot;QQ&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">160</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person2</span><span class=\"params\">(<span class=\"string\">&quot;WW&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">150</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person3</span><span class=\"params\">(<span class=\"string\">&quot;EE&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">170</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person4</span><span class=\"params\">(<span class=\"string\">&quot;RR&quot;</span>, <span class=\"number\">70</span>, <span class=\"number\">175</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person5</span><span class=\"params\">(<span class=\"string\">&quot;TT&quot;</span>, <span class=\"number\">30</span>, <span class=\"number\">180</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    l1.<span class=\"built_in\">push_back</span>(person1);</span><br><span class=\"line\">    l1.<span class=\"built_in\">push_back</span>(person2);</span><br><span class=\"line\">    l1.<span class=\"built_in\">push_back</span>(person3);</span><br><span class=\"line\">    l1.<span class=\"built_in\">push_back</span>(person4);</span><br><span class=\"line\">    l1.<span class=\"built_in\">push_back</span>(person5);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printPersonList</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">upSort</span><span class=\"params\">(list&lt;Person&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;UpSort&gt;&gt; By Age And Height&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    other.<span class=\"built_in\">sort</span>(sortRule);</span><br><span class=\"line\">    <span class=\"built_in\">printPersonList</span>(other);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    list&lt;Person&gt; l1 = <span class=\"built_in\">createPersonList</span>();</span><br><span class=\"line\">    <span class=\"built_in\">upSort</span>(l1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-9-set-multiset容器\"><a href=\"#3-9-set-multiset容器\" class=\"headerlink\" title=\"3.9 set&#x2F;multiset容器\"></a>3.9 set&#x2F;multiset容器</h4><h5 id=\"3-9-1-set基本概念\"><a href=\"#3-9-1-set基本概念\" class=\"headerlink\" title=\"3.9.1 set基本概念\"></a>3.9.1 set基本概念</h5><ul>\n<li>简介：所有元素被插入时，容器都会进行一次自动排序</li>\n<li>本质：<code>set/multiset</code>属于<code>关联容器</code>，底层结构是<code>二叉树</code>实现</li>\n<li><code>set</code>和<code>multiset</code>的区别：<ul>\n<li><code>set</code>不允许容器中有重复的元素</li>\n<li><code>multiset</code>允许容器中有重复的元素</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-9-2-set构造赋值\"><a href=\"#3-9-2-set构造赋值\" class=\"headerlink\" title=\"3.9.2 set构造赋值\"></a>3.9.2 set构造赋值</h5><ul>\n<li><p>功能描述：创建<code>set</code>容器并赋值</p>\n<table>\n<thead>\n<tr>\n<th>构造</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>set&lt;T&gt; st;</code></td>\n<td>默认构造函数</td>\n</tr>\n<tr>\n<td><code>set(const set &amp;st);</code></td>\n<td>拷贝构造函数</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>赋值</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>set &amp;operator=(const set &amp;st);</code></td>\n<td>重载等号操作符</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/30 14:49</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"type\">const</span> set&lt;<span class=\"type\">int</span>&gt; &amp;st)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::const_iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; st1;</span><br><span class=\"line\">    <span class=\"comment\">// set 只能用 insert插入数据，且不插入重复数据</span></span><br><span class=\"line\">    <span class=\"comment\">// set 会自动排序插入的数据</span></span><br><span class=\"line\">    st1.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    st1.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    st1.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    st1.<span class=\"built_in\">insert</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    st1.<span class=\"built_in\">insert</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    st1.<span class=\"built_in\">insert</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 默认构造</span></span><br><span class=\"line\">    <span class=\"function\">set&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">st2</span><span class=\"params\">(st1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 赋值拷贝构造</span></span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; st3 = st1;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>总结：<code>set</code> 只能用 <code>insert</code>插入数据，且不插入重复数据</p>\n</li>\n</ul>\n<h5 id=\"3-9-3-set大小交换\"><a href=\"#3-9-3-set大小交换\" class=\"headerlink\" title=\"3.9.3 set大小交换\"></a>3.9.3 set大小交换</h5><ul>\n<li><p>功能描述：统计<code>set</code>容器大小，以及交换<code>set</code>容器</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>size();</code></td>\n<td>返回容器中元素个数</td>\n</tr>\n<tr>\n<td><code>empty();</code></td>\n<td>判断容器是否为空</td>\n</tr>\n<tr>\n<td><code>swap(st);</code></td>\n<td>交换两个容器的元素</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/30 15:00</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"type\">const</span> set&lt;<span class=\"type\">int</span>&gt; &amp;st)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::const_iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; st1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        st1.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (st1.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Set1 Is Empty&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Set1&gt;&gt;&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Set1 Size&gt;&gt;&quot;</span> &lt;&lt; st1.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; st1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        st1.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; st2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">9</span>; i &gt;= <span class=\"number\">5</span> ; --i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        st2.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Swap Before&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Set1&gt;&gt;&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Set2&gt;&gt;&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st2);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Swap Last&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    st1.<span class=\"built_in\">swap</span>(st2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Set1&gt;&gt;&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Set2&gt;&gt;&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-9-4-set插入删除\"><a href=\"#3-9-4-set插入删除\" class=\"headerlink\" title=\"3.9.4 set插入删除\"></a>3.9.4 set插入删除</h5><ul>\n<li><p>功能描述：<code>set</code>容器进行插入和删除数据</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>insert(elem);</code></td>\n<td>在容器中插入元素</td>\n</tr>\n<tr>\n<td><code>clear();</code></td>\n<td>清除所有元素</td>\n</tr>\n<tr>\n<td><code>erase(pos);</code></td>\n<td>删除迭代器<code>pos</code>所指的元素，返回下一个元素的迭代器</td>\n</tr>\n<tr>\n<td><code>erase(begin, end);</code></td>\n<td>删除<code>[begin, end)</code>区间内的元素，返回下一个元素的迭代器</td>\n</tr>\n<tr>\n<td><code>erase(elem);</code></td>\n<td>删除容器中的所有<code>elem</code>元素</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/30 15:14</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"type\">const</span> set&lt;<span class=\"type\">int</span>&gt; &amp;st)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::const_iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; st1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        st1.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// erase(pos)</span></span><br><span class=\"line\">    st1.<span class=\"built_in\">erase</span>(st1.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// erase(elem)</span></span><br><span class=\"line\">    st1.<span class=\"built_in\">erase</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// erase(begin, end);</span></span><br><span class=\"line\">    st1.<span class=\"built_in\">erase</span>(++st1.<span class=\"built_in\">begin</span>(), --st1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// clear()</span></span><br><span class=\"line\">    st1.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    st1.<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-9-5-set查找统计\"><a href=\"#3-9-5-set查找统计\" class=\"headerlink\" title=\"3.9.5 set查找统计\"></a>3.9.5 set查找统计</h5><ul>\n<li><p>功能描述：对容器内的元素进行查找和统计</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>find(key);</code></td>\n<td>查找<code>key</code>是否存在，存在则返回该元素的迭代器，不存在则返回<code>set.end();</code></td>\n</tr>\n<tr>\n<td><code>count(key);</code></td>\n<td>统计<code>key</code>的个数</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/30 15:25</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"type\">const</span> set&lt;<span class=\"type\">int</span>&gt; &amp;st)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::const_iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; st1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        st1.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// find(key)</span></span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt;::const_iterator it = st1.<span class=\"built_in\">find</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it != st1.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Set1 Find&gt;&gt;&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Set1 Not Find&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// count(key)</span></span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; st2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        st2.<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(st2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Set2 Count 0&gt;&gt;&quot;</span> &lt;&lt; st2.<span class=\"built_in\">count</span>(<span class=\"number\">0</span>) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-9-6-set-multiset区别\"><a href=\"#3-9-6-set-multiset区别\" class=\"headerlink\" title=\"3.9.6 set&#x2F;multiset区别\"></a>3.9.6 set&#x2F;multiset区别</h5><ul>\n<li><p>区别：</p>\n<ol>\n<li><code>set</code>不可以插入重复的元素，<code>multiset</code>可以</li>\n<li><code>set</code>插入数据同时返回插入结果，表示插入成功</li>\n<li><code>multiset</code>不会检查插入数据，所以可以重复插入</li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/30 15:58</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printMultiSet</span><span class=\"params\">(<span class=\"type\">const</span> multiset&lt;<span class=\"type\">int</span>&gt; &amp;multiset1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (multiset&lt;<span class=\"type\">int</span>&gt;::const_iterator it = multiset1.<span class=\"built_in\">begin</span>(); it != multiset1.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; set1;</span><br><span class=\"line\">    pair&lt;set&lt;<span class=\"type\">int</span>&gt;::iterator, <span class=\"type\">bool</span>&gt; pairResult;</span><br><span class=\"line\">    pairResult = set1.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;First&gt;&gt; &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pairResult.second)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Set1 Insert &quot;</span> &lt;&lt; <span class=\"string\">&quot;&lt;&quot;</span> &lt;&lt; *pairResult.first &lt;&lt; <span class=\"string\">&quot;&gt;&quot;</span> &lt;&lt; <span class=\"string\">&quot; Succeed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Set1 Insert &quot;</span> &lt;&lt; <span class=\"string\">&quot;&lt;&quot;</span> &lt;&lt; *pairResult.first &lt;&lt; <span class=\"string\">&quot;&gt;&quot;</span> &lt;&lt; <span class=\"string\">&quot; Error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pairResult = set1.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Second&gt;&gt; &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pairResult.second)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Set1 Insert &quot;</span> &lt;&lt; <span class=\"string\">&quot;&lt;&quot;</span> &lt;&lt; *pairResult.first &lt;&lt; <span class=\"string\">&quot;&gt;&quot;</span> &lt;&lt; <span class=\"string\">&quot; Succeed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Set1 Insert &quot;</span> &lt;&lt; <span class=\"string\">&quot;&lt;&quot;</span> &lt;&lt; *pairResult.first &lt;&lt; <span class=\"string\">&quot;&gt;&quot;</span> &lt;&lt; <span class=\"string\">&quot; Error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    multiset&lt;<span class=\"type\">int</span>&gt; multiset1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        multiset1.<span class=\"built_in\">insert</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printMultiSet</span>(multiset1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"built_in\">demo2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-9-7-pair对组创建\"><a href=\"#3-9-7-pair对组创建\" class=\"headerlink\" title=\"3.9.7 pair对组创建\"></a>3.9.7 pair对组创建</h5><ul>\n<li><p>功能描述：成对出现的数据组，利用对组可以返回两个数据</p>\n</li>\n<li><p>创建方式：</p>\n<ol>\n<li><code>pair&lt;type1, type2&gt; p(value1, value2);</code></li>\n<li><code>pair&lt;type1, type2&gt; p = make_pair(value1, value2);</code></li>\n</ol>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/30 16:18</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printPair</span><span class=\"params\">(<span class=\"type\">const</span> pair&lt;string, <span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; other.first &lt;&lt; <span class=\"string\">&quot; Age: &quot;</span> &lt;&lt; other.second &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">pair&lt;string, <span class=\"type\">int</span>&gt; <span class=\"title\">pair1</span><span class=\"params\">(<span class=\"string\">&quot;FF&quot;</span>, <span class=\"number\">22</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printPair</span>(pair1);</span><br><span class=\"line\"></span><br><span class=\"line\">    pair&lt;string, <span class=\"type\">int</span>&gt; pair2 = <span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;QQ&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printPair</span>(pair2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-9-8-set容器排序\"><a href=\"#3-9-8-set容器排序\" class=\"headerlink\" title=\"3.9.8 set容器排序\"></a>3.9.8 set容器排序</h5><ul>\n<li><p>默认排序：<code>set</code>容器<code>默认</code>排序是<code>从小到大</code></p>\n</li>\n<li><p>排序目标：掌握自定义排序规则</p>\n</li>\n<li><p>使用方法：利用<code>仿函数</code>，改变排序规则</p>\n</li>\n<li><p>代码示例一：<code>set</code>存放内置数据类型，从大到小排序</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/30 16:30</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownSort</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> value1, <span class=\"type\">int</span> value2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value1 &gt; value2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"type\">const</span> set&lt;<span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"type\">const</span> set&lt;<span class=\"type\">int</span>, DownSort&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; set1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        set1.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(set1);</span><br><span class=\"line\"></span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>, DownSort&gt; set2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        set2.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(set2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>代码示例二：自定义数据类型，从大到小排序</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/30 16:42</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(string name, <span class=\"type\">int</span> age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownSort</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">const</span> Person &amp;p1, <span class=\"type\">const</span> Person &amp;p2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1.age &gt; p2.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"type\">const</span> set&lt;Person, DownSort&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (set&lt;Person, DownSort&gt;::iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class=\"string\">&quot; Age: &quot;</span> &lt;&lt; it-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">&quot;QQ&quot;</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">&quot;WW&quot;</span>, <span class=\"number\">40</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">&quot;EE&quot;</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">&quot;RR&quot;</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    set&lt;Person, DownSort&gt; set1;</span><br><span class=\"line\">    set1.<span class=\"built_in\">insert</span>(p1);</span><br><span class=\"line\">    set1.<span class=\"built_in\">insert</span>(p2);</span><br><span class=\"line\">    set1.<span class=\"built_in\">insert</span>(p3);</span><br><span class=\"line\">    set1.<span class=\"built_in\">insert</span>(p4);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printSet</span>(set1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-10-map-multimap容器\"><a href=\"#3-10-map-multimap容器\" class=\"headerlink\" title=\"3.10 map&#x2F;multimap容器\"></a>3.10 map&#x2F;multimap容器</h4><h5 id=\"3-10-1-map基本概念\"><a href=\"#3-10-1-map基本概念\" class=\"headerlink\" title=\"3.10.1 map基本概念\"></a>3.10.1 map基本概念</h5><ul>\n<li>简介：<ul>\n<li><code>map</code>中所有的元素都是<code>pair</code></li>\n<li><code>pair</code>中第一个元素为<code>key(键值)</code>，起到索引作用，第二元素为<code>value(实值)</code></li>\n<li>所有元素都会根据元素的键值自动排序</li>\n</ul>\n</li>\n<li>本质：<ul>\n<li><code>map/multimap</code>属于<code>关联式容器</code>，底层结构是用<code>二叉树</code>实现</li>\n</ul>\n</li>\n<li>优点：<ul>\n<li>可以根据<code>key</code>值快速找到<code>value</code>值</li>\n</ul>\n</li>\n<li><code>map/multimap</code>的区别：<ul>\n<li><code>map</code>不允许有重复的元素</li>\n<li><code>multimap</code>允许重复的元素</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-10-2-map构造赋值\"><a href=\"#3-10-2-map构造赋值\" class=\"headerlink\" title=\"3.10.2 map构造赋值\"></a>3.10.2 map构造赋值</h5><ul>\n<li><p>功能描述：对map容器进行构造和赋值操作</p>\n<table>\n<thead>\n<tr>\n<th>构造</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>map&lt;T1, T2&gt; mp;</code></td>\n<td><code>map</code>默认构造函数</td>\n</tr>\n<tr>\n<td><code>map(const map &amp;mp);</code></td>\n<td>拷贝构造函数</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>赋值</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>map &amp;operator=(const map &amp;mp);</code></td>\n<td>重载等号操作符</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/10/31 16:34</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printMap</span><span class=\"params\">(<span class=\"type\">const</span> map&lt;<span class=\"type\">int</span>, string&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (map&lt;<span class=\"type\">int</span>, string&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;ID: &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; Name: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, string&gt; map1;</span><br><span class=\"line\"></span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, string&gt;(<span class=\"number\">1</span>, <span class=\"string\">&quot;QQ&quot;</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, string&gt;(<span class=\"number\">4</span>, <span class=\"string\">&quot;WW&quot;</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, string&gt;(<span class=\"number\">2</span>, <span class=\"string\">&quot;EE&quot;</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, string&gt;(<span class=\"number\">5</span>, <span class=\"string\">&quot;RR&quot;</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, string&gt;(<span class=\"number\">3</span>, <span class=\"string\">&quot;TT&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">    <span class=\"function\">map&lt;<span class=\"type\">int</span>, string&gt; <span class=\"title\">map2</span><span class=\"params\">(map1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 赋值</span></span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, string&gt; map3 = map1;</span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-10-3-map大小交换\"><a href=\"#3-10-3-map大小交换\" class=\"headerlink\" title=\"3.10.3 map大小交换\"></a>3.10.3 map大小交换</h5><ul>\n<li><p>功能描述：统计<code>map</code>容器大小以及交换<code>map</code>容器</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>size();</code></td>\n<td>返回容器中的元素的数目</td>\n</tr>\n<tr>\n<td><code>empty();</code></td>\n<td>判断容器是否为空</td>\n</tr>\n<tr>\n<td><code>swap(st);</code></td>\n<td>交换两个集合容器</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/11/13 15:12</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printMap</span><span class=\"params\">(<span class=\"type\">const</span> map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Key: &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; Value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; map1;</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map1.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Map1 Is Empty&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Map1 Size &quot;</span> &lt;&lt; map1.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; map2;</span><br><span class=\"line\">    map2.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">4</span>, <span class=\"number\">40</span>));</span><br><span class=\"line\">    map2.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">5</span>, <span class=\"number\">50</span>));</span><br><span class=\"line\">    map2.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">6</span>, <span class=\"number\">60</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    map1.<span class=\"built_in\">swap</span>(map2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map1);</span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-10-4-map插入删除\"><a href=\"#3-10-4-map插入删除\" class=\"headerlink\" title=\"3.10.4 map插入删除\"></a>3.10.4 map插入删除</h5><ul>\n<li><p>功能描述：<code>map</code>容器进行插入和删除操作</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>insert(pair&lt;type1, type2&gt;(key, value));</code></td>\n<td>在容器中插入元素</td>\n</tr>\n<tr>\n<td><code>clear();</code></td>\n<td>清空容器</td>\n</tr>\n<tr>\n<td><code>erase(pos);</code></td>\n<td>删除<code>pos</code>迭代器所指位置的元素，返回下一个元素的迭代器</td>\n</tr>\n<tr>\n<td><code>erase(begin, end);</code></td>\n<td>删除<code>[begin, end]</code>之间的元素，返回下一个元素的迭代器</td>\n</tr>\n<tr>\n<td><code>erase(key);</code></td>\n<td>删除<code>key</code>指定索引位置的元素</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/11/13 15:31</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printMap</span><span class=\"params\">(<span class=\"type\">const</span> map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">begin</span>(); it != other.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Key: &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; Value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; map1;</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::<span class=\"built_in\">value_type</span>(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不建议使用该方法插入，但可以通过这个方法利用 key 访问 value</span></span><br><span class=\"line\">    map1[<span class=\"number\">4</span>] = <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">5</span>, <span class=\"number\">50</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">6</span>, <span class=\"number\">60</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">7</span>, <span class=\"number\">70</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// map[5]在容器中不存在，所以默认直接在容器中添加了一个，默认value为0</span></span><br><span class=\"line\">    cout &lt;&lt; map1[<span class=\"number\">8</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map1);</span><br><span class=\"line\"></span><br><span class=\"line\">    map1.<span class=\"built_in\">erase</span>(map1.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map1);</span><br><span class=\"line\"></span><br><span class=\"line\">    map1.<span class=\"built_in\">erase</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map1);</span><br><span class=\"line\"></span><br><span class=\"line\">    map1.<span class=\"built_in\">erase</span>(++map1.<span class=\"built_in\">begin</span>(), --map1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map1);</span><br><span class=\"line\"></span><br><span class=\"line\">    map1.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-10-5-map查找统计\"><a href=\"#3-10-5-map查找统计\" class=\"headerlink\" title=\"3.10.5 map查找统计\"></a>3.10.5 map查找统计</h5><ul>\n<li><p>功能描述：对<code>map</code>容器进行查找数据以及数据统计</p>\n<table>\n<thead>\n<tr>\n<th>函数原型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>find(key);</code></td>\n<td>查找<code>key</code>是否存在，若存在返回<code>key</code>键的元素迭代器；不存在，返回<code>set.end();</code></td>\n</tr>\n<tr>\n<td><code>count(key);</code></td>\n<td>统计<code>key</code>的元素的个数</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/11/13 16:34</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printMap</span><span class=\"params\">(<span class=\"type\">const</span> map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">cbegin</span>(); it != other.<span class=\"built_in\">cend</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Key: &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; Value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; map1;</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::const_iterator itPos = map1.<span class=\"built_in\">find</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// map.end() 返回的是迭代器所指位置的 “下一个”迭代器的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itPos != map1.<span class=\"built_in\">cend</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Key: &quot;</span> &lt;&lt; itPos-&gt;first &lt;&lt; <span class=\"string\">&quot; Value: &quot;</span> &lt;&lt; itPos-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;End Key: &quot;</span> &lt;&lt; map1.<span class=\"built_in\">cend</span>()-&gt;first &lt;&lt; <span class=\"string\">&quot; End Value: &quot;</span> &lt;&lt; map1.<span class=\"built_in\">cend</span>()-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Can Find Key&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">90</span>));</span><br><span class=\"line\">    <span class=\"type\">int</span> count = map1.<span class=\"built_in\">count</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;End Key: &quot;</span> &lt;&lt; map1.<span class=\"built_in\">cend</span>()-&gt;first &lt;&lt; <span class=\"string\">&quot; End Value: &quot;</span> &lt;&lt; map1.<span class=\"built_in\">cend</span>()-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; count &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"3-10-6-map容器排序\"><a href=\"#3-10-6-map容器排序\" class=\"headerlink\" title=\"3.10.6 map容器排序\"></a>3.10.6 map容器排序</h5><ul>\n<li><p>目标：</p>\n<ol>\n<li><code>map</code>容器默认排序规则，按照<code>key</code>值进行，从小到大的排序</li>\n<li>掌握自定义排序规则</li>\n</ol>\n</li>\n<li><p>主要技术点：利用仿函数，改变排序规则</p>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/11/13 18:08</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownSort</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> value1, <span class=\"type\">int</span> value2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value1 &gt; value2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printMap</span><span class=\"params\">(<span class=\"type\">const</span> map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, DownSort&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::const_iterator it = other.<span class=\"built_in\">cbegin</span>(); it != other.<span class=\"built_in\">cend</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Key: &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; Value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, DownSort&gt; map1;</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">4</span>, <span class=\"number\">40</span>));</span><br><span class=\"line\">    map1.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">5</span>, <span class=\"number\">50</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printMap</span>(map1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">demo</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-11-案例-员工分组\"><a href=\"#3-11-案例-员工分组\" class=\"headerlink\" title=\"3.11 案例-员工分组\"></a>3.11 案例-员工分组</h4><h5 id=\"3-11-1-案例描述\"><a href=\"#3-11-1-案例描述\" class=\"headerlink\" title=\"3.11.1 案例描述\"></a>3.11.1 案例描述</h5><ul>\n<li>10名员工（ABCDEFGHIJ），需要分配部门</li>\n<li>员工信息：姓名，工资</li>\n<li>部门：策划，美术，研发</li>\n<li>随机给10名员工分配工资和部门</li>\n<li>通过<code>multimap</code>进行信息插入：<code>key</code>部门编号，<code>value</code>员工</li>\n<li>分部门显示员工信息</li>\n</ul>\n<h5 id=\"3-11-2-实现步骤\"><a href=\"#3-11-2-实现步骤\" class=\"headerlink\" title=\"3.11.2 实现步骤\"></a>3.11.2 实现步骤</h5><ol>\n<li>创建10个员工对象，存入<code>vector</code>容器中</li>\n<li>遍历<code>vector</code>，取出每个员工，进行随机分组</li>\n<li>分组后，将<code>key</code>部门编号，<code>value</code>员工，存放到<code>multimap</code></li>\n<li>分部门显示员工信息</li>\n</ol>\n<h5 id=\"3-11-3-案例代码\"><a href=\"#3-11-3-案例代码\" class=\"headerlink\" title=\"3.11.3 案例代码\"></a>3.11.3 案例代码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by FHang on 2021/11/13 19:05</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PLAN 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ART 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RD 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Staff</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string staff_Name;</span><br><span class=\"line\">    <span class=\"type\">int</span> staff_Salary;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;Staff&gt; &amp;other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;Staff&gt;::const_iterator it = other.<span class=\"built_in\">cbegin</span>(); it != other.<span class=\"built_in\">cend</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; it-&gt;staff_Name &lt;&lt; <span class=\"string\">&quot; Salary: &quot;</span> &lt;&lt; it-&gt;staff_Salary &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">creatStaff</span><span class=\"params\">(vector&lt;Staff&gt; &amp;v_Staff)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string staffNameSeed = <span class=\"string\">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Staff staff;</span><br><span class=\"line\">        staff.staff_Name = <span class=\"string\">&quot;Staff_&quot;</span>;</span><br><span class=\"line\">        staff.staff_Name += staffNameSeed[i];</span><br><span class=\"line\">        staff.staff_Salary = <span class=\"built_in\">rand</span>() % <span class=\"number\">10000</span> + <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        v_Staff.<span class=\"built_in\">push_back</span>(staff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setStaffGroup</span><span class=\"params\">(vector&lt;Staff&gt; &amp;v_Staff, multimap&lt;<span class=\"type\">int</span>, Staff&gt; &amp;map_Depart)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (vector&lt;Staff&gt;::iterator it = v_Staff.<span class=\"built_in\">begin</span>(); it != v_Staff.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> depart_ID = <span class=\"built_in\">rand</span>() % <span class=\"number\">3</span>;</span><br><span class=\"line\">        map_Depart.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, Staff&gt;(depart_ID, *it));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">checkStaffByGroup</span><span class=\"params\">(multimap&lt;<span class=\"type\">int</span>, Staff&gt;::const_iterator &amp;itPos, <span class=\"type\">const</span> multimap&lt;<span class=\"type\">int</span>, Staff&gt; &amp;map_Depart, <span class=\"type\">const</span> <span class=\"type\">int</span> count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> index = <span class=\"number\">0</span>; itPos != map_Depart.<span class=\"built_in\">cend</span>() &amp;&amp; index &lt; count; ++itPos, ++index)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name: &quot;</span> &lt;&lt; itPos-&gt;second.staff_Name &lt;&lt; <span class=\"string\">&quot; Salary: &quot;</span> &lt;&lt; itPos-&gt;second.staff_Salary &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showStaffInfoByGroup</span><span class=\"params\">(multimap&lt;<span class=\"type\">int</span>, Staff&gt; &amp;map_Depart)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> countStaff_PLAN = map_Depart.<span class=\"built_in\">count</span>(PLAN);</span><br><span class=\"line\">    <span class=\"type\">int</span> countStaff_ART = map_Depart.<span class=\"built_in\">count</span>(ART);</span><br><span class=\"line\">    <span class=\"type\">int</span> countStaff_RD = map_Depart.<span class=\"built_in\">count</span>(RD);</span><br><span class=\"line\"></span><br><span class=\"line\">    multimap&lt;<span class=\"type\">int</span>, Staff&gt;::const_iterator itPos_Plan = map_Depart.<span class=\"built_in\">find</span>(PLAN);</span><br><span class=\"line\">    multimap&lt;<span class=\"type\">int</span>, Staff&gt;::const_iterator itPos_Art = map_Depart.<span class=\"built_in\">find</span>(ART);</span><br><span class=\"line\">    multimap&lt;<span class=\"type\">int</span>, Staff&gt;::const_iterator itPos_RD = map_Depart.<span class=\"built_in\">find</span>(RD);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Plan Department&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">checkStaffByGroup</span>(itPos_Plan, map_Depart, countStaff_PLAN);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Art Department&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">checkStaffByGroup</span>(itPos_Art, map_Depart, countStaff_ART);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;R&amp;D Department&gt;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">checkStaffByGroup</span>(itPos_RD, map_Depart, countStaff_RD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;Staff&gt; v_Staff;</span><br><span class=\"line\">    <span class=\"built_in\">creatStaff</span>(v_Staff);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(v_Staff);</span><br><span class=\"line\"></span><br><span class=\"line\">    multimap&lt;<span class=\"type\">int</span>, Staff&gt; map_Depart;</span><br><span class=\"line\">    <span class=\"built_in\">setStaffGroup</span>(v_Staff, map_Depart);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">showStaffInfoByGroup</span>(map_Depart);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","text":"C++_模板和STL[toc] 记录C++泛型编程和STL的使用和原理 1. 模板-Template1.1 模板概念 作用：建立通用的模具，提高编程的复用性 特...","permalink":"/post/1_05_C++_模板和STL","photos":[],"count_time":{"symbolsCount":"95k","symbolsTime":"1:27"},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E6%A8%A1%E6%9D%BF%E5%92%8CSTL\"><span class=\"toc-text\">C++_模板和STL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%A8%A1%E6%9D%BF-Template\"><span class=\"toc-text\">1. 模板-Template</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E6%A8%A1%E6%9D%BF%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.1 模板概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">1.2 函数模板</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-1-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1.2.1 函数模板语法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-2-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">1.2.2 函数模板注意事项</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-3-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">1.2.3 函数模板案例</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-4-%E6%99%AE%E9%80%9A%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%87%BD%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1.2.4 普通和模板函区别</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-5-%E6%99%AE%E9%80%9A%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">1.2.5 普通和模板函数调用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-6-%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7\"><span class=\"toc-text\">1.2.6 模板的局限性</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E7%B1%BB%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">1.3 类模板</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-1-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1.3.1 类模板语法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-2-%E7%B1%BB%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1.3.2 类和模板区别</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-3-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E4%B8%AD%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">1.3.3 类模板中成员函数创建时机</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-4-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E5%AF%B9%E8%B1%A1%E5%81%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">1.3.4 类模板对象做函数参数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-5-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E4%B8%8E%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">1.3.5 类模板与继承</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-6-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E7%B1%BB%E5%A4%96%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">1.3.6 类模板成员函数类外实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-7-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E5%88%86%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">1.3.7 类模板分文件编写</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-8-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E4%B8%8E%E5%8F%8B%E5%85%83\"><span class=\"toc-text\">1.3.8 类模板与友元</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-9-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">1.3.9 类模板案例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-STL%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2. STL基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-STL%E7%9A%84%E8%AF%9E%E7%94%9F\"><span class=\"toc-text\">2.1 STL的诞生</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-STL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2.2 STL基本概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-STL%E5%85%AD%E5%A4%A7%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">2.3 STL六大组件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-STL%E5%AE%B9%E5%99%A8-%E7%AE%97%E6%B3%95-%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">2.4 STL容器\\算法\\迭代器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-%E5%AE%B9%E5%99%A8-%E7%AE%97%E6%B3%95-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2.5 容器\\算法\\迭代器基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-5-1-vector%E5%AD%98%E6%94%BE%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.5.1 vector存放内置数据类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-5-2-vector%E5%AD%98%E6%94%BE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.5.2 vector存放自定义数据类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-5-3-vector%E5%AE%B9%E5%99%A8%E5%B5%8C%E5%A5%97%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">2.5.3 vector容器嵌套容器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-STL%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3. STL常用容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-string%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.1 string容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-1-string%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.1.1 string基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-2-string%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.1.2 string构造函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-3-string%E8%B5%8B%E5%80%BC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3.1.3 string赋值操作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-4-string%E5%AD%97%E7%AC%A6%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">3.1.4 string字符拼接</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-5-string%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2\"><span class=\"toc-text\">3.1.5 string查找替换</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-6-string%E5%AD%97%E7%AC%A6%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">3.1.6 string字符比较</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-7-string%E5%AD%97%E7%AC%A6%E5%AD%98%E5%8F%96\"><span class=\"toc-text\">3.1.7 string字符存取</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-8-string%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">3.1.8 string插入删除</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-9-string%E8%8E%B7%E5%8F%96%E5%AD%97%E4%B8%B2\"><span class=\"toc-text\">3.1.9 string获取字串</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-vector%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.2 vector容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-1-vector%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.2.1 vector基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-2-vector%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.2.2 vector构造函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-3-vector%E8%B5%8B%E5%80%BC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3.2.3 vector赋值操作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-4-vector%E5%AE%B9%E9%87%8F%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">3.2.4 vector容量大小</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-5-vector%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">3.2.5 vector插入删除</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-6-vector%E6%95%B0%E6%8D%AE%E5%AD%98%E5%8F%96\"><span class=\"toc-text\">3.2.6 vector数据存取</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-7-vector%E4%BA%92%E6%8D%A2%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.2.7 vector互换容器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-8-vector%E9%A2%84%E7%95%99%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">3.2.8 vector预留空间</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-deque%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.3 deque容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-1-deque%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.3.1 deque基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-2-deque%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.3.2 deque构造函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-3-deque%E8%B5%8B%E5%80%BC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3.3.3 deque赋值操作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-4-deque%E5%A4%A7%E5%B0%8F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3.3.4 deque大小操作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-5-deque%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">3.3.5 deque插入删除</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-6-deque%E6%95%B0%E6%8D%AE%E5%AD%98%E5%8F%96\"><span class=\"toc-text\">3.3.6 deque数据存取</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-7-deque%E5%AE%B9%E5%99%A8%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">3.3.7 deque容器排序</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E6%A1%88%E4%BE%8B-%E8%AF%84%E5%A7%94%E6%89%93%E5%88%86\"><span class=\"toc-text\">3.4 案例-评委打分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-4-1-%E6%A1%88%E4%BE%8B%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">3.4.1 案例描述</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-4-2-%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">3.4.2 实现步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-4-3-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">3.4.3 示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-stack%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.5 stack容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-5-1-stack%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.5.1 stack基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-5-2-stack%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">3.5.2 stack常用接口</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-queue%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.6 queue容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-1-queue%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.6.1 queue基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-2-queue%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">3.6.2 queue常用接口</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-list%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.7 list容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-1-list%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.7.1 list基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-2-list%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.7.2 list构造函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-3-list%E8%B5%8B%E5%80%BC%E4%BA%A4%E6%8D%A2\"><span class=\"toc-text\">3.7.3 list赋值交换</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-4-list%E5%A4%A7%E5%B0%8F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3.7.4 list大小操作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-5-list%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">3.7.5 list插入删除</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-6-list%E6%95%B0%E6%8D%AE%E5%AD%98%E5%8F%96\"><span class=\"toc-text\">3.7.6 list数据存取</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-7-list%E5%AE%B9%E5%99%A8%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">3.7.7 list容器排序</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-8-%E6%A1%88%E4%BE%8B-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">3.8 案例-自定义数据排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-9-set-multiset%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.9 set&#x2F;multiset容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-1-set%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.9.1 set基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-2-set%E6%9E%84%E9%80%A0%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">3.9.2 set构造赋值</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-3-set%E5%A4%A7%E5%B0%8F%E4%BA%A4%E6%8D%A2\"><span class=\"toc-text\">3.9.3 set大小交换</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-4-set%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">3.9.4 set插入删除</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-5-set%E6%9F%A5%E6%89%BE%E7%BB%9F%E8%AE%A1\"><span class=\"toc-text\">3.9.5 set查找统计</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-6-set-multiset%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3.9.6 set&#x2F;multiset区别</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-7-pair%E5%AF%B9%E7%BB%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">3.9.7 pair对组创建</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-8-set%E5%AE%B9%E5%99%A8%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">3.9.8 set容器排序</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-10-map-multimap%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.10 map&#x2F;multimap容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-10-1-map%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.10.1 map基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-10-2-map%E6%9E%84%E9%80%A0%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">3.10.2 map构造赋值</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-10-3-map%E5%A4%A7%E5%B0%8F%E4%BA%A4%E6%8D%A2\"><span class=\"toc-text\">3.10.3 map大小交换</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-10-4-map%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">3.10.4 map插入删除</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-10-5-map%E6%9F%A5%E6%89%BE%E7%BB%9F%E8%AE%A1\"><span class=\"toc-text\">3.10.5 map查找统计</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-10-6-map%E5%AE%B9%E5%99%A8%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">3.10.6 map容器排序</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-11-%E6%A1%88%E4%BE%8B-%E5%91%98%E5%B7%A5%E5%88%86%E7%BB%84\"><span class=\"toc-text\">3.11 案例-员工分组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-11-1-%E6%A1%88%E4%BE%8B%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">3.11.1 案例描述</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-11-2-%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">3.11.2 实现步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-11-3-%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">3.11.3 案例代码</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C++_通讯录管理系统","uid":"ece0e381639ba808e0c15b18566061ec","slug":"1_02_C++_通讯录管理系统","date":"2022-10-06T07:28:25.923Z","updated":"2023-01-10T01:10:19.448Z","comments":true,"path":"api/articles/1_02_C++_通讯录管理系统.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (2).webp","text":"C++_通讯录管理系统[toc] 1. 系统需求 添加联系人：向通讯录中添加联系人，联系人信息（姓名，性别，年龄，联系电话，家庭住址），最多记录1000人 显示...","permalink":"/post/1_02_C++_通讯录管理系统","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"22 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"C++_面向对象反汇编补充","uid":"e614b361765c5cfea11849494ca08809","slug":"1_08_C++_面向对象反汇编补充","date":"2022-10-06T07:28:25.917Z","updated":"2024-02-22T08:30:44.415Z","comments":true,"path":"api/articles/1_08_C++_面向对象反汇编补充.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/FHangH/FHangBlogCDN_03@master/Aurora_ (8).webp","text":"C++_面向对象反汇编补充[toc] 1. 类1.1 类的定义 C++中可以使用 struct，class来定义类 1.2 struct和class区别 str...","permalink":"/post/1_08_C++_面向对象反汇编补充","photos":[],"count_time":{"symbolsCount":"82k","symbolsTime":"1:15"},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"}],"tags":[{"name":"Assemly","slug":"Assemly","count":2,"path":"api/tags/Assemly.json"},{"name":"C/C++","slug":"C-C","count":10,"path":"api/tags/C-C.json"}],"author":{"name":"FangH","slug":"blog-author","avatar":"/img/fh.png","link":"/","description":"我曾惊鸿一瞥未来","socials":{"github":"https://github.com/FHangH","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/zi-heng-18-99-47","csdn":"https://blog.csdn.net/weixin_44519692?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}